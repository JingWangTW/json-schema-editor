{"version":3,"sources":["type.ts","model/utility.ts","model/schema/Schema.ts","model/schema/ArraySchema.ts","component/node_component/CodeField.tsx","component/node_component/HintText.tsx","component/node_component/EditorOptionModal.tsx","component/node_component/GenericField.tsx","component/node_component/OptionsButtons.tsx","component/node_component/SpaceFront.tsx","component/node_component/type_NodeComponent.tsx","component/schema_editor/ChildrenSchemaEditor.tsx","component/schema_editor/SchemaEditor.tsx","component/schema_editor/ArraySchemaEditor.tsx","model/schema/BooleanSchema.ts","component/schema_editor/BooleanSchemaEditor.tsx","model/schema/IntegerSchema.ts","component/node_component/EnumField.tsx","component/schema_editor/IntegerSchemaEditor.tsx","model/schema/NullSchema.ts","component/schema_editor/NullSchemaEditor.tsx","model/schema/NumberSchema.ts","component/schema_editor/NumberSchemaEditor.tsx","model/schema/ObjectSchema.ts","component/schema_editor/ObjectSchemaEditor.tsx","model/schema/StringSchema.ts","component/schema_editor/StringSchemaEditor.tsx","component/schema_editor/SchemaEditorFactory.tsx","component/schema_editor/RootSchemaEditor.tsx","component/Editor.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["DataType","NextId","name","mappedKeyId","getOrDefault","optionalValue","defaultValue","undefined","CloneReturnValue","target","key","descriptor","original","value","args","ret","apply","this","Object","Schema","type","currentField","defaultField","fieldName","changeEvent","toString","checked","parseInt","field","schema","title","description","$comment","f","required","next","JSON","stringify","emptyValue","temp","isNaN","codeValueString","length","codeParsed","parse","Array","isArray","keys","ArraySchema","childrenProperty","genericField","getGenericFieldFromSchema","const","retrieveDefaultOptionValue_code","default","minItems","retrieveDefaultOptionValue","NaN","maxItems","uniqueItems","generateChildrenPropertyFromSchema","items","map","s","selfId","hasSibling","isDeleteable","isRequiredFieldReadonly","isNameFieldReadonly","ref","React","createRef","children","genericSchema","getGenericSchemaFromField","exportSchemaWithoutUndefined","constant","exportSchemaWithoutUndefined_code","child","require","Error","Warn","Info","CodeField","props","state","isShowModal","setState","FormControl","onChange","e","update","InputGroup","Append","Button","variant","onClick","setDisplayCodeModal","bind","Modal","onHide","show","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Form","Group","placeholder","width","mode","theme","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Component","EditorOptionModal","isOptionModalShow","setDisplayOptionModal","Footer","clearOptionFieldForm","resetOptionFiledForm","GenericField","schemaType","getDefaultField","options","isDescriptionModalShow","isCommentFieldShow","recordField","preventDefault","newType","values","includes","changeType","changeName","Accordion","Row","Col","lg","OverlayTrigger","trigger","overlay","Tooltip","Prepend","Checkbox","disabled","Control","readOnly","as","custom","String","Integer","Number","Null","Boolean","setDisplayDescriptionModal","rows","style","paddingTop","Collapse","eventKey","cursor","Toggle","className","color","HintText","error","Set","info","warn","text","isWarnText","has","_addHint","isInfoText","isErrorText","_removeHint","from","hintType","add","delete","renderElement","colorMapping","hintCount","forEach","push","charAt","toUpperCase","substring","ToggleAddButton","forwardRef","displayName","NodeOptionsButtons","buttonOptions","hasChild","addChild","addSibling","addHtmlDropId","addToolTipId","Dropdown","Menu","Item","href","isOptionExist","showOptionModal","SpaceFront","depth","Hint","ChildrenSchemaEditor","hintTextRef","childrenDidUpdate","checkDuplicateChildrenName","current","get","c","getField","exportSchema","currentIndex","originChildren","p","findIndex","splice","findNameDuplicate","DUPLICATED_FIELD_NAME","remove","prevState","isNameUnique","nameList","getCurrentField","SchemaEditor","optionsButtonsAttr","genericFieldOptions","optionModalRef","genericFieldRef","childrenRef","clearOptionField","resetOptionField","ArraySchemaEditor","childrenLength","MIN_GT_MAX_ITEMS","prevProps","ARRAY_ITEM_INDEX_MATTER","recordCode","CANT_PARSE_JSON_CONST","CANT_PARSE_JSON_DEFAULT","OptionsButtons","Label","column","htmlFor","min","Check","Input","BooleanSchema","event","selectedIndex","isSelectElement","prototype","call","toLowerCase","constValue","BooleanSchemaEditor","hidden","selected","IntegerSchema","max","ex_min","ex_max","minimum","exclusiveMinimum","maximum","exclusiveMaximum","enum","multipleOf","index","enumeration","filter","enn","EnumField","IntegerSchemaEditor","MIN_GT_MAX_VALUE","addEnum","deleteEnum","updateEnum","controlId","inline","label","height","NullSchema","NullSchemaEditor","NumberSchema","parseFloat","NumberSchemaEditor","ObjectSchema","maxProperties","minProperties","properties","find","r","ObjectSchemaEditor","MIN_GT_MAX_PROPERTIES","StringSchema","minLength","maxLength","format","pattern","StringSchemaEditor","MIN_GT_MAX_LENGTH","v","i","SchemaEditorFactory","RootSchemaEditor","editorRef","console","log","Editor","fileUploadRef","rootSchemaEditorKey","click","a","files","validator","Ajv","schemaId","addMetaSchema","draft_04_meta","draft_06_meta","validateSchema","fileBlob","Blob","blobURL","window","URL","createObjectURL","anchorElement","document","createElement","setAttribute","body","appendChild","removeChild","message","data-target","import","toggleImport","export","Toast","onClose","delay","autohide","position","bottom","right","borderColor","App","Navbar","collapseOnSelect","expand","bg","Brand","Text","rel","src","alt","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2213ae7e.chunk.js","sourcesContent":["export type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\r\nexport type XOR_Partial<T, U> = (Without<T, U> & Partial<U>) | (Without<U, T> & Partial<T>);\r\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\r\nexport type IntersectionKey<T, U> = Extract<keyof T, keyof U>;\r\n// https://stackoverflow.com/a/63553761\r\nexport type KeysMatching<T, V> = { [K in keyof Required<T>]: Required<T>[K] extends V ? K : never }[keyof T];\r\n\r\nexport enum DataType {\r\n    Array = \"array\",\r\n    Boolean = \"boolean\",\r\n    Integer = \"integer\",\r\n    Number = \"number\",\r\n    Object = \"object\",\r\n    String = \"string\",\r\n    Null = \"null\",\r\n}\r\n","class NextId {\r\n    private static mappedKeyId: { [key: string]: number } = {};\r\n\r\n    public static next(name = \"global\"): number {\r\n        if (!(name in NextId.mappedKeyId)) {\r\n            NextId.mappedKeyId[name] = 0;\r\n        }\r\n\r\n        NextId.mappedKeyId[name]++;\r\n\r\n        return NextId.mappedKeyId[name];\r\n    }\r\n}\r\n\r\nfunction arrayEquals<T>(a: T[], b: T[]): boolean {\r\n    if (a === b) return true;\r\n    if (a.length !== b.length) return false;\r\n    return a.every(c => b.includes(c));\r\n}\r\n\r\nfunction getOrDefault<T>(optionalValue: T | undefined, defaultValue: T): T {\r\n    if (optionalValue === undefined) return defaultValue;\r\n    else return optionalValue;\r\n}\r\n\r\nfunction CloneReturnValue(target: unknown, key: string | symbol, descriptor: PropertyDescriptor): PropertyDescriptor {\r\n    const original = descriptor.value;\r\n\r\n    descriptor.value = function (...args: unknown[]): unknown {\r\n        const ret = original.apply(this, args);\r\n        if (ret && ret instanceof Object) return { ...ret };\r\n        else return ret;\r\n    };\r\n\r\n    return descriptor;\r\n}\r\n\r\nexport { NextId, getOrDefault, CloneReturnValue, arrayEquals };\r\n","import { CodeFieldValue, IGenericField } from \"../../component/node_component/type_NodeComponent\";\r\nimport { FieldWithoutType, ISchemaEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, KeysMatching } from \"../../type\";\r\nimport { CloneReturnValue, NextId, getOrDefault } from \"../utility\";\r\nimport { IGenericSchemaType, ISchemaType } from \"./type_schema\";\r\n\r\nabstract class Schema<SchemaType extends ISchemaType, FieldType extends ISchemaEditorField> {\r\n    protected abstract type: DataType;\r\n    protected abstract currentField: Required<FieldType>;\r\n    protected abstract defaultField: Required<FieldType>;\r\n\r\n    abstract resetOptionField(): Required<FieldType>;\r\n    abstract clearOptionField(): Required<FieldType>;\r\n    abstract exportSchema(): SchemaType;\r\n\r\n    @CloneReturnValue\r\n    public recordField(fieldName: keyof FieldType, changeEvent: React.ChangeEvent<HTMLInputElement>): Required<FieldType> {\r\n        switch (typeof this.currentField[fieldName]) {\r\n            case \"string\":\r\n                this.currentField[fieldName] = (changeEvent.target.value.toString() as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n            case \"boolean\":\r\n                this.currentField[fieldName] = (changeEvent.target.checked as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n            case \"number\":\r\n                this.currentField[fieldName] = (parseInt(changeEvent.target.value) as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public getDefaultField(): Required<FieldType> {\r\n        return this.defaultField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public getCurrentField(): Required<FieldType> {\r\n        return this.currentField;\r\n    }\r\n\r\n    protected getGenericSchemaFromField(field: IGenericField): IGenericSchemaType {\r\n        const schema: IGenericSchemaType = {};\r\n\r\n        if (field.title && field.title !== \"\") schema.title = field.title;\r\n        if (field.description && field.description !== \"\") schema.description = field.description;\r\n        if (field.$comment && field.$comment !== \"\") schema.$comment = field.$comment;\r\n\r\n        return schema;\r\n    }\r\n\r\n    protected getGenericFieldFromSchema(schema?: IGenericSchemaType, field?: FieldWithoutType<IGenericField>): Required<IGenericField> {\r\n        let f: IGenericField;\r\n\r\n        if (schema === undefined) schema = {};\r\n        if (field === undefined) {\r\n            f = {\r\n                type: this.type,\r\n                required: true,\r\n                name: `Field_${NextId.next(\"Field\")}`,\r\n            };\r\n        } else {\r\n            f = { type: this.type, ...field };\r\n        }\r\n\r\n        return {\r\n            type: this.type,\r\n            required: f.required,\r\n            name: f.name,\r\n\r\n            title: getOrDefault(schema.title, getOrDefault(f.title, \"\")),\r\n            description: getOrDefault(schema.description, getOrDefault(f.description, \"\")),\r\n            $comment: getOrDefault(schema.$comment, getOrDefault(f.$comment, \"\")),\r\n        };\r\n    }\r\n\r\n    protected retrieveDefaultOptionValue<T extends keyof SchemaType>(\r\n        key: T,\r\n        defaultValue: SchemaType[T],\r\n        schema?: SchemaType\r\n    ): Required<SchemaType>[T] {\r\n        if (schema && key in schema && schema[key] !== undefined) {\r\n            return schema[key];\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    protected retrieveDefaultOptionValue_code<T extends Extract<keyof SchemaType, KeysMatching<FieldType, CodeFieldValue>>>(\r\n        key: T,\r\n        schema?: SchemaType\r\n    ): CodeFieldValue {\r\n        if (schema && key in schema && schema[key] !== undefined) {\r\n            return JSON.stringify(schema[key], null, 4) as CodeFieldValue;\r\n        } else {\r\n            return \"\" as CodeFieldValue;\r\n        }\r\n    }\r\n\r\n    protected exportSchemaWithoutUndefined<K extends keyof (SchemaType | FieldType)>(\r\n        key: K,\r\n        emptyValue: Required<FieldType>[K]\r\n    ): Partial<Record<K, FieldType[K]>> {\r\n        const temp: Partial<Record<K, FieldType[K]>> = {};\r\n\r\n        // NaN === Nan get false\r\n        if (typeof emptyValue === \"number\" && isNaN(emptyValue)) {\r\n            if (!isNaN((this.currentField[key] as unknown) as number)) {\r\n                temp[key] = this.currentField[key];\r\n            }\r\n        } else {\r\n            if (this.currentField[key] !== emptyValue) {\r\n                temp[key] = this.currentField[key];\r\n            }\r\n        }\r\n\r\n        return temp;\r\n    }\r\n\r\n    protected exportSchemaWithoutUndefined_code<K extends Extract<keyof SchemaType, KeysMatching<FieldType, CodeFieldValue>>>(\r\n        key: K\r\n    ): Partial<Record<K, SchemaType[K]>> {\r\n        const temp: Partial<Record<K, SchemaType[K]>> = {};\r\n\r\n        const codeValueString = (this.currentField[key] as unknown) as CodeFieldValue;\r\n\r\n        if (codeValueString.length === 0) return {};\r\n\r\n        const codeParsed = JSON.parse(codeValueString);\r\n\r\n        if (\r\n            !(\r\n                (Array.isArray(codeParsed) && codeParsed.length === 0) ||\r\n                (typeof codeParsed === \"object\" && Object.keys(codeParsed).length === 0)\r\n            )\r\n        )\r\n            temp[key] = codeParsed;\r\n\r\n        return temp;\r\n    }\r\n}\r\n\r\nexport default Schema;\r\n","import React from \"react\";\r\n\r\nimport { CodeFieldValue } from \"../../component/node_component/type_NodeComponent\";\r\nimport { FieldWithoutType, IArrayEditorField, IChildProperty, ISchemaEditorType } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, KeysMatching } from \"../../type\";\r\nimport { CloneReturnValue, NextId } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IArraySchemaType, IChildrenSchemaType, IGenericSchemaType } from \"./type_schema\";\r\n\r\nclass ArraySchema extends Schema<IArraySchemaType, IArrayEditorField> {\r\n    protected type = DataType.Array;\r\n    protected currentField: Required<IArrayEditorField>;\r\n    protected defaultField: Required<IArrayEditorField>;\r\n    public readonly childrenProperty?: IChildProperty[];\r\n\r\n    constructor(schema?: IArraySchemaType, field?: FieldWithoutType<IArrayEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            const: this.retrieveDefaultOptionValue_code(\"const\", schema),\r\n            default: this.retrieveDefaultOptionValue_code(\"default\", schema),\r\n\r\n            minItems: this.retrieveDefaultOptionValue(\"minItems\", NaN, schema),\r\n            maxItems: this.retrieveDefaultOptionValue(\"maxItems\", NaN, schema),\r\n            uniqueItems: this.retrieveDefaultOptionValue(\"uniqueItems\", false, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n\r\n        if (schema) this.childrenProperty = this.generateChildrenPropertyFromSchema(schema);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    recordCode(field: KeysMatching<IArrayEditorField, CodeFieldValue>, value: CodeFieldValue): Required<IArrayEditorField> {\r\n        this.currentField[field] = value;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    generateChildrenPropertyFromSchema(schema: IArraySchemaType): IChildProperty[] {\r\n        if (schema.items) {\r\n            if (schema.items instanceof Array) {\r\n                return schema.items.map(s => {\r\n                    return {\r\n                        type: s.type,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n\r\n                        hasSibling: true,\r\n                        isDeleteable: true,\r\n                        isRequiredFieldReadonly: true,\r\n                        isNameFieldReadonly: true,\r\n\r\n                        ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                        field: {\r\n                            name: \"items\",\r\n                            required: true,\r\n                        },\r\n\r\n                        schema: s,\r\n                    };\r\n                });\r\n            } else {\r\n                return [\r\n                    {\r\n                        type: schema.type,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n\r\n                        hasSibling: true,\r\n                        isDeleteable: true,\r\n                        isRequiredFieldReadonly: true,\r\n                        isNameFieldReadonly: true,\r\n\r\n                        ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                        field: {\r\n                            name: \"items\",\r\n                            required: true,\r\n                        },\r\n\r\n                        schema: schema.items,\r\n                    },\r\n                ];\r\n            }\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IArrayEditorField> {\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.default = this.defaultField.default;\r\n\r\n        this.currentField.maxItems = this.defaultField.maxItems;\r\n        this.currentField.minItems = this.defaultField.minItems;\r\n        this.currentField.uniqueItems = this.defaultField.uniqueItems;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IArrayEditorField> {\r\n        this.currentField.const = \"\" as CodeFieldValue;\r\n        this.currentField.default = \"\" as CodeFieldValue;\r\n\r\n        this.currentField.maxItems = NaN;\r\n        this.currentField.minItems = NaN;\r\n        this.currentField.uniqueItems = false;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(children?: IChildrenSchemaType): IArraySchemaType {\r\n        const type = DataType.Array;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const { uniqueItems } = this.currentField;\r\n\r\n        const minItems = this.exportSchemaWithoutUndefined(\"minItems\", NaN);\r\n        const maxItems = this.exportSchemaWithoutUndefined(\"maxItems\", NaN);\r\n\r\n        const constant = this.exportSchemaWithoutUndefined_code(\"const\");\r\n        const defaultValue = this.exportSchemaWithoutUndefined_code(\"default\");\r\n\r\n        let items: IArraySchemaType[\"items\"];\r\n\r\n        if (children) {\r\n            if (children.length === 1) {\r\n                items = children[0].value;\r\n            } else if (children.length > 1) {\r\n                items = children.map(child => child.value);\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...minItems,\r\n            ...maxItems,\r\n            uniqueItems,\r\n            items,\r\n            ...constant,\r\n            ...defaultValue,\r\n        };\r\n    }\r\n}\r\n\r\nexport default ArraySchema;\r\n","import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport { Button, Form, FormControl, InputGroup, Modal } from \"react-bootstrap\";\r\nimport { TiPencil } from \"react-icons/ti\";\r\n\r\nimport { CodeFieldValue } from \"./type_NodeComponent\";\r\n\r\nrequire(\"ace-builds/src-noconflict/mode-json\");\r\nrequire(\"ace-builds/src-noconflict/theme-terminal\");\r\n\r\ninterface CodeFieldProps {\r\n    title: string;\r\n\r\n    value: CodeFieldValue;\r\n    update(value: CodeFieldValue): void;\r\n}\r\n\r\ninterface CodeFieldState {\r\n    isShowModal: boolean;\r\n}\r\n\r\nclass CodeField extends React.Component<CodeFieldProps, CodeFieldState> {\r\n    constructor(props: CodeFieldProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isShowModal: false,\r\n        };\r\n    }\r\n\r\n    setDisplayCodeModal(isShowModal: boolean): void {\r\n        this.setState({ isShowModal });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <FormControl\r\n                    type=\"text\"\r\n                    onChange={(e): void => {\r\n                        this.props.update(e.target.value as CodeFieldValue);\r\n                    }}\r\n                    value={this.props.value}\r\n                />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"outline-primary\" onClick={this.setDisplayCodeModal.bind(this, true)}>\r\n                        <TiPencil />\r\n                    </Button>\r\n                </InputGroup.Append>\r\n                <Modal\r\n                    onHide={this.setDisplayCodeModal.bind(this, false)}\r\n                    show={this.state.isShowModal}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"code-modal\"\r\n                    centered\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title id=\"code-modal\">{this.props.title}</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form.Group>\r\n                            <AceEditor\r\n                                placeholder=\"Placeholder Text\"\r\n                                width=\"100%\"\r\n                                mode=\"json\"\r\n                                theme=\"terminal\"\r\n                                name=\"Code\"\r\n                                onChange={(e): void => {\r\n                                    this.props.update(e as CodeFieldValue);\r\n                                }}\r\n                                fontSize={14}\r\n                                showPrintMargin={true}\r\n                                showGutter={true}\r\n                                highlightActiveLine={true}\r\n                                value={this.props.value}\r\n                                setOptions={{\r\n                                    enableBasicAutocompletion: false,\r\n                                    enableLiveAutocompletion: false,\r\n                                    enableSnippets: false,\r\n                                    showLineNumbers: true,\r\n                                    tabSize: 4,\r\n                                }}\r\n                            />\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodeField;\r\n","import React from \"react\";\r\n\r\nimport { NextId } from \"../../model/utility\";\r\nimport { EmptyProps } from \"../type_component\";\r\n\r\nexport enum Error {\r\n    DUPLICATED_FIELD_NAME = \"Find duplicated field name\",\r\n    CANT_PARSE_JSON_CONST = \"Invalid JSON in const field\",\r\n    CANT_PARSE_JSON_DEFAULT = \"Invalid JSON in default field\",\r\n}\r\n\r\nexport enum Warn {\r\n    MIN_GT_MAX_ITEMS = \"Min Items > Max Items\",\r\n    MIN_GT_MAX_VALUE = \"Min Value > Max Value\",\r\n    MIN_GT_MAX_PROPERTIES = \"Min Properties > Max Properties\",\r\n    MIN_GT_MAX_LENGTH = \"Min Length > Max Length\",\r\n}\r\n\r\nexport enum Info {\r\n    ARRAY_ITEM_INDEX_MATTER = \"Ordinal index of each item under Array type is meaningful\",\r\n}\r\ninterface IHintTextState {\r\n    error: Set<Error>;\r\n    info: Set<Info>;\r\n    warn: Set<Warn>;\r\n}\r\n\r\ntype HintType = keyof IHintTextState;\r\ntype HintTextType = Warn | Error | Info;\r\n\r\nclass HintText extends React.Component<EmptyProps, IHintTextState> {\r\n    constructor(props: EmptyProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            error: new Set<Error>(),\r\n            info: new Set<Info>(),\r\n            warn: new Set<Warn>(),\r\n        };\r\n    }\r\n\r\n    static isWarnText(text: string): text is Warn {\r\n        return Object.values(Warn).includes(text as Warn);\r\n    }\r\n\r\n    static isInfoText(text: string): text is Info {\r\n        return Object.values(Info).includes(text as Info);\r\n    }\r\n\r\n    static isErrorText(text: string): text is Error {\r\n        return Object.values(Error).includes(text as Error);\r\n    }\r\n\r\n    add(text: HintTextType): void {\r\n        if (HintText.isWarnText(text)) {\r\n            if (!this.state[\"warn\"].has(text)) this._addHint(\"warn\", text);\r\n        } else if (HintText.isInfoText(text)) {\r\n            if (!this.state[\"info\"].has(text)) this._addHint(\"info\", text);\r\n        } else if (HintText.isErrorText(text)) {\r\n            if (!this.state[\"error\"].has(text)) this._addHint(\"error\", text);\r\n        }\r\n    }\r\n\r\n    remove(text: HintTextType): void {\r\n        if (HintText.isWarnText(text)) {\r\n            if (this.state[\"warn\"].has(text)) this._removeHint(\"warn\", text);\r\n        } else if (HintText.isInfoText(text)) {\r\n            if (this.state[\"info\"].has(text)) this._removeHint(\"info\", text);\r\n        } else if (HintText.isErrorText(text)) {\r\n            if (this.state[\"error\"].has(text)) this._removeHint(\"error\", text);\r\n        }\r\n    }\r\n\r\n    get(type: HintType): Warn[] | Error[] | Info[] {\r\n        switch (type) {\r\n            case \"warn\":\r\n                return Array.from(this.state[\"warn\"]);\r\n            case \"error\":\r\n                return Array.from(this.state[\"error\"]);\r\n            case \"info\":\r\n                return Array.from(this.state[\"info\"]);\r\n        }\r\n    }\r\n\r\n    private _addHint<T extends HintType>(hintType: T, text: HintTextType): void {\r\n        if (hintType === \"warn\") this.state[\"warn\"].add(text as Warn);\r\n        else if (hintType === \"info\") this.state[\"info\"].add(text as Info);\r\n        else if (hintType === \"error\") this.state[\"error\"].add(text as Error);\r\n\r\n        this.setState(this.state);\r\n    }\r\n\r\n    private _removeHint<T extends HintTextType>(hintType: HintType, text: T): void {\r\n        if (hintType === \"warn\") this.state[\"warn\"].delete(text as Warn);\r\n        else if (hintType === \"info\") this.state[\"info\"].delete(text as Info);\r\n        else if (hintType === \"error\") this.state[\"error\"].delete(text as Error);\r\n\r\n        this.setState(this.state);\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const renderElement: JSX.Element[] = [];\r\n        const colorMapping: Record<HintType, string> = {\r\n            error: \"red\",\r\n            info: \"green\",\r\n            warn: \"orange\",\r\n        };\r\n\r\n        let key: HintType;\r\n        let hintCount = 0;\r\n\r\n        for (key in this.state) {\r\n            this.state[key].forEach((text: HintTextType) => {\r\n                if (hintCount > 0) renderElement.push(<br />);\r\n                hintCount++;\r\n\r\n                renderElement.push(\r\n                    <span style={{ color: colorMapping[key] }} key={NextId.next()}>\r\n                        <b>{`${key.charAt(0).toUpperCase()}${key.substring(1)}`}: </b>\r\n                        {text}\r\n                    </span>\r\n                );\r\n            });\r\n        }\r\n\r\n        return <>{renderElement}</>;\r\n    }\r\n}\r\n\r\nexport default HintText;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\ninterface EditorOptionModalProps {\r\n    clearOptionFieldForm(): void;\r\n    resetOptionFiledForm(): void;\r\n}\r\n\r\ninterface EditorOptionModalState {\r\n    isOptionModalShow: boolean;\r\n}\r\n\r\nclass EditorOptionModal extends React.Component<PropsWithChildren<EditorOptionModalProps>, EditorOptionModalState> {\r\n    constructor(props: EditorOptionModalProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOptionModalShow: false,\r\n        };\r\n    }\r\n\r\n    setDisplayOptionModal(show: boolean): void {\r\n        this.setState({ isOptionModalShow: show });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Modal\r\n                onHide={this.setDisplayOptionModal.bind(this, false)}\r\n                show={this.state.isOptionModalShow}\r\n                size=\"lg\"\r\n                aria-labelledby=\"option-modal\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"option-modal\">Advanced Options</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{this.props.children}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={this.props.clearOptionFieldForm}>\r\n                        Clear\r\n                    </Button>\r\n                    <Button variant=\"outline-primary\" onClick={this.props.resetOptionFiledForm}>\r\n                        Reset\r\n                    </Button>\r\n                    <Button variant=\"outline-success\" onClick={this.setDisplayOptionModal.bind(this, false)}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorOptionModal;\r\n","import \"../../index.css\";\r\n\r\nimport React from \"react\";\r\nimport { Accordion, Button, Col, Form, FormControl, InputGroup, Modal, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AiOutlineDown } from \"react-icons/ai\";\r\nimport { TiPencil } from \"react-icons/ti\";\r\n\r\nimport Schema from \"../../model/schema/Schema\";\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport { getOrDefault } from \"../../model/utility\";\r\nimport { DataType } from \"../../type\";\r\nimport { ISchemaEditorField } from \"../schema_editor/type_SchemaEditor\";\r\nimport { IGenericField, IGenericFieldOptions } from \"./type_NodeComponent\";\r\n\r\ninterface IGenericFieldProps<T extends ISchemaType, U extends ISchemaEditorField> {\r\n    options: IGenericFieldOptions;\r\n    schemaType: Schema<T, U>;\r\n\r\n    changeType(props: DataType): void;\r\n    changeName(): void;\r\n}\r\n\r\ninterface IGenericFieldState {\r\n    currentField: Required<IGenericField>;\r\n    isRequiredFieldReadonly: boolean;\r\n    isNameFieldReadonly: boolean;\r\n\r\n    isDescriptionModalShow: boolean;\r\n    isCommentFieldShow: boolean;\r\n}\r\n\r\nclass GenericField extends React.Component<IGenericFieldProps<ISchemaType, IGenericField>, IGenericFieldState> {\r\n    constructor(props: IGenericFieldProps<ISchemaType, IGenericField>) {\r\n        super(props);\r\n\r\n        const currentField: Required<IGenericField> = props.schemaType.getDefaultField();\r\n\r\n        this.state = {\r\n            currentField,\r\n            isRequiredFieldReadonly: getOrDefault(this.props.options.isRequiredFieldReadonly, false),\r\n            isNameFieldReadonly: getOrDefault(this.props.options.isNameFieldReadonly, false),\r\n\r\n            isDescriptionModalShow: false,\r\n            isCommentFieldShow: false,\r\n        };\r\n    }\r\n\r\n    recordField(fieldName: keyof Omit<IGenericField, \"type\">, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentField = this.props.schemaType.recordField(fieldName, changeEvent);\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    changeType(changeEvent: React.ChangeEvent<HTMLSelectElement>): void {\r\n        changeEvent.preventDefault();\r\n\r\n        const newType = changeEvent.target.value as DataType;\r\n\r\n        if (Object.values(DataType).includes(newType)) {\r\n            this.props.changeType(newType);\r\n        }\r\n    }\r\n\r\n    changeName(changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.recordField(\"name\", changeEvent);\r\n        if (this.props.changeName) this.props.changeName();\r\n    }\r\n\r\n    setDisplayDescriptionModal(show: boolean): void {\r\n        this.setState({\r\n            isDescriptionModalShow: show,\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Accordion>\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Row>\r\n                            <Col lg={3}>\r\n                                <InputGroup>\r\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"add-tooltip\"> Required </Tooltip>}>\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Checkbox\r\n                                                checked={this.state.currentField.required}\r\n                                                disabled={this.state.isRequiredFieldReadonly}\r\n                                                onChange={this.recordField.bind(this, \"required\")}\r\n                                            />\r\n                                        </InputGroup.Prepend>\r\n                                    </OverlayTrigger>\r\n\r\n                                    <Form.Control\r\n                                        placeholder=\"items\"\r\n                                        readOnly={this.state.isNameFieldReadonly}\r\n                                        value={this.state.currentField.name}\r\n                                        onChange={this.changeName.bind(this)}\r\n                                    />\r\n                                </InputGroup>\r\n                            </Col>\r\n                            <Col lg={1}>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    custom\r\n                                    placeholder=\"DataType\"\r\n                                    onChange={this.changeType.bind(this)}\r\n                                    value={this.state.currentField.type}\r\n                                >\r\n                                    <option value={DataType.Object}>Object</option>\r\n                                    <option value={DataType.Array}>Array</option>\r\n                                    <option value={DataType.String}>String</option>\r\n                                    <option value={DataType.Integer}>Integer</option>\r\n                                    <option value={DataType.Number}>Number</option>\r\n                                    <option value={DataType.Null}>Null</option>\r\n                                    <option value={DataType.Boolean}>Boolean</option>\r\n                                </Form.Control>\r\n                            </Col>\r\n                            <Col lg={4}>\r\n                                <Form.Control\r\n                                    placeholder=\"Titile\"\r\n                                    value={this.state.currentField.title}\r\n                                    onChange={this.recordField.bind(this, \"title\")}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={4}>\r\n                                <InputGroup>\r\n                                    <FormControl\r\n                                        type=\"text\"\r\n                                        id=\"Description\"\r\n                                        placeholder=\"Description\"\r\n                                        value={this.state.currentField.description}\r\n                                        onChange={this.recordField.bind(this, \"description\")}\r\n                                    />\r\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"add-tooltip\"> Edit </Tooltip>}>\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-primary\" onClick={this.setDisplayDescriptionModal.bind(this, true)}>\r\n                                                <TiPencil />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </OverlayTrigger>\r\n                                </InputGroup>\r\n\r\n                                <Modal\r\n                                    onHide={this.setDisplayDescriptionModal.bind(this, false)}\r\n                                    show={this.state.isDescriptionModalShow}\r\n                                    size=\"lg\"\r\n                                    aria-labelledby=\"description-modal\"\r\n                                    centered\r\n                                >\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title id=\"description-modal\">Description</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <Form.Group>\r\n                                            <Form.Control\r\n                                                as=\"textarea\"\r\n                                                rows={3}\r\n                                                value={this.state.currentField.description}\r\n                                                onChange={this.recordField.bind(this, \"description\")}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Modal.Body>\r\n                                </Modal>\r\n                            </Col>\r\n                            <Col lg={12} style={{ paddingTop: \"5px\" }}>\r\n                                <Accordion.Collapse eventKey=\"0\">\r\n                                    <Form.Control\r\n                                        placeholder=\"$comment\"\r\n                                        value={this.state.currentField.$comment}\r\n                                        onChange={this.recordField.bind(this, \"$comment\")}\r\n                                    />\r\n                                </Accordion.Collapse>\r\n                            </Col>\r\n                        </Form.Row>\r\n                    </Col>\r\n                    <Col lg=\"auto\" style={{ cursor: \"pointer\" }}>\r\n                        <Accordion.Toggle eventKey=\"0\" as=\"span\" className=\"node-option-block\">\r\n                            <AiOutlineDown color=\"blue\" />\r\n                        </Accordion.Toggle>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Accordion>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GenericField;\r\n","import \"../../index.css\";\r\n\r\nimport React from \"react\";\r\nimport { Dropdown, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AiOutlineSetting } from \"react-icons/ai\";\r\nimport { FaPlus, FaRegTrashAlt } from \"react-icons/fa\";\r\n\r\nimport { NextId } from \"../../model/utility\";\r\nimport { IOptionsButtonsAttr } from \"./type_NodeComponent\";\r\n\r\ninterface INodeOptionsButtonsProps {\r\n    buttonOptions: IOptionsButtonsAttr;\r\n\r\n    showOptionModal(): void;\r\n\r\n    addChild?(): void;\r\n    addSibling?(): void;\r\n    delete?(): void;\r\n}\r\n\r\ninterface ToggleAddButtonProps {\r\n    id: string;\r\n    onClick(event: React.MouseEvent<HTMLSpanElement>): void;\r\n}\r\n\r\nconst ToggleAddButton = React.forwardRef<HTMLSpanElement, ToggleAddButtonProps>((props: ToggleAddButtonProps, ref) => (\r\n    <span ref={ref} id={props.id} onClick={props.onClick}>\r\n        <FaPlus color=\"green\" />\r\n    </span>\r\n));\r\n\r\n// to make eslint happy\r\nToggleAddButton.displayName = \"ToggleAddButton\";\r\n\r\nfunction NodeOptionsButtons(props: INodeOptionsButtonsProps): JSX.Element {\r\n    if (props.buttonOptions.hasChild && !props.addChild)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.hasChild = true, without addChild()\");\r\n    else if (props.buttonOptions.hasSibling && !props.addSibling)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.hasSibling = true, without addSibling()\");\r\n    else if (props.buttonOptions.isDeleteable && !props.delete)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.isDeleteable = true, without delete()\");\r\n\r\n    const addHtmlDropId = NextId.next(\"Key\").toString();\r\n    const addToolTipId = NextId.next(\"Key\").toString();\r\n\r\n    return (\r\n        <div className=\"node-option-block\">\r\n            {props.buttonOptions.hasChild && props.buttonOptions.hasSibling && (\r\n                <div className=\"node-option-btn-block\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle as={ToggleAddButton} id={addHtmlDropId} />\r\n\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item href=\"#\" eventKey=\"1\" onClick={props.addSibling}>\r\n                                Add Sibling\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item href=\"#\" eventKey=\"2\" onClick={props.addChild}>\r\n                                Add Child\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.hasChild !== props.buttonOptions.hasSibling && (\r\n                <div className=\"node-option-btn-block\" onClick={props.buttonOptions.hasChild ? props.addChild : props.addSibling}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id={addToolTipId}> Add </Tooltip>}>\r\n                        <span>\r\n                            <FaPlus color=\"green\" />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.isDeleteable && (\r\n                <div className=\"node-option-btn-block\" onClick={props.delete}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"delete-tooltip\"> Delete </Tooltip>}>\r\n                        <span>\r\n                            <FaRegTrashAlt color=\"red\" />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.isOptionExist && (\r\n                <div className=\"node-option-btn-block\" onClick={props.showOptionModal}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"option-tooltip\"> Option </Tooltip>}>\r\n                        <span>\r\n                            <AiOutlineSetting />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NodeOptionsButtons;\r\n","import React from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\n\r\nfunction SpaceFront(props: { depth: number }): JSX.Element {\r\n    return <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (props.depth * 15).toString() + \"px\" }} />;\r\n}\r\n\r\nexport default SpaceFront;\r\n","import { IGenericSchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport { Error, Info, Warn } from \"./HintText\";\r\n\r\nexport interface IGenericField {\r\n    type: DataType;\r\n\r\n    name: string;\r\n    required: boolean;\r\n    title?: string;\r\n    description?: string;\r\n\r\n    $comment?: string;\r\n}\r\n\r\nexport interface IOptionsButtonsAttr {\r\n    hasChild: boolean;\r\n    hasSibling: boolean;\r\n    isDeleteable: boolean;\r\n    isOptionExist: boolean;\r\n}\r\n\r\nexport type IGenericFieldOptions = {\r\n    isRequiredFieldReadonly?: boolean;\r\n    isNameFieldReadonly?: boolean;\r\n};\r\n\r\nexport type OmitGenericField<T extends IGenericSchemaType> = Omit<T, keyof IGenericField>;\r\n\r\nexport const Hint = { Warn, Info, Error };\r\nexport type Hint = typeof Hint;\r\n\r\n// a type to represent code file value\r\n// It may change to a class or interface in the future\r\n// It's just used to type checking only\r\nexport type CodeFieldValue = string & { attr: \"This is a code field value\" };\r\n","import React from \"react\";\r\n\r\nimport { IChildrenSchemaType } from \"../../model/schema/type_schema\";\r\nimport { NextId, getOrDefault } from \"../../model/utility\";\r\nimport { DataType, PartialBy } from \"../../type\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport { Hint } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditorFactory from \"./SchemaEditorFactory\";\r\nimport { IChildProperty, IChildrenEditorProps, INewChildEditorProps, ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ninterface ChildrenNodesState {\r\n    children: Array<IChildProperty>;\r\n}\r\n\r\nclass ChildrenSchemaEditor extends React.Component<IChildrenEditorProps, ChildrenNodesState> {\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: IChildrenEditorProps) {\r\n        super(props);\r\n\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        const children: IChildProperty[] = getOrDefault(props.childrenProperty, []);\r\n\r\n        this.state = {\r\n            children,\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.props.childrenDidUpdate) this.props.childrenDidUpdate(this.state.children);\r\n        this.checkDuplicateChildrenName();\r\n    }\r\n\r\n    componentDidUpdate(): void {\r\n        if (this.props.childrenDidUpdate) this.props.childrenDidUpdate(this.state.children);\r\n        this.checkDuplicateChildrenName();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.state.children.length;\r\n    }\r\n\r\n    exportSchema(): IChildrenSchemaType {\r\n        if (this.hintTextRef.current?.get(\"error\").length) throw new Error(JSON.stringify(this.hintTextRef.current?.get(\"error\")));\r\n\r\n        return this.state.children.map(child => {\r\n            const c: ISchemaEditorType = child.ref.current as ISchemaEditorType;\r\n            return {\r\n                name: c.getField().name,\r\n                value: c.exportSchema(),\r\n                required: c.getField().required,\r\n            };\r\n        });\r\n    }\r\n\r\n    add(selfId?: string, props?: INewChildEditorProps): void {\r\n        const originChildren = this.state.children;\r\n        let currentIndex;\r\n\r\n        let p: PartialBy<Required<INewChildEditorProps>, \"field\"> = {\r\n            type: DataType.Object,\r\n            isDeleteable: true,\r\n            hasSibling: true,\r\n            isRequiredFieldReadonly: false,\r\n            isNameFieldReadonly: false,\r\n        };\r\n\r\n        if (props) {\r\n            p = {\r\n                ...p,\r\n                ...props,\r\n            };\r\n        }\r\n\r\n        if (selfId === undefined || selfId === \"\") {\r\n            // push to the last one\r\n            currentIndex = originChildren.length + 1;\r\n        } else {\r\n            // Add after a node\r\n            currentIndex = originChildren.findIndex(child => child.selfId === selfId);\r\n        }\r\n\r\n        originChildren.splice(currentIndex + 1, 0, {\r\n            selfId: NextId.next(\"child\").toString(),\r\n\r\n            // hasSibling, isDeletable, isRequiredFieldReadonly, isNameFieldReadonly, field\r\n            ...p,\r\n\r\n            ref: React.createRef<ISchemaEditorType>(),\r\n        });\r\n\r\n        this.setState({ children: originChildren });\r\n    }\r\n\r\n    delete(selfId: string): void {\r\n        const originChildren = this.state.children;\r\n        const currentIndex = originChildren.findIndex(child => child.selfId === selfId);\r\n\r\n        originChildren.splice(currentIndex, 1);\r\n\r\n        this.setState({ children: originChildren });\r\n    }\r\n\r\n    checkDuplicateChildrenName(): void {\r\n        const findDuplicate = this.findNameDuplicate();\r\n\r\n        if (findDuplicate) {\r\n            this.hintTextRef.current?.add(Hint.Error.DUPLICATED_FIELD_NAME);\r\n        } else {\r\n            this.hintTextRef.current?.remove(Hint.Error.DUPLICATED_FIELD_NAME);\r\n        }\r\n    }\r\n\r\n    changeType(selfId: string, type: DataType): void {\r\n        this.setState(prevState => {\r\n            const children = prevState.children.map(child => {\r\n                if (child.selfId === selfId) {\r\n                    return {\r\n                        ...child,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n                        type,\r\n                    };\r\n                } else {\r\n                    return child;\r\n                }\r\n            });\r\n\r\n            return {\r\n                children,\r\n            };\r\n        });\r\n    }\r\n\r\n    findNameDuplicate(): boolean {\r\n        if (this.props.isNameUnique) {\r\n            // Since state may not updated alreday, use schema instead.\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const nameList = this.state.children.map(child => child.ref.current!.schema.getCurrentField().name);\r\n\r\n            return new Set(nameList).size !== nameList.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <HintText ref={this.hintTextRef} />\r\n                {this.state.children.map(child => (\r\n                    <SchemaEditorFactory\r\n                        key={child.selfId}\r\n                        depth={this.props.depth + 1}\r\n                        {...child}\r\n                        delete={this.delete.bind(this, child.selfId)}\r\n                        addSibling={this.add.bind(this, child.selfId)}\r\n                        changeType={this.changeType.bind(this, child.selfId)}\r\n                        changeName={this.checkDuplicateChildrenName.bind(this)}\r\n                    />\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChildrenSchemaEditor;\r\n","import React from \"react\";\r\n\r\nimport Schema from \"../../model/schema/Schema\";\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr, OmitGenericField } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport { ISchemaEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nabstract class SchemaEditor<SchemaType extends ISchemaType, FieldType extends ISchemaEditorField> extends React.Component<\r\n    ISchemaEditorProps<SchemaType>,\r\n    ISchemaEditorState<FieldType>\r\n> {\r\n    protected abstract optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected abstract genericFieldOptions: IGenericFieldOptions;\r\n    public abstract schema: Schema<SchemaType, FieldType>;\r\n\r\n    // may not have options button in the child class\r\n    protected optionModalRef?: React.RefObject<EditorOptionModal>;\r\n\r\n    protected abstract genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    // may not have children in the child class\r\n    protected childrenRef?: React.RefObject<ChildrenSchemaEditor>;\r\n\r\n    abstract exportSchema(): ISchemaType;\r\n\r\n    addChild(): void {\r\n        if (this.childrenRef && this.childrenRef.current) this.childrenRef.current.add();\r\n    }\r\n\r\n    addSibling(): void {\r\n        if (this.props.addSibling) this.props.addSibling();\r\n    }\r\n\r\n    delete(): void {\r\n        if (this.props.delete) this.props.delete();\r\n    }\r\n\r\n    getField(): Required<FieldType> {\r\n        return this.schema.getCurrentField();\r\n    }\r\n\r\n    recordField(fieldName: keyof OmitGenericField<FieldType>, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentField = this.schema.recordField(fieldName, changeEvent);\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    showOptionModal(): void {\r\n        if (this.optionModalRef && this.optionModalRef.current) this.optionModalRef.current.setDisplayOptionModal(true);\r\n    }\r\n\r\n    clearOptionField(): void {\r\n        const currentField = this.schema.clearOptionField();\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    resetOptionField(): void {\r\n        const currentField = this.schema.resetOptionField();\r\n\r\n        this.setState({ currentField });\r\n    }\r\n}\r\n\r\nexport default SchemaEditor;\r\n","import React from \"react\";\r\nimport { Col, Form, InputGroup, Row } from \"react-bootstrap\";\r\n\r\nimport ArraySchema from \"../../model/schema/ArraySchema\";\r\nimport { IArraySchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType, KeysMatching } from \"../../type\";\r\nimport CodeField from \"../node_component/CodeField\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { CodeFieldValue, Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IArrayEditorField, IChildProperty, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass ArraySchemaEditor extends SchemaEditor<IArraySchemaType, IArrayEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: ArraySchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    protected childrenRef: React.RefObject<ChildrenSchemaEditor>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    private childrenLength: number;\r\n\r\n    constructor(props: ISchemaEditorProps<IArraySchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.childrenRef = React.createRef<ChildrenSchemaEditor>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new ArraySchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: true,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.childrenLength = 0;\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (!this.props.schema) this.addChild();\r\n        if (this.state.currentField.maxItems < this.state.currentField.minItems) {\r\n            this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_ITEMS);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IArraySchemaType>, prevState: ISchemaEditorState<IArrayEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.maxItems !== this.state.currentField.maxItems &&\r\n                !(isNaN(prevState.currentField.maxItems) && isNaN(this.state.currentField.maxItems))) ||\r\n            (prevState.currentField.minItems !== this.state.currentField.minItems &&\r\n                !(isNaN(prevState.currentField.minItems) && isNaN(this.state.currentField.minItems)))\r\n        ) {\r\n            if (this.state.currentField.maxItems < this.state.currentField.minItems) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_ITEMS);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_ITEMS);\r\n            }\r\n        }\r\n    }\r\n\r\n    childrenDidUpdate(children: IChildProperty[]): void {\r\n        if (this.childrenLength !== children.length) {\r\n            if (children.length > 1) {\r\n                this.hintTextRef.current?.add(Hint.Info.ARRAY_ITEM_INDEX_MATTER);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Info.ARRAY_ITEM_INDEX_MATTER);\r\n            }\r\n\r\n            this.childrenLength = children.length;\r\n        }\r\n    }\r\n\r\n    addChild(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this.childrenRef.current!.add(\"\", {\r\n            type: DataType.Object,\r\n            isDeleteable: true,\r\n            hasSibling: true,\r\n            isRequiredFieldReadonly: true,\r\n            isNameFieldReadonly: true,\r\n\r\n            field: {\r\n                name: \"items\",\r\n                required: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    exportSchema(): IArraySchemaType {\r\n        return this.schema.exportSchema(\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.childrenRef.current!.exportSchema()\r\n        );\r\n    }\r\n\r\n    recordCode(field: KeysMatching<IArrayEditorField, CodeFieldValue>, value: CodeFieldValue): void {\r\n        const currentField = this.schema.recordCode(field, value);\r\n\r\n        this.setState({ currentField });\r\n\r\n        try {\r\n            if (value.length !== 0) JSON.parse(value);\r\n\r\n            switch (field) {\r\n                case \"const\":\r\n                    this.hintTextRef.current?.remove(Hint.Error.CANT_PARSE_JSON_CONST);\r\n                    break;\r\n                case \"default\":\r\n                    this.hintTextRef.current?.remove(Hint.Error.CANT_PARSE_JSON_DEFAULT);\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            switch (field) {\r\n                case \"const\":\r\n                    this.hintTextRef.current?.add(Hint.Error.CANT_PARSE_JSON_CONST);\r\n                    break;\r\n                case \"default\":\r\n                    this.hintTextRef.current?.add(Hint.Error.CANT_PARSE_JSON_DEFAULT);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MinItems\">\r\n                                                Min Items\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinItems\"\r\n                                                    value={this.state.currentField.minItems}\r\n                                                    onChange={this.recordField.bind(this, \"minItems\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MaxItems\">\r\n                                                Max Items\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxItems\"\r\n                                                    value={this.state.currentField.maxItems}\r\n                                                    onChange={this.recordField.bind(this, \"maxItems\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <InputGroup>\r\n                                                    <CodeField\r\n                                                        title=\"Array constant\"\r\n                                                        value={this.state.currentField.const}\r\n                                                        update={this.recordCode.bind(this, \"const\")}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <InputGroup>\r\n                                                    <CodeField\r\n                                                        title=\"Array default\"\r\n                                                        value={this.state.currentField.default}\r\n                                                        update={this.recordCode.bind(this, \"default\")}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group>\r\n                                            <Form.Check type=\"checkbox\" id=\"uniqueCheckbox\">\r\n                                                <Form.Check.Input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={this.state.currentField.uniqueItems}\r\n                                                    onChange={this.recordField.bind(this, \"uniqueItems\")}\r\n                                                />\r\n                                                <Form.Check.Label>Unique Items</Form.Check.Label>\r\n                                            </Form.Check>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <ChildrenSchemaEditor\r\n                    ref={this.childrenRef}\r\n                    depth={this.props.depth}\r\n                    isNameUnique={false}\r\n                    childrenProperty={this.schema.childrenProperty}\r\n                    childrenDidUpdate={this.childrenDidUpdate.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArraySchemaEditor;\r\n","import { FieldWithoutType, IBooleanEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IBooleanSchemaType, IGenericSchemaType } from \"./type_schema\";\r\n\r\nclass BooleanSchema extends Schema<IBooleanSchemaType, IBooleanEditorField> {\r\n    protected type = DataType.Boolean;\r\n    protected currentField: Required<IBooleanEditorField>;\r\n    protected defaultField: Required<IBooleanEditorField>;\r\n\r\n    constructor(schema?: IBooleanSchemaType, field?: FieldWithoutType<IBooleanEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", undefined, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", undefined, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n    }\r\n\r\n    private isSelectElement(\r\n        event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n    ): event is React.ChangeEvent<HTMLSelectElement> {\r\n        if ((event as React.ChangeEvent<HTMLSelectElement>).target.selectedIndex !== undefined) return true;\r\n        else return false;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public recordField(\r\n        fieldName: keyof IBooleanEditorField,\r\n        changeEvent: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n    ): Required<IBooleanEditorField> {\r\n        if (this.isSelectElement(changeEvent) && (fieldName === \"default\" || fieldName === \"const\")) {\r\n            this.currentField[fieldName] = changeEvent.target.value.toLowerCase() === \"true\" ? true : false;\r\n        } else if (!this.isSelectElement(changeEvent)) {\r\n            Schema.prototype.recordField.call(this, fieldName, changeEvent);\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IBooleanEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IBooleanEditorField> {\r\n        this.currentField.default = (undefined as unknown) as boolean;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IBooleanSchemaType {\r\n        const type = DataType.Boolean;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", (undefined as unknown) as boolean);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", (undefined as unknown) as boolean);\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...defaultValue,\r\n            ...constValue,\r\n        };\r\n    }\r\n}\r\n\r\nexport default BooleanSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport BooleanSchema from \"../../model/schema/BooleanSchema\";\r\nimport { IBooleanSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IBooleanEditorField, ISchemaEditorProps } from \"./type_SchemaEditor\";\r\n\r\nclass BooleanSchemaEditor extends SchemaEditor<IBooleanSchemaType, IBooleanEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: BooleanSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<IBooleanSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new BooleanSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    exportSchema(): IBooleanSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg={4}>\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    custom\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                    value={\r\n                                                        this.state.currentField.default === undefined\r\n                                                            ? \"undefined\"\r\n                                                            : this.state.currentField.default.toString()\r\n                                                    }\r\n                                                >\r\n                                                    <option\r\n                                                        disabled\r\n                                                        hidden\r\n                                                        selected={this.state.currentField.default === undefined ? true : false}\r\n                                                        value=\"undefined\"\r\n                                                    >\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    <option value={\"true\"}>True</option>\r\n                                                    <option value={\"false\"}>False</option>\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg={4}>\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    custom\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                    value={\r\n                                                        this.state.currentField.const === undefined\r\n                                                            ? \"undefined\"\r\n                                                            : this.state.currentField.const.toString()\r\n                                                    }\r\n                                                >\r\n                                                    <option\r\n                                                        disabled\r\n                                                        hidden\r\n                                                        selected={this.state.currentField.const === undefined ? true : false}\r\n                                                        value=\"undefined\"\r\n                                                    >\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    <option value={\"true\"}>True</option>\r\n                                                    <option value={\"false\"}>False</option>\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BooleanSchemaEditor;\r\n","import { FieldWithoutType, IIntegerEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, XOR_Partial } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, IIntegerSchemaType, ISchemaTypeEnummable } from \"./type_schema\";\r\n\r\nclass IntegerSchema extends Schema<IIntegerSchemaType, IIntegerEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.Integer;\r\n    protected currentField: Required<IIntegerEditorField>;\r\n    protected defaultField: Required<IIntegerEditorField>;\r\n\r\n    constructor(schema?: IIntegerSchemaType, field?: FieldWithoutType<IIntegerEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        let min: number, max: number;\r\n        let ex_min: boolean, ex_max: boolean;\r\n\r\n        if (schema) {\r\n            if (schema.minimum) {\r\n                min = schema.minimum;\r\n                ex_min = false;\r\n            } else if (schema.exclusiveMinimum) {\r\n                min = schema.exclusiveMinimum;\r\n                ex_min = true;\r\n            } else {\r\n                min = NaN;\r\n                ex_min = false;\r\n            }\r\n\r\n            if (schema.maximum) {\r\n                max = schema.maximum;\r\n                ex_max = false;\r\n            } else if (schema.exclusiveMaximum) {\r\n                max = schema.exclusiveMaximum;\r\n                ex_max = true;\r\n            } else {\r\n                max = NaN;\r\n                ex_max = false;\r\n            }\r\n        } else {\r\n            min = max = NaN;\r\n            ex_min = ex_max = false;\r\n        }\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", NaN, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", NaN, schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            multipleOf: this.retrieveDefaultOptionValue(\"multipleOf\", NaN, schema),\r\n\r\n            minimum: min,\r\n            maximum: max,\r\n            exclusiveMinimum: ex_min,\r\n            exclusiveMaximum: ex_max,\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(NaN);\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = parseInt(changeEvent.target.value);\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IIntegerEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minimum = this.defaultField.minimum;\r\n        this.currentField.maximum = this.defaultField.maximum;\r\n        this.currentField.exclusiveMinimum = this.defaultField.exclusiveMinimum;\r\n        this.currentField.exclusiveMaximum = this.defaultField.exclusiveMaximum;\r\n        this.currentField.multipleOf = this.defaultField.multipleOf;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IIntegerEditorField> {\r\n        this.currentField.default = NaN;\r\n        this.currentField.const = NaN;\r\n        this.currentField.enum = [];\r\n        this.currentField.minimum = NaN;\r\n        this.currentField.maximum = NaN;\r\n        this.currentField.exclusiveMinimum = false;\r\n        this.currentField.exclusiveMaximum = false;\r\n        this.currentField.multipleOf = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IIntegerSchemaType {\r\n        const type = DataType.Integer;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => !isNaN(e));\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", NaN);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", NaN);\r\n        const multipleOf = this.exportSchemaWithoutUndefined(\"multipleOf\", NaN);\r\n\r\n        let min: XOR_Partial<{ exclusiveMinimum: number }, { minimum: number }> = {};\r\n        let max: XOR_Partial<{ exclusiveMaximum: number }, { maximum: number }> = {};\r\n\r\n        if (!isNaN(this.currentField.minimum)) {\r\n            if (this.currentField.exclusiveMinimum) {\r\n                min = { exclusiveMinimum: this.currentField.minimum };\r\n            } else {\r\n                min = { minimum: this.currentField.minimum };\r\n            }\r\n        }\r\n\r\n        if (!isNaN(this.currentField.maximum)) {\r\n            if (this.currentField.exclusiveMaximum) {\r\n                max = { exclusiveMaximum: this.currentField.maximum };\r\n            } else {\r\n                max = { maximum: this.currentField.maximum };\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...min,\r\n            ...max,\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...multipleOf,\r\n            ...enn,\r\n        };\r\n    }\r\n}\r\n\r\nexport default IntegerSchema;\r\n","import React from \"react\";\r\nimport { Button, Col, Form, FormControl, InputGroup, Row } from \"react-bootstrap\";\r\nimport { FaMinus, FaPlus } from \"react-icons/fa\";\r\n\r\nimport { EmptyState } from \"../type_component\";\r\n\r\ninterface EnumFieldProps<T> {\r\n    type: \"number\" | \"text\";\r\n\r\n    value: T[];\r\n    width: number;\r\n    add(): void;\r\n    update(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void;\r\n    delete(index: number): void;\r\n}\r\n\r\nclass EnumField<T extends string | number> extends React.Component<EnumFieldProps<T>, EmptyState> {\r\n    render(): JSX.Element {\r\n        return (\r\n            <Form.Group>\r\n                {this.props.value.length > 0 ? (\r\n                    this.props.value.map((enumeration, index: number) => (\r\n                        <Form.Group as={Row} key={index}>\r\n                            <Form.Label column lg=\"2\">\r\n                                {index === 0 ? \"Enum\" : \"\"}\r\n                            </Form.Label>\r\n                            <Col lg={this.props.width}>\r\n                                {index === this.props.value.length - 1 ? (\r\n                                    <InputGroup>\r\n                                        <FormControl\r\n                                            type={this.props.type}\r\n                                            id={index.toString()}\r\n                                            onChange={this.props.update.bind(this, index)}\r\n                                            value={enumeration}\r\n                                        />\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-danger\" onClick={this.props.delete.bind(this, index)}>\r\n                                                <FaMinus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-success\" onClick={this.props.add}>\r\n                                                <FaPlus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </InputGroup>\r\n                                ) : (\r\n                                    <InputGroup>\r\n                                        <FormControl\r\n                                            type={this.props.type}\r\n                                            id={index.toString()}\r\n                                            onChange={this.props.update.bind(this, index)}\r\n                                            value={enumeration}\r\n                                        />\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-danger\" onClick={this.props.delete.bind(this, index)}>\r\n                                                <FaMinus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </InputGroup>\r\n                                )}\r\n                            </Col>\r\n                        </Form.Group>\r\n                    ))\r\n                ) : (\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label column lg=\"2\">\r\n                            Enum\r\n                        </Form.Label>\r\n                        <Col lg=\"10\">\r\n                            <Row>\r\n                                <Col lg=\"12\">\r\n                                    <Button variant=\"outline-success\" onClick={this.props.add.bind(this)}>\r\n                                        <FaPlus color=\"green\" />\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Form.Group>\r\n                )}\r\n            </Form.Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnumField;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport IntegerSchema from \"../../model/schema/IntegerSchema\";\r\nimport { IIntegerSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IIntegerEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass IntegerSchemaEditor extends SchemaEditor<IIntegerSchemaType, IIntegerEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: IntegerSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: ISchemaEditorProps<IIntegerSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new IntegerSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minimum > this.state.currentField.maximum) this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_VALUE);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IIntegerSchemaType>, prevState: ISchemaEditorState<IIntegerEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minimum !== this.state.currentField.minimum &&\r\n                !(isNaN(prevState.currentField.minimum) && isNaN(this.state.currentField.minimum))) ||\r\n            (prevState.currentField.maximum !== this.state.currentField.maximum &&\r\n                !(isNaN(prevState.currentField.maximum) && isNaN(this.state.currentField.maximum)))\r\n        ) {\r\n            if (this.state.currentField.maximum < this.state.currentField.minimum) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_VALUE);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_VALUE);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IIntegerSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row} controlId=\"MinValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Min Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.minimum}\r\n                                                    onChange={this.recordField.bind(this, \"minimum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMin\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                                                    checked={this.state.currentField.exclusiveMinimum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"MaxValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Max Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.maximum}\r\n                                                    onChange={this.recordField.bind(this, \"maximum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMax\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMaximum\")}\r\n                                                    checked={this.state.currentField.exclusiveMaximum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                                                Multiple Of\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"MultipleOf\"\r\n                                                    value={this.state.currentField.multipleOf}\r\n                                                    onChange={this.recordField.bind(this, \"multipleOf\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"const\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            width={4}\r\n                                            type=\"number\"\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IntegerSchemaEditor;\r\n","import { FieldWithoutType, INullEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, INullSchemaType } from \"./type_schema\";\r\n\r\nclass NullSchema extends Schema<INullSchemaType, INullEditorField> {\r\n    protected type = DataType.Null;\r\n    protected currentField: Required<INullEditorField>;\r\n    protected defaultField: Required<INullEditorField>;\r\n\r\n    constructor(schema?: INullSchemaType, field?: FieldWithoutType<INullEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = { ...genericField };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<INullEditorField> {\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<INullEditorField> {\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): INullSchemaType {\r\n        const type = DataType.Null;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n        };\r\n    }\r\n}\r\n\r\nexport default NullSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport NullSchema from \"../../model/schema/NullSchema\";\r\nimport { INullSchemaType } from \"../../model/schema/type_schema\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { INullEditorField, ISchemaEditorProps } from \"./type_SchemaEditor\";\r\n\r\nclass NullSchemaEditor extends SchemaEditor<INullSchemaType, INullEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: NullSchema;\r\n\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<INullSchemaType>) {\r\n        super(props);\r\n\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new NullSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: false,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    exportSchema(): INullSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NullSchemaEditor;\r\n","import { FieldWithoutType, INumberEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, XOR_Partial } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, INumberSchemaType, ISchemaTypeEnummable } from \"./type_schema\";\r\n\r\nclass NumberSchema extends Schema<INumberSchemaType, INumberEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.Number;\r\n    protected currentField: Required<INumberEditorField>;\r\n    protected defaultField: Required<INumberEditorField>;\r\n\r\n    constructor(schema?: INumberSchemaType, field?: FieldWithoutType<INumberEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        let min: number, max: number;\r\n        let ex_min: boolean, ex_max: boolean;\r\n\r\n        if (schema) {\r\n            if (schema.minimum) {\r\n                min = schema.minimum;\r\n                ex_min = false;\r\n            } else if (schema.exclusiveMinimum) {\r\n                min = schema.exclusiveMinimum;\r\n                ex_min = true;\r\n            } else {\r\n                min = NaN;\r\n                ex_min = false;\r\n            }\r\n\r\n            if (schema.maximum) {\r\n                max = schema.maximum;\r\n                ex_max = false;\r\n            } else if (schema.exclusiveMaximum) {\r\n                max = schema.exclusiveMaximum;\r\n                ex_max = true;\r\n            } else {\r\n                max = NaN;\r\n                ex_max = false;\r\n            }\r\n        } else {\r\n            min = max = NaN;\r\n            ex_min = ex_max = false;\r\n        }\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", NaN, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", NaN, schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            multipleOf: this.retrieveDefaultOptionValue(\"multipleOf\", NaN, schema),\r\n\r\n            minimum: min,\r\n            maximum: max,\r\n            exclusiveMinimum: ex_min,\r\n            exclusiveMaximum: ex_max,\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public recordField(\r\n        fieldName: keyof INumberEditorField,\r\n        changeEvent: React.ChangeEvent<HTMLInputElement>\r\n    ): Required<INumberEditorField> {\r\n        if (fieldName === \"$comment\" || fieldName === \"description\" || fieldName === \"name\" || fieldName === \"title\") {\r\n            this.currentField[fieldName] = changeEvent.target.value;\r\n        } else if (\r\n            fieldName === \"const\" ||\r\n            fieldName === \"default\" ||\r\n            fieldName === \"maximum\" ||\r\n            fieldName === \"minimum\" ||\r\n            fieldName === \"multipleOf\"\r\n        ) {\r\n            this.currentField[fieldName] = parseFloat(changeEvent.target.value);\r\n        } else if (fieldName === \"exclusiveMaximum\" || fieldName === \"exclusiveMinimum\" || fieldName === \"required\") {\r\n            this.currentField[fieldName] = changeEvent.target.checked;\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(NaN);\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = parseFloat(changeEvent.target.value);\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<INumberEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minimum = this.defaultField.minimum;\r\n        this.currentField.maximum = this.defaultField.maximum;\r\n        this.currentField.exclusiveMinimum = this.defaultField.exclusiveMinimum;\r\n        this.currentField.exclusiveMaximum = this.defaultField.exclusiveMaximum;\r\n        this.currentField.multipleOf = this.defaultField.multipleOf;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<INumberEditorField> {\r\n        this.currentField.default = NaN;\r\n        this.currentField.const = NaN;\r\n        this.currentField.enum = [];\r\n        this.currentField.minimum = NaN;\r\n        this.currentField.maximum = NaN;\r\n        this.currentField.exclusiveMinimum = false;\r\n        this.currentField.exclusiveMaximum = false;\r\n        this.currentField.multipleOf = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): INumberSchemaType {\r\n        const type = DataType.Number;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => !isNaN(e));\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", NaN);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", NaN);\r\n        const multipleOf = this.exportSchemaWithoutUndefined(\"multipleOf\", NaN);\r\n\r\n        let min: XOR_Partial<{ exclusiveMinimum: number }, { minimum: number }> = {};\r\n        let max: XOR_Partial<{ exclusiveMaximum: number }, { maximum: number }> = {};\r\n\r\n        if (!isNaN(this.currentField.minimum)) {\r\n            if (this.currentField.exclusiveMinimum) {\r\n                min = { exclusiveMinimum: this.currentField.minimum };\r\n            } else {\r\n                min = { minimum: this.currentField.minimum };\r\n            }\r\n        }\r\n\r\n        if (!isNaN(this.currentField.maximum)) {\r\n            if (this.currentField.exclusiveMaximum) {\r\n                max = { exclusiveMaximum: this.currentField.maximum };\r\n            } else {\r\n                max = { maximum: this.currentField.maximum };\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...min,\r\n            ...max,\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...multipleOf,\r\n            ...enn,\r\n        };\r\n    }\r\n}\r\n\r\nexport default NumberSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport NumberSchema from \"../../model/schema/NumberSchema\";\r\nimport { INumberSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { INumberEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass NumberSchemaEditor extends SchemaEditor<INumberSchemaType, INumberEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: NumberSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: ISchemaEditorProps<INumberSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new NumberSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minimum > this.state.currentField.maximum) this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_VALUE);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<INumberSchemaType>, prevState: ISchemaEditorState<INumberEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minimum !== this.state.currentField.minimum &&\r\n                !(isNaN(prevState.currentField.minimum) && isNaN(this.state.currentField.minimum))) ||\r\n            (prevState.currentField.maximum !== this.state.currentField.maximum &&\r\n                !(isNaN(prevState.currentField.maximum) && isNaN(this.state.currentField.maximum)))\r\n        ) {\r\n            if (this.state.currentField.maximum < this.state.currentField.minimum) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_VALUE);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_VALUE);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): INumberSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row} controlId=\"MinValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Min Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.minimum}\r\n                                                    onChange={this.recordField.bind(this, \"minimum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMin\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                                                    checked={this.state.currentField.exclusiveMinimum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"MaxValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Max Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.maximum}\r\n                                                    onChange={this.recordField.bind(this, \"maximum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMax\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMaximum\")}\r\n                                                    checked={this.state.currentField.exclusiveMaximum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                                                Multiple Of\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"MultipleOf\"\r\n                                                    value={this.state.currentField.multipleOf}\r\n                                                    onChange={this.recordField.bind(this, \"multipleOf\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"const\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            type=\"number\"\r\n                                            width={4}\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberSchemaEditor;\r\n","import React from \"react\";\r\n\r\nimport { CodeFieldValue } from \"../../component/node_component/type_NodeComponent\";\r\nimport { FieldWithoutType, IChildProperty, IObjectEditorField, ISchemaEditorType } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, KeysMatching } from \"../../type\";\r\nimport { CloneReturnValue, NextId } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IChildrenSchemaType, IObjectSchemaType } from \"./type_schema\";\r\n\r\nclass ObjectSchema extends Schema<IObjectSchemaType, IObjectEditorField> {\r\n    protected type = DataType.Object;\r\n    protected currentField: Required<IObjectEditorField>;\r\n    protected defaultField: Required<IObjectEditorField>;\r\n    public readonly childrenProperty?: IChildProperty[];\r\n\r\n    constructor(schema?: IObjectSchemaType, field?: FieldWithoutType<IObjectEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            const: this.retrieveDefaultOptionValue_code(\"const\", schema),\r\n            default: this.retrieveDefaultOptionValue_code(\"default\", schema),\r\n\r\n            maxProperties: this.retrieveDefaultOptionValue(\"maxProperties\", NaN, schema),\r\n            minProperties: this.retrieveDefaultOptionValue(\"minProperties\", NaN, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n\r\n        if (schema) this.childrenProperty = this.generateChildrenPropertyFromSchema(schema);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    recordCode(field: KeysMatching<IObjectEditorField, CodeFieldValue>, value: CodeFieldValue): Required<IObjectEditorField> {\r\n        this.currentField[field] = value;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    generateChildrenPropertyFromSchema(schema: IObjectSchemaType): IChildProperty[] {\r\n        return Object.keys(schema.properties).map(field => {\r\n            return {\r\n                type: schema.properties[field].type,\r\n                selfId: NextId.next(\"child\").toString(),\r\n\r\n                hasSibling: true,\r\n                isDeleteable: true,\r\n                isRequiredFieldReadonly: false,\r\n                isNameFieldReadonly: false,\r\n\r\n                ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                field: {\r\n                    name: field,\r\n                    required: schema.required.find(r => r === field) === undefined ? false : true,\r\n                },\r\n\r\n                schema: schema.properties[field],\r\n            };\r\n        });\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IObjectEditorField> {\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.default = this.defaultField.default;\r\n\r\n        this.currentField.maxProperties = this.defaultField.maxProperties;\r\n        this.currentField.minProperties = this.defaultField.minProperties;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IObjectEditorField> {\r\n        this.currentField.const = \"\" as CodeFieldValue;\r\n        this.currentField.default = \"\" as CodeFieldValue;\r\n\r\n        this.currentField.maxProperties = NaN;\r\n        this.currentField.minProperties = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(children?: IChildrenSchemaType): IObjectSchemaType {\r\n        const type = DataType.Object;\r\n\r\n        const genericSchema = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const maxProperties = this.exportSchemaWithoutUndefined(\"maxProperties\", NaN);\r\n        const minProperties = this.exportSchemaWithoutUndefined(\"minProperties\", NaN);\r\n\r\n        const constant = this.exportSchemaWithoutUndefined_code(\"const\");\r\n        const defaultValue = this.exportSchemaWithoutUndefined_code(\"default\");\r\n\r\n        const required: IObjectSchemaType[\"required\"] = [];\r\n        const properties: IObjectSchemaType[\"properties\"] = {};\r\n\r\n        if (children) {\r\n            for (const child of children) {\r\n                properties[child.name] = child.value;\r\n\r\n                if (child.required) {\r\n                    required.push(child.name);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...minProperties,\r\n            ...maxProperties,\r\n            required,\r\n            properties,\r\n            ...constant,\r\n            ...defaultValue,\r\n        };\r\n    }\r\n}\r\n\r\nexport default ObjectSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, InputGroup, Row } from \"react-bootstrap\";\r\n\r\nimport ObjectSchema from \"../../model/schema/ObjectSchema\";\r\nimport { IObjectSchemaType } from \"../../model/schema/type_schema\";\r\nimport { KeysMatching } from \"../../type\";\r\nimport CodeField from \"../node_component/CodeField\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { CodeFieldValue, Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IObjectEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass ObjectSchemaEditor extends SchemaEditor<IObjectSchemaType, IObjectEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: ObjectSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    protected childrenRef: React.RefObject<ChildrenSchemaEditor>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: ISchemaEditorProps<IObjectSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.childrenRef = React.createRef<ChildrenSchemaEditor>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new ObjectSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: true,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.maxProperties < this.state.currentField.minProperties) {\r\n            this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_PROPERTIES);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IObjectSchemaType>, prevState: ISchemaEditorState<IObjectEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.maxProperties !== this.state.currentField.maxProperties &&\r\n                !(isNaN(prevState.currentField.maxProperties) && isNaN(this.state.currentField.maxProperties))) ||\r\n            (prevState.currentField.minProperties !== this.state.currentField.minProperties &&\r\n                !(isNaN(prevState.currentField.minProperties) && isNaN(this.state.currentField.minProperties)))\r\n        ) {\r\n            if (this.state.currentField.maxProperties < this.state.currentField.minProperties) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_PROPERTIES);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_PROPERTIES);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IObjectSchemaType {\r\n        return this.schema.exportSchema(\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.childrenRef.current!.exportSchema()\r\n        );\r\n    }\r\n\r\n    recordCode(field: KeysMatching<IObjectEditorField, CodeFieldValue>, value: CodeFieldValue): void {\r\n        const currentField = this.schema.recordCode(field, value);\r\n\r\n        this.setState({ currentField });\r\n\r\n        try {\r\n            if (value.length !== 0) JSON.parse(value);\r\n\r\n            switch (field) {\r\n                case \"const\":\r\n                    this.hintTextRef.current?.remove(Hint.Error.CANT_PARSE_JSON_CONST);\r\n                    break;\r\n                case \"default\":\r\n                    this.hintTextRef.current?.remove(Hint.Error.CANT_PARSE_JSON_DEFAULT);\r\n                    break;\r\n            }\r\n        } catch (error) {\r\n            switch (field) {\r\n                case \"const\":\r\n                    this.hintTextRef.current?.add(Hint.Error.CANT_PARSE_JSON_CONST);\r\n                    break;\r\n                case \"default\":\r\n                    this.hintTextRef.current?.add(Hint.Error.CANT_PARSE_JSON_DEFAULT);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"auto\" htmlFor=\"MinProperties\">\r\n                                                Min Properties\r\n                                            </Form.Label>\r\n                                            <Col>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinProperties\"\r\n                                                    value={this.state.currentField.minProperties}\r\n                                                    onChange={this.recordField.bind(this, \"minProperties\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"auto\" htmlFor=\"MaxProperties\">\r\n                                                Max Properties\r\n                                            </Form.Label>\r\n                                            <Col>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxProperties\"\r\n                                                    value={this.state.currentField.maxProperties}\r\n                                                    onChange={this.recordField.bind(this, \"maxProperties\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <InputGroup>\r\n                                                    <CodeField\r\n                                                        title=\"Object constant\"\r\n                                                        value={this.state.currentField.const}\r\n                                                        update={this.recordCode.bind(this, \"const\")}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <InputGroup>\r\n                                                    <CodeField\r\n                                                        title=\"Object default\"\r\n                                                        value={this.state.currentField.default}\r\n                                                        update={this.recordCode.bind(this, \"default\")}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <ChildrenSchemaEditor\r\n                    ref={this.childrenRef}\r\n                    depth={this.props.depth}\r\n                    isNameUnique={true}\r\n                    childrenProperty={this.schema.childrenProperty}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ObjectSchemaEditor;\r\n","import { FieldWithoutType, IStringEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, ISchemaTypeEnummable, IStringSchemaType } from \"./type_schema\";\r\n\r\nclass StringSchema extends Schema<IStringSchemaType, IStringEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.String;\r\n    protected currentField: Required<IStringEditorField>;\r\n    protected defaultField: Required<IStringEditorField>;\r\n\r\n    constructor(schema?: IStringSchemaType, field?: FieldWithoutType<IStringEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", \"\", schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", \"\", schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            minLength: this.retrieveDefaultOptionValue(\"minLength\", NaN, schema),\r\n            maxLength: this.retrieveDefaultOptionValue(\"maxLength\", NaN, schema),\r\n\r\n            format: this.retrieveDefaultOptionValue(\"format\", \"\" as IStringSchemaType[\"format\"], schema),\r\n            pattern: this.retrieveDefaultOptionValue(\"pattern\", \"\", schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(\"\");\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = changeEvent.target.value;\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IStringEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minLength = this.defaultField.minLength;\r\n        this.currentField.maxLength = this.defaultField.maxLength;\r\n        this.currentField.format = this.defaultField.format;\r\n        this.currentField.pattern = this.defaultField.pattern;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IStringEditorField> {\r\n        this.currentField.default = \"\";\r\n        this.currentField.const = \"\";\r\n        this.currentField.enum = [];\r\n        this.currentField.minLength = NaN;\r\n        this.currentField.maxLength = NaN;\r\n        this.currentField.format = \"\" as Required<IStringEditorField>[\"format\"];\r\n        this.currentField.pattern = \"\";\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IStringSchemaType {\r\n        const type = DataType.String;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => e !== \"\");\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", \"\");\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", \"\");\r\n        const minLength = this.exportSchemaWithoutUndefined(\"minLength\", NaN);\r\n        const maxLength = this.exportSchemaWithoutUndefined(\"maxLength\", NaN);\r\n        const format = this.exportSchemaWithoutUndefined(\"format\", \"\" as Required<IStringEditorField>[\"format\"]);\r\n        const pattern = this.exportSchemaWithoutUndefined(\"pattern\", \"\");\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...minLength,\r\n            ...maxLength,\r\n            ...enn,\r\n\r\n            ...format,\r\n            ...pattern,\r\n        };\r\n    }\r\n}\r\n\r\nexport default StringSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport StringSchema from \"../../model/schema/StringSchema\";\r\nimport { IStringSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { ISchemaEditorProps, ISchemaEditorState, IStringEditorField } from \"./type_SchemaEditor\";\r\n\r\nclass StringSchemaEditor extends SchemaEditor<IStringSchemaType, IStringEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: StringSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: ISchemaEditorProps<IStringSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new StringSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minLength > this.state.currentField.maxLength)\r\n            this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_LENGTH);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IStringSchemaType>, prevState: ISchemaEditorState<IStringEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minLength !== this.state.currentField.minLength &&\r\n                !(isNaN(prevState.currentField.minLength) && isNaN(this.state.currentField.minLength))) ||\r\n            (prevState.currentField.maxLength !== this.state.currentField.maxLength &&\r\n                !(isNaN(prevState.currentField.maxLength) && isNaN(this.state.currentField.maxLength)))\r\n        ) {\r\n            if (this.state.currentField.minLength > this.state.currentField.maxLength) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_LENGTH);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_LENGTH);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IStringSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                                                Min Length\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinLength\"\r\n                                                    value={this.state.currentField.minLength}\r\n                                                    onChange={this.recordField.bind(this, \"minLength\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MaxLength\">\r\n                                                Max Length\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxLength\"\r\n                                                    value={this.state.currentField.maxLength}\r\n                                                    onChange={this.recordField.bind(this, \"maxLength\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"Format\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Format\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    value={this.state.currentField.format}\r\n                                                    onChange={this.recordField.bind(this, \"format\")}\r\n                                                >\r\n                                                    <option disabled hidden value=\"\">\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    {[\r\n                                                        \"date-time\",\r\n                                                        \"time\",\r\n                                                        \"date\",\r\n                                                        \"email\",\r\n                                                        \"idn-email\",\r\n                                                        \"hostname\",\r\n                                                        \"idn-hostname\",\r\n                                                        \"ipv4\",\r\n                                                        \"ipv6\",\r\n                                                        \"uri\",\r\n                                                        \"uri-reference\",\r\n                                                        \"iri\",\r\n                                                        \"iri-reference\",\r\n                                                        \"uri-template\",\r\n                                                        \"json-pointer\",\r\n                                                        \"relative-json-pointer\",\r\n                                                        \"regex\",\r\n                                                    ].map((v, i) => (\r\n                                                        <option key={i} value={v}>\r\n                                                            {v}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"Pattern\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Pattern\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Regular Expression\"\r\n                                                    value={this.state.currentField.pattern}\r\n                                                    onChange={this.recordField.bind(this, \"pattern\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"const\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            type=\"text\"\r\n                                            width={10}\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StringSchemaEditor;\r\n","/* eslint-disable */\r\n// I think there is some bugs  in either eslint or react to use forwardref\r\nimport React from \"react\";\r\n\r\nimport {\r\n    IArraySchemaType,\r\n    IBooleanSchemaType,\r\n    IIntegerSchemaType,\r\n    INullSchemaType,\r\n    INumberSchemaType,\r\n    IObjectSchemaType,\r\n    ISchemaType,\r\n    IStringSchemaType,\r\n} from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport { IGenericField } from \"../node_component/type_NodeComponent\";\r\nimport ArraySchemaEditor from \"./ArraySchemaEditor\";\r\nimport BooleanSchemaEditor from \"./BooleanSchemaEditor\";\r\nimport IntegerSchemaEditor from \"./IntegerSchemaEditor\";\r\nimport NullSchemaEditor from \"./NullSchemaEditor\";\r\nimport NumberSchemaEditor from \"./NumberSchemaEditor\";\r\nimport ObjectSchemaEditor from \"./ObjectSchemaEditor\";\r\nimport StringSchemaEditor from \"./StringSchemaEditor\";\r\nimport { ISchemaEditorProps, ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ntype FactoryProps = Omit<ISchemaEditorProps<ISchemaType>, \"field\"> & {\r\n    type: DataType;\r\n    field?: Omit<IGenericField, \"type\">;\r\n};\r\n\r\nconst SchemaEditorFactory = React.forwardRef<ISchemaEditorType, FactoryProps>((props, ref) => {\r\n    switch (props.type) {\r\n        case DataType.Array:\r\n            return (\r\n                <ArraySchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IArraySchemaType }}\r\n                    ref={ref as React.RefObject<ArraySchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Boolean:\r\n            return (\r\n                <BooleanSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IBooleanSchemaType }}\r\n                    ref={ref as React.RefObject<BooleanSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Integer:\r\n            return (\r\n                <IntegerSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IIntegerSchemaType }}\r\n                    ref={ref as React.RefObject<IntegerSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Number:\r\n            return (\r\n                <NumberSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as INumberSchemaType }}\r\n                    ref={ref as React.RefObject<NumberSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Null:\r\n            return (\r\n                <NullSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as INullSchemaType }}\r\n                    ref={ref as React.RefObject<NullSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Object:\r\n            return (\r\n                <ObjectSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IObjectSchemaType }}\r\n                    ref={ref as React.RefObject<ObjectSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.String:\r\n            return (\r\n                <StringSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IStringSchemaType }}\r\n                    ref={ref as React.RefObject<StringSchemaEditor>}\r\n                />\r\n            );\r\n    }\r\n});\r\n\r\n// make eslint happy\r\nSchemaEditorFactory.displayName = \"SchemaEditorFactory\";\r\n\r\nexport default SchemaEditorFactory;\r\n","import React from \"react\";\r\n\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport SchemaEditorFactory from \"./SchemaEditorFactory\";\r\nimport { ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ninterface RootSchemaEditorProps {\r\n    schema?: ISchemaType;\r\n}\r\n\r\nclass RootSchemaEditor extends React.Component<RootSchemaEditorProps, { type: DataType }> {\r\n    private editorRef: React.RefObject<ISchemaEditorType>;\r\n\r\n    constructor(props: RootSchemaEditorProps) {\r\n        super(props);\r\n\r\n        this.editorRef = React.createRef<ISchemaEditorType>();\r\n\r\n        if (props.schema) {\r\n            this.state = { type: props.schema.type };\r\n        } else {\r\n            this.state = { type: DataType.Object };\r\n        }\r\n    }\r\n\r\n    changeType(type: DataType): void {\r\n        this.setState({ type });\r\n    }\r\n\r\n    changeName(): void {\r\n        console.log(`[Root Node] Change Name!!`);\r\n    }\r\n\r\n    exportSchema(): ISchemaType {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        return this.editorRef.current!.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <SchemaEditorFactory\r\n                ref={this.editorRef}\r\n                type={this.state.type}\r\n                schema={this.props.schema}\r\n                depth={0}\r\n                field={{ name: \"root\", required: true }}\r\n                hasSibling={false}\r\n                isDeleteable={false}\r\n                isRequiredFieldReadonly={true}\r\n                isNameFieldReadonly={true}\r\n                changeType={this.changeType.bind(this)}\r\n                changeName={this.changeName.bind(this)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default RootSchemaEditor;\r\n","import Ajv from \"ajv\";\r\nimport draft_04_meta from \"ajv/lib/refs/json-schema-draft-04.json\";\r\nimport draft_06_meta from \"ajv/lib/refs/json-schema-draft-06.json\";\r\nimport React from \"react\";\r\nimport { Button, Toast } from \"react-bootstrap\";\r\n\r\nimport { ISchemaType } from \"../model/schema/type_schema\";\r\nimport { NextId } from \"../model/utility\";\r\nimport RootSchemaEditor from \"./schema_editor/RootSchemaEditor\";\r\nimport { EmptyProps } from \"./type_component\";\r\n\r\ninterface IEditorState {\r\n    error?: string;\r\n    schema?: ISchemaType;\r\n}\r\n\r\nclass Editor extends React.Component<EmptyProps, IEditorState> {\r\n    private fileUploadRef: React.RefObject<HTMLInputElement>;\r\n    private editorRef: React.RefObject<RootSchemaEditor>;\r\n    private rootSchemaEditorKey: string;\r\n\r\n    constructor(props: EmptyProps) {\r\n        super(props);\r\n\r\n        this.fileUploadRef = React.createRef<HTMLInputElement>();\r\n        this.editorRef = React.createRef<RootSchemaEditor>();\r\n\r\n        this.rootSchemaEditorKey = NextId.next(\"key\").toString();\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    toggleImport(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this.fileUploadRef.current!.click();\r\n    }\r\n\r\n    async import(event: React.ChangeEvent<HTMLInputElement>): Promise<void> {\r\n        if (event.target.files) {\r\n            try {\r\n                const text = await event.target.files[0].text();\r\n                const schema = JSON.parse(text);\r\n\r\n                const validator = new Ajv({ schemaId: \"auto\" });\r\n                validator.addMetaSchema(draft_04_meta);\r\n                validator.addMetaSchema(draft_06_meta);\r\n\r\n                const result = validator.validateSchema(schema);\r\n\r\n                if (!result) {\r\n                    this.setState({\r\n                        error: \"Parsing Schema Error! We only support draft-04/06/07\",\r\n                    });\r\n                } else {\r\n                    this.rootSchemaEditorKey = NextId.next(\"key\").toString();\r\n                    this.setState({ schema });\r\n                }\r\n            } catch (error) {\r\n                this.setState({\r\n                    error: \"Parsing Schema Error! Please check your schema.\",\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    export(): void {\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const schema = this.editorRef.current!.exportSchema();\r\n\r\n            const fileBlob = new Blob([JSON.stringify(schema, null, 4)], { type: \"application/schema+json\" });\r\n            const blobURL = window.URL.createObjectURL(fileBlob);\r\n\r\n            const anchorElement = document.createElement(\"a\");\r\n            anchorElement.href = blobURL;\r\n            anchorElement.setAttribute(\"download\", \"Schema.json\");\r\n            document.body.appendChild(anchorElement);\r\n            anchorElement.click();\r\n\r\n            document.body.removeChild(anchorElement);\r\n        } catch (e) {\r\n            this.setState({ error: `Find Error: ${e.message} Please check and export again.` });\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-3 mx-4 \">\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"file-uploader\"\r\n                    data-target=\"file-uploader\"\r\n                    hidden\r\n                    ref={this.fileUploadRef}\r\n                    onChange={this.import.bind(this)}\r\n                />\r\n                <Button variant=\"outline-primary\" onClick={this.toggleImport.bind(this)}>\r\n                    Import from file\r\n                </Button>{\" \"}\r\n                <Button variant=\"outline-success\" onClick={this.export.bind(this)}>\r\n                    Export Schema\r\n                </Button>\r\n                <RootSchemaEditor ref={this.editorRef} key={this.rootSchemaEditorKey} schema={this.state.schema} />\r\n                {this.state.error && (\r\n                    <Toast\r\n                        show={this.state.error ? true : false}\r\n                        onClose={(): void => {\r\n                            this.setState({ error: undefined });\r\n                        }}\r\n                        delay={3000}\r\n                        autohide\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            bottom: \"20px\",\r\n                            right: \"20px\",\r\n                            borderColor: \"red\",\r\n                            color: \"red\",\r\n                        }}\r\n                    >\r\n                        <Toast.Header style={{ borderColor: \"red\", color: \"red\" }}>\r\n                            <strong className=\"mr-auto\">Error</strong>\r\n                        </Toast.Header>\r\n                        <Toast.Body>{this.state.error}</Toast.Body>\r\n                    </Toast>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nimport Editor from \"./Editor\";\r\n\r\nclass App extends React.Component {\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\">JSON Schema Editor</Navbar.Brand>\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text>\r\n                            <a href=\"https://github.com/JingWangTW/json-schema-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <img height=\"30px\" src=\"https://github.com/fluidicon.png\" alt=\"Github ICON\" />\r\n                            </a>\r\n                        </Navbar.Text>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n                <Editor />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import \"./index.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./component/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}