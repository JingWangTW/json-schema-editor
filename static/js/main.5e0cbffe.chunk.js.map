{"version":3,"sources":["type.ts","model/utility.ts","model/Hint.ts","model/schema/Schema.ts","model/schema/ArraySchema.ts","component/node_component/CodeField.tsx","component/node_component/EditorOptionModal.tsx","component/node_component/GenericField.tsx","component/node_component/HintText.tsx","component/node_component/OptionsButtons.tsx","component/node_component/SpaceFront.tsx","component/schema_editor/ChildrenSchemaEditor.tsx","component/schema_editor/SchemaEditor.tsx","component/schema_editor/ArraySchemaEditor.tsx","model/schema/BooleanSchema.ts","component/schema_editor/BooleanSchemaEditor.tsx","model/schema/IntegerSchema.ts","component/node_component/EnumField.tsx","component/schema_editor/IntegerSchemaEditor.tsx","model/schema/NullSchema.ts","component/schema_editor/NullSchemaEditor.tsx","model/schema/NumberSchema.ts","component/schema_editor/NumberSchemaEditor.tsx","model/schema/ObjectSchema.ts","component/schema_editor/ObjectSchemaEditor.tsx","model/schema/StringSchema.ts","component/schema_editor/StringSchemaEditor.tsx","component/schema_editor/SchemaEditorFactory.tsx","component/schema_editor/RootSchemaEditor.tsx","component/Editor.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["DataType","NextId","name","mappedKeyId","arrayEquals","a","b","length","every","c","includes","getOrDefault","optionalValue","defaultValue","undefined","CloneReturnValue","target","key","descriptor","original","value","args","ret","apply","this","Object","Error","Warn","Info","Hint","hint","error","Set","info","warn","text","isWarnText","add","isInfoText","isErrorText","delete","Array","from","size","values","Schema","type","currentField","defaultField","fieldName","changeEvent","toString","checked","parseInt","field","schema","title","description","$comment","f","required","next","emptyValue","temp","isNaN","ArraySchema","childrenProperty","genericField","getGenericFieldFromSchema","const","JSON","stringify","minItems","retrieveDefaultOptionValue","NaN","maxItems","uniqueItems","generateChildrenPropertyFromSchema","items","map","s","selfId","hasSibling","isDeleteable","isRequiredFieldReadonly","isNameFieldReadonly","ref","React","createRef","children","genericSchema","getGenericSchemaFromField","exportSchemaWithoutUndefined","constant","parse","replace","child","require","CodeField","props","state","isShowModal","setState","FormControl","onChange","e","update","InputGroup","Append","Button","variant","onClick","setDisplayCodeModal","bind","Modal","onHide","show","aria-labelledby","centered","Header","closeButton","Title","id","Body","Form","Group","placeholder","width","mode","theme","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Component","EditorOptionModal","isOptionModalShow","setDisplayOptionModal","Footer","clearOptionFieldForm","resetOptionFiledForm","GenericField","schemaType","getDefaultField","options","isDescriptionModalShow","isCommentFieldShow","recordField","preventDefault","newType","changeType","changeName","Accordion","Row","Col","lg","OverlayTrigger","trigger","overlay","Tooltip","Prepend","Checkbox","disabled","Control","readOnly","as","custom","String","Integer","Number","Null","Boolean","setDisplayDescriptionModal","rows","style","paddingTop","Collapse","eventKey","cursor","Toggle","className","color","HintText","r","all_hint","getAll","push","h","renderHint","ToggleAddButton","forwardRef","displayName","NodeOptionsButtons","buttonOptions","hasChild","addChild","addSibling","addHtmlDropId","addToolTipId","Dropdown","Menu","Item","href","isOptionExist","showOptionModal","SpaceFront","depth","ChildrenSchemaEditor","childrenDidUpdate","checkDuplicateChildrenName","getError","current","getField","exportSchema","currentIndex","originChildren","p","findIndex","splice","findNameDuplicate","addHint","HintTextType","DUPLICATED_FIELD_NAME","removeHint","prevState","isNameUnique","nameList","getCurrentField","originAllHint","change","getWarn","getInfo","remove","SchemaEditor","optionsButtonsAttr","genericFieldOptions","optionModalRef","genericFieldRef","childrenRef","clearOptionField","resetOptionField","ArraySchemaEditor","childrenLength","MIN_GT_MAX_ITEMS","prevProps","ARRAY_ITEM_INDEX_MATTER","recordCode","CANT_PARSE_JSON_CONST","OptionsButtons","Label","column","htmlFor","min","Check","Input","BooleanSchema","default","event","selectedIndex","isSelectElement","prototype","call","toLowerCase","constValue","BooleanSchemaEditor","hidden","selected","IntegerSchema","max","ex_min","ex_max","minimum","exclusiveMinimum","maximum","exclusiveMaximum","enum","multipleOf","index","enumeration","filter","enn","EnumField","IntegerSchemaEditor","MIN_GT_MAX_VALUE","addEnum","deleteEnum","updateEnum","controlId","inline","label","height","NullSchema","NullSchemaEditor","NumberSchema","parseFloat","NumberSchemaEditor","ObjectSchema","maxProperties","minProperties","keys","properties","find","ObjectSchemaEditor","MIN_GT_MAX_PROPERTIES","StringSchema","minLength","maxLength","format","pattern","StringSchemaEditor","MIN_GT_MAX_LENGTH","v","i","SchemaEditorFactory","RootSchemaEditor","editorRef","console","log","Editor","fileUploadRef","rootSchemaEditorKey","click","files","validator","Ajv","schemaId","addMetaSchema","draft_04_meta","draft_06_meta","validateSchema","fileBlob","Blob","blobURL","window","URL","createObjectURL","anchorElement","document","createElement","setAttribute","body","appendChild","removeChild","message","data-target","import","toggleImport","export","Toast","onClose","delay","autohide","position","bottom","right","borderColor","App","Navbar","collapseOnSelect","expand","bg","Brand","Text","rel","src","alt","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5e0cbffe.chunk.js","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\r\nexport type XOR_Partial<T, U> = (Without<T, U> & Partial<U>) | (Without<U, T> & Partial<T>);\r\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\r\nexport type IntersectionKey<T, U> = Extract<keyof T, keyof U>;\r\n\r\nexport enum DataType {\r\n    Array = \"array\",\r\n    Boolean = \"boolean\",\r\n    Integer = \"integer\",\r\n    Number = \"number\",\r\n    Object = \"object\",\r\n    String = \"string\",\r\n    Null = \"null\",\r\n}\r\n","class NextId {\r\n    private static mappedKeyId: { [key: string]: number } = {};\r\n\r\n    public static next(name = \"global\"): number {\r\n        if (!(name in NextId.mappedKeyId)) {\r\n            NextId.mappedKeyId[name] = 0;\r\n        }\r\n\r\n        NextId.mappedKeyId[name]++;\r\n\r\n        return NextId.mappedKeyId[name];\r\n    }\r\n}\r\n\r\nfunction arrayEquals<T>(a: T[], b: T[]): boolean {\r\n    if (a === b) return true;\r\n    if (a.length !== b.length) return false;\r\n    return a.every(c => b.includes(c));\r\n}\r\n\r\nfunction getOrDefault<T>(optionalValue: T | undefined, defaultValue: T): T {\r\n    if (optionalValue === undefined) return defaultValue;\r\n    else return optionalValue;\r\n}\r\n\r\nfunction CloneReturnValue(target: unknown, key: string | symbol, descriptor: PropertyDescriptor): PropertyDescriptor {\r\n    const original = descriptor.value;\r\n\r\n    descriptor.value = function (...args: unknown[]): unknown {\r\n        const ret = original.apply(this, args);\r\n        if (ret && ret instanceof Object) return { ...ret };\r\n        else return ret;\r\n    };\r\n\r\n    return descriptor;\r\n}\r\n\r\nexport { NextId, getOrDefault, CloneReturnValue, arrayEquals };\r\n","export enum Error {\r\n    DUPLICATED_FIELD_NAME = \"Find duplicated field name\",\r\n    CANT_PARSE_JSON_CONST = \"Invalid JSON in const field\",\r\n}\r\n\r\nexport enum Warn {\r\n    MIN_GT_MAX_ITEMS = \"Min Items > Max Items\",\r\n    MIN_GT_MAX_VALUE = \"Min Value > Max Value\",\r\n    MIN_GT_MAX_PROPERTIES = \"Min Properties > Max Properties\",\r\n    MIN_GT_MAX_LENGTH = \"Min Length > Max Length\",\r\n}\r\n\r\nexport enum Info {\r\n    ARRAY_ITEM_INDEX_MATTER = \"Ordinal index of each item under Array type is meaningful\",\r\n}\r\n\r\nclass Hint {\r\n    private hint: {\r\n        error: Set<Error>;\r\n        info: Set<Info>;\r\n        warn: Set<Warn>;\r\n    };\r\n\r\n    constructor() {\r\n        this.hint = {\r\n            error: new Set<Error>(),\r\n            info: new Set<Info>(),\r\n            warn: new Set<Warn>(),\r\n        };\r\n    }\r\n\r\n    static isWarnText(text: string): text is Warn {\r\n        return Object.values(Warn).includes(text as Warn);\r\n    }\r\n\r\n    static isInfoText(text: string): text is Info {\r\n        return Object.values(Info).includes(text as Info);\r\n    }\r\n\r\n    static isErrorText(text: string): text is Error {\r\n        return Object.values(Error).includes(text as Error);\r\n    }\r\n\r\n    add(text: Error | Warn | Info): void {\r\n        if (Hint.isWarnText(text)) {\r\n            this.hint.warn.add(text as Warn);\r\n        } else if (Hint.isInfoText(text)) {\r\n            this.hint.info.add(text as Info);\r\n        } else if (Hint.isErrorText(text)) {\r\n            this.hint.error.add(text as Error);\r\n        }\r\n    }\r\n\r\n    remove(text: Error | Warn | Info): void {\r\n        if (Hint.isWarnText(text)) {\r\n            this.hint.warn.delete(text as Warn);\r\n        } else if (Hint.isInfoText(text)) {\r\n            this.hint.info.delete(text as Info);\r\n        } else if (Hint.isErrorText(text)) {\r\n            this.hint.error.delete(text as Error);\r\n        }\r\n    }\r\n\r\n    getError(): Error[] {\r\n        return Array.from(this.hint.error);\r\n    }\r\n\r\n    getWarn(): Warn[] {\r\n        return Array.from(this.hint.warn);\r\n    }\r\n\r\n    getInfo(): Info[] {\r\n        return Array.from(this.hint.info);\r\n    }\r\n\r\n    getAll(): { error?: Error[]; warn?: Warn[]; info?: Info[] } {\r\n        return {\r\n            error: this.hint.error.size > 0 ? Array.from(this.hint.error) : undefined,\r\n            warn: this.hint.warn.size > 0 ? Array.from(this.hint.warn) : undefined,\r\n            info: this.hint.info.size > 0 ? Array.from(this.hint.info) : undefined,\r\n        };\r\n    }\r\n}\r\n\r\nexport default Hint;\r\n","import { IGenericField } from \"../../component/node_component/type_NodeComponent\";\r\nimport { FieldWithoutType, ISchemaEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue, NextId, getOrDefault } from \"../utility\";\r\nimport { IGenericSchemaType, ISchemaType } from \"./type_schema\";\r\n\r\nabstract class Schema<SchemaType extends ISchemaType, FieldType extends ISchemaEditorField> {\r\n    protected abstract type: DataType;\r\n    protected abstract currentField: Required<FieldType>;\r\n    protected abstract defaultField: Required<FieldType>;\r\n\r\n    abstract resetOptionField(): Required<FieldType>;\r\n    abstract clearOptionField(): Required<FieldType>;\r\n    abstract exportSchema(): SchemaType;\r\n\r\n    @CloneReturnValue\r\n    public recordField(fieldName: keyof FieldType, changeEvent: React.ChangeEvent<HTMLInputElement>): Required<FieldType> {\r\n        switch (typeof this.currentField[fieldName]) {\r\n            case \"string\":\r\n                this.currentField[fieldName] = (changeEvent.target.value.toString() as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n            case \"boolean\":\r\n                this.currentField[fieldName] = (changeEvent.target.checked as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n            case \"number\":\r\n                this.currentField[fieldName] = (parseInt(changeEvent.target.value) as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public getDefaultField(): Required<FieldType> {\r\n        return this.defaultField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public getCurrentField(): Required<FieldType> {\r\n        return this.currentField;\r\n    }\r\n\r\n    protected getGenericSchemaFromField(field: IGenericField): IGenericSchemaType {\r\n        const schema: IGenericSchemaType = {};\r\n\r\n        if (field.title && field.title !== \"\") schema.title = field.title;\r\n        if (field.description && field.description !== \"\") schema.description = field.description;\r\n        if (field.$comment && field.$comment !== \"\") schema.$comment = field.$comment;\r\n\r\n        return schema;\r\n    }\r\n\r\n    protected getGenericFieldFromSchema(schema?: IGenericSchemaType, field?: FieldWithoutType<IGenericField>): Required<IGenericField> {\r\n        let f: IGenericField;\r\n\r\n        if (schema === undefined) schema = {};\r\n        if (field === undefined) {\r\n            f = {\r\n                type: this.type,\r\n                required: true,\r\n                name: `Field_${NextId.next(\"Field\")}`,\r\n            };\r\n        } else {\r\n            f = { type: this.type, ...field };\r\n        }\r\n\r\n        return {\r\n            type: this.type,\r\n            required: f.required,\r\n            name: f.name,\r\n\r\n            title: getOrDefault(schema.title, getOrDefault(f.title, \"\")),\r\n            description: getOrDefault(schema.description, getOrDefault(f.description, \"\")),\r\n            $comment: getOrDefault(schema.$comment, getOrDefault(f.$comment, \"\")),\r\n        };\r\n    }\r\n\r\n    protected retrieveDefaultOptionValue<T extends keyof SchemaType>(\r\n        key: T,\r\n        defaultValue: SchemaType[T],\r\n        schema?: SchemaType\r\n    ): Required<SchemaType>[T] {\r\n        if (schema && key in schema && schema[key] !== undefined) {\r\n            return schema[key];\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    protected exportSchemaWithoutUndefined<K extends keyof (SchemaType | FieldType)>(\r\n        key: K,\r\n        emptyValue: Required<FieldType>[K]\r\n    ): Partial<Record<K, FieldType[K]>> {\r\n        const temp: Partial<Record<K, FieldType[K]>> = {};\r\n\r\n        // NaN === Nan get false\r\n        if (typeof emptyValue === \"number\" && isNaN(emptyValue)) {\r\n            if (!isNaN((this.currentField[key] as unknown) as number)) {\r\n                temp[key] = this.currentField[key];\r\n            }\r\n        } else {\r\n            if (this.currentField[key] !== emptyValue) {\r\n                temp[key] = this.currentField[key];\r\n            }\r\n        }\r\n\r\n        return temp;\r\n    }\r\n}\r\n\r\nexport default Schema;\r\n","import React from \"react\";\r\n\r\nimport { FieldWithoutType, IArrayEditorField, IChildProperty, ISchemaEditorType } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue, NextId } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IArraySchemaType, IChildrenSchemaType, IGenericSchemaType } from \"./type_schema\";\r\n\r\nclass ArraySchema extends Schema<IArraySchemaType, IArrayEditorField> {\r\n    protected type = DataType.Array;\r\n    protected currentField: Required<IArrayEditorField>;\r\n    protected defaultField: Required<IArrayEditorField>;\r\n    public readonly childrenProperty?: IChildProperty[];\r\n\r\n    constructor(schema?: IArraySchemaType, field?: FieldWithoutType<IArrayEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            const: schema && schema.const ? JSON.stringify(schema.const, null, 4) : \"[]\",\r\n\r\n            minItems: this.retrieveDefaultOptionValue(\"minItems\", NaN, schema),\r\n            maxItems: this.retrieveDefaultOptionValue(\"maxItems\", NaN, schema),\r\n            uniqueItems: this.retrieveDefaultOptionValue(\"uniqueItems\", false, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n\r\n        if (schema) this.childrenProperty = this.generateChildrenPropertyFromSchema(schema);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    recordCode(field: \"const\", value: string): Required<IArrayEditorField> {\r\n        this.currentField.const = value;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    generateChildrenPropertyFromSchema(schema: IArraySchemaType): IChildProperty[] {\r\n        if (schema.items) {\r\n            if (schema.items instanceof Array) {\r\n                return schema.items.map(s => {\r\n                    return {\r\n                        type: s.type,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n\r\n                        hasSibling: true,\r\n                        isDeleteable: true,\r\n                        isRequiredFieldReadonly: true,\r\n                        isNameFieldReadonly: true,\r\n\r\n                        ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                        field: {\r\n                            name: \"items\",\r\n                            required: true,\r\n                        },\r\n\r\n                        schema: s,\r\n                    };\r\n                });\r\n            } else {\r\n                return [\r\n                    {\r\n                        type: schema.type,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n\r\n                        hasSibling: true,\r\n                        isDeleteable: true,\r\n                        isRequiredFieldReadonly: true,\r\n                        isNameFieldReadonly: true,\r\n\r\n                        ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                        field: {\r\n                            name: \"items\",\r\n                            required: true,\r\n                        },\r\n\r\n                        schema: schema.items,\r\n                    },\r\n                ];\r\n            }\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IArrayEditorField> {\r\n        this.currentField.const = this.defaultField.const;\r\n\r\n        this.currentField.maxItems = this.defaultField.maxItems;\r\n        this.currentField.minItems = this.defaultField.minItems;\r\n        this.currentField.uniqueItems = this.defaultField.uniqueItems;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IArrayEditorField> {\r\n        this.currentField.const = \"[]\";\r\n\r\n        this.currentField.maxItems = NaN;\r\n        this.currentField.minItems = NaN;\r\n        this.currentField.uniqueItems = false;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(children?: IChildrenSchemaType): IArraySchemaType {\r\n        const type = DataType.Array;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const { uniqueItems } = this.currentField;\r\n\r\n        const minItems = this.exportSchemaWithoutUndefined(\"minItems\", NaN);\r\n        const maxItems = this.exportSchemaWithoutUndefined(\"maxItems\", NaN);\r\n\r\n        const constant: { const?: [] } = {};\r\n\r\n        constant.const = JSON.parse(this.currentField.const.replace(/\\s/g, \"\")) as [];\r\n\r\n        let items: IArraySchemaType[\"items\"];\r\n\r\n        if (children) {\r\n            if (children.length === 1) {\r\n                items = children[0].value;\r\n            } else if (children.length > 1) {\r\n                items = children.map(child => child.value);\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...minItems,\r\n            ...maxItems,\r\n            uniqueItems,\r\n            items,\r\n            ...constant,\r\n        };\r\n    }\r\n}\r\n\r\nexport default ArraySchema;\r\n","import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport { Button, Form, FormControl, InputGroup, Modal } from \"react-bootstrap\";\r\nimport { TiPencil } from \"react-icons/ti\";\r\n\r\nrequire(\"ace-builds/src-noconflict/mode-json\");\r\nrequire(\"ace-builds/src-noconflict/theme-terminal\");\r\n\r\ninterface CodeFieldProps {\r\n    title: string;\r\n\r\n    value: string;\r\n    update(value: string): void;\r\n}\r\n\r\ninterface CodeFieldState {\r\n    isShowModal: boolean;\r\n}\r\n\r\nclass CodeField extends React.Component<CodeFieldProps, CodeFieldState> {\r\n    constructor(props: CodeFieldProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isShowModal: false,\r\n        };\r\n    }\r\n\r\n    setDisplayCodeModal(isShowModal: boolean): void {\r\n        this.setState({ isShowModal });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <FormControl\r\n                    type=\"text\"\r\n                    onChange={(e): void => {\r\n                        this.props.update(e.target.value);\r\n                    }}\r\n                    value={this.props.value}\r\n                />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"outline-primary\" onClick={this.setDisplayCodeModal.bind(this, true)}>\r\n                        <TiPencil />\r\n                    </Button>\r\n                </InputGroup.Append>\r\n                <Modal\r\n                    onHide={this.setDisplayCodeModal.bind(this, false)}\r\n                    show={this.state.isShowModal}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"code-modal\"\r\n                    centered\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title id=\"code-modal\">{this.props.title}</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form.Group>\r\n                            <AceEditor\r\n                                placeholder=\"Placeholder Text\"\r\n                                width=\"100%\"\r\n                                mode=\"json\"\r\n                                theme=\"terminal\"\r\n                                name=\"Code\"\r\n                                onChange={this.props.update}\r\n                                fontSize={14}\r\n                                showPrintMargin={true}\r\n                                showGutter={true}\r\n                                highlightActiveLine={true}\r\n                                value={this.props.value}\r\n                                setOptions={{\r\n                                    enableBasicAutocompletion: false,\r\n                                    enableLiveAutocompletion: false,\r\n                                    enableSnippets: false,\r\n                                    showLineNumbers: true,\r\n                                    tabSize: 4,\r\n                                }}\r\n                            />\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodeField;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\ninterface EditorOptionModalProps {\r\n    clearOptionFieldForm(): void;\r\n    resetOptionFiledForm(): void;\r\n}\r\n\r\ninterface EditorOptionModalState {\r\n    isOptionModalShow: boolean;\r\n}\r\n\r\nclass EditorOptionModal extends React.Component<PropsWithChildren<EditorOptionModalProps>, EditorOptionModalState> {\r\n    constructor(props: EditorOptionModalProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOptionModalShow: false,\r\n        };\r\n    }\r\n\r\n    setDisplayOptionModal(show: boolean): void {\r\n        this.setState({ isOptionModalShow: show });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Modal\r\n                onHide={this.setDisplayOptionModal.bind(this, false)}\r\n                show={this.state.isOptionModalShow}\r\n                size=\"lg\"\r\n                aria-labelledby=\"option-modal\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"option-modal\">Advanced Options</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{this.props.children}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={this.props.clearOptionFieldForm}>\r\n                        Clear\r\n                    </Button>\r\n                    <Button variant=\"outline-primary\" onClick={this.props.resetOptionFiledForm}>\r\n                        Reset\r\n                    </Button>\r\n                    <Button variant=\"outline-success\" onClick={this.setDisplayOptionModal.bind(this, false)}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorOptionModal;\r\n","import \"../../index.css\";\r\n\r\nimport React from \"react\";\r\nimport { Accordion, Button, Col, Form, FormControl, InputGroup, Modal, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AiOutlineDown } from \"react-icons/ai\";\r\nimport { TiPencil } from \"react-icons/ti\";\r\n\r\nimport Schema from \"../../model/schema/Schema\";\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport { getOrDefault } from \"../../model/utility\";\r\nimport { DataType } from \"../../type\";\r\nimport { ISchemaEditorField } from \"../schema_editor/type_SchemaEditor\";\r\nimport { IGenericField, IGenericFieldOptions } from \"./type_NodeComponent\";\r\n\r\ninterface IGenericFieldProps<T extends ISchemaType, U extends ISchemaEditorField> {\r\n    options: IGenericFieldOptions;\r\n    schemaType: Schema<T, U>;\r\n\r\n    changeType(props: DataType): void;\r\n    changeName(): void;\r\n}\r\n\r\ninterface IGenericFieldState {\r\n    currentField: Required<IGenericField>;\r\n    isRequiredFieldReadonly: boolean;\r\n    isNameFieldReadonly: boolean;\r\n\r\n    isDescriptionModalShow: boolean;\r\n    isCommentFieldShow: boolean;\r\n}\r\n\r\nclass GenericField extends React.Component<IGenericFieldProps<ISchemaType, IGenericField>, IGenericFieldState> {\r\n    constructor(props: IGenericFieldProps<ISchemaType, IGenericField>) {\r\n        super(props);\r\n\r\n        const currentField: Required<IGenericField> = props.schemaType.getDefaultField();\r\n\r\n        this.state = {\r\n            currentField,\r\n            isRequiredFieldReadonly: getOrDefault(this.props.options.isRequiredFieldReadonly, false),\r\n            isNameFieldReadonly: getOrDefault(this.props.options.isNameFieldReadonly, false),\r\n\r\n            isDescriptionModalShow: false,\r\n            isCommentFieldShow: false,\r\n        };\r\n    }\r\n\r\n    recordField(fieldName: keyof Omit<IGenericField, \"type\">, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentField = this.props.schemaType.recordField(fieldName, changeEvent);\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    changeType(changeEvent: React.ChangeEvent<HTMLSelectElement>): void {\r\n        changeEvent.preventDefault();\r\n\r\n        const newType = changeEvent.target.value as DataType;\r\n\r\n        if (Object.values(DataType).includes(newType)) {\r\n            this.props.changeType(newType);\r\n        }\r\n    }\r\n\r\n    changeName(changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.recordField(\"name\", changeEvent);\r\n        if (this.props.changeName) this.props.changeName();\r\n    }\r\n\r\n    setDisplayDescriptionModal(show: boolean): void {\r\n        this.setState({\r\n            isDescriptionModalShow: show,\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Accordion>\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Row>\r\n                            <Col lg={3}>\r\n                                <InputGroup>\r\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"add-tooltip\"> Required </Tooltip>}>\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Checkbox\r\n                                                checked={this.state.currentField.required}\r\n                                                disabled={this.state.isRequiredFieldReadonly}\r\n                                                onChange={this.recordField.bind(this, \"required\")}\r\n                                            />\r\n                                        </InputGroup.Prepend>\r\n                                    </OverlayTrigger>\r\n\r\n                                    <Form.Control\r\n                                        placeholder=\"items\"\r\n                                        readOnly={this.state.isNameFieldReadonly}\r\n                                        value={this.state.currentField.name}\r\n                                        onChange={this.changeName.bind(this)}\r\n                                    />\r\n                                </InputGroup>\r\n                            </Col>\r\n                            <Col lg={1}>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    custom\r\n                                    placeholder=\"DataType\"\r\n                                    onChange={this.changeType.bind(this)}\r\n                                    value={this.state.currentField.type}\r\n                                >\r\n                                    <option value={DataType.Object}>Object</option>\r\n                                    <option value={DataType.Array}>Array</option>\r\n                                    <option value={DataType.String}>String</option>\r\n                                    <option value={DataType.Integer}>Integer</option>\r\n                                    <option value={DataType.Number}>Number</option>\r\n                                    <option value={DataType.Null}>Null</option>\r\n                                    <option value={DataType.Boolean}>Boolean</option>\r\n                                </Form.Control>\r\n                            </Col>\r\n                            <Col lg={4}>\r\n                                <Form.Control\r\n                                    placeholder=\"Titile\"\r\n                                    value={this.state.currentField.title}\r\n                                    onChange={this.recordField.bind(this, \"title\")}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={4}>\r\n                                <InputGroup>\r\n                                    <FormControl\r\n                                        type=\"text\"\r\n                                        id=\"Description\"\r\n                                        placeholder=\"Description\"\r\n                                        value={this.state.currentField.description}\r\n                                        onChange={this.recordField.bind(this, \"description\")}\r\n                                    />\r\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"add-tooltip\"> Edit </Tooltip>}>\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-primary\" onClick={this.setDisplayDescriptionModal.bind(this, true)}>\r\n                                                <TiPencil />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </OverlayTrigger>\r\n                                </InputGroup>\r\n\r\n                                <Modal\r\n                                    onHide={this.setDisplayDescriptionModal.bind(this, false)}\r\n                                    show={this.state.isDescriptionModalShow}\r\n                                    size=\"lg\"\r\n                                    aria-labelledby=\"description-modal\"\r\n                                    centered\r\n                                >\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title id=\"description-modal\">Description</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <Form.Group>\r\n                                            <Form.Control\r\n                                                as=\"textarea\"\r\n                                                rows={3}\r\n                                                value={this.state.currentField.description}\r\n                                                onChange={this.recordField.bind(this, \"description\")}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Modal.Body>\r\n                                </Modal>\r\n                            </Col>\r\n                            <Col lg={12} style={{ paddingTop: \"5px\" }}>\r\n                                <Accordion.Collapse eventKey=\"0\">\r\n                                    <Form.Control\r\n                                        placeholder=\"$comment\"\r\n                                        value={this.state.currentField.$comment}\r\n                                        onChange={this.recordField.bind(this, \"$comment\")}\r\n                                    />\r\n                                </Accordion.Collapse>\r\n                            </Col>\r\n                        </Form.Row>\r\n                    </Col>\r\n                    <Col lg=\"auto\" style={{ cursor: \"pointer\" }}>\r\n                        <Accordion.Toggle eventKey=\"0\" as=\"span\" className=\"node-option-block\">\r\n                            <AiOutlineDown color=\"blue\" />\r\n                        </Accordion.Toggle>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Accordion>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GenericField;\r\n","import React from \"react\";\r\n\r\nimport Hint, * as HintTextType from \"../../model/Hint\";\r\nimport { NextId } from \"../../model/utility\";\r\nimport { EmptyState } from \"../type_component\";\r\n\r\ntype IHintTextProps = { hint?: Hint };\r\n\r\nclass HintText extends React.Component<IHintTextProps, EmptyState> {\r\n    renderHint(): JSX.Element[] {\r\n        const r: JSX.Element[] = [];\r\n\r\n        if (this.props.hint) {\r\n            let key: \"warn\" | \"info\" | \"error\";\r\n            const all_hint = this.props.hint.getAll();\r\n\r\n            for (key in all_hint) {\r\n                if (all_hint[key] !== undefined) {\r\n                    switch (key) {\r\n                        case \"info\":\r\n                            r.push(\r\n                                ...(all_hint[key] as HintTextType.Info[]).map(h => {\r\n                                    return (\r\n                                        <span style={{ color: \"green\" }} key={NextId.next()}>\r\n                                            <b>Hint: </b>\r\n                                            {h}\r\n                                        </span>\r\n                                    );\r\n                                })\r\n                            );\r\n\r\n                            break;\r\n                        case \"warn\":\r\n                            r.push(\r\n                                ...(all_hint[key] as HintTextType.Warn[]).map(h => {\r\n                                    return (\r\n                                        <span style={{ color: \"orange\" }} key={NextId.next()}>\r\n                                            <b>Warn: </b>\r\n                                            {h}\r\n                                        </span>\r\n                                    );\r\n                                })\r\n                            );\r\n                            r.push(<br />);\r\n                            break;\r\n                        case \"error\":\r\n                            r.push(\r\n                                ...(all_hint[key] as HintTextType.Error[]).map(h => {\r\n                                    return (\r\n                                        <span style={{ color: \"red\" }} key={NextId.next()}>\r\n                                            <b>Error: </b>\r\n                                            {h}\r\n                                        </span>\r\n                                    );\r\n                                })\r\n                            );\r\n                            r.push(<br />);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        if (this.props.hint) {\r\n            return <>{this.renderHint()}</>;\r\n        } else {\r\n            return <></>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default HintText;\r\n","import \"../../index.css\";\r\n\r\nimport React from \"react\";\r\nimport { Dropdown, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AiOutlineSetting } from \"react-icons/ai\";\r\nimport { FaPlus, FaRegTrashAlt } from \"react-icons/fa\";\r\n\r\nimport { NextId } from \"../../model/utility\";\r\nimport { IOptionsButtonsAttr } from \"./type_NodeComponent\";\r\n\r\ninterface INodeOptionsButtonsProps {\r\n    buttonOptions: IOptionsButtonsAttr;\r\n\r\n    showOptionModal(): void;\r\n\r\n    addChild?(): void;\r\n    addSibling?(): void;\r\n    delete?(): void;\r\n}\r\n\r\ninterface ToggleAddButtonProps {\r\n    id: string;\r\n    onClick(event: React.MouseEvent<HTMLSpanElement>): void;\r\n}\r\n\r\nconst ToggleAddButton = React.forwardRef<HTMLSpanElement, ToggleAddButtonProps>((props: ToggleAddButtonProps, ref) => (\r\n    <span ref={ref} id={props.id} onClick={props.onClick}>\r\n        <FaPlus color=\"green\" />\r\n    </span>\r\n));\r\n\r\n// to make eslint happy\r\nToggleAddButton.displayName = \"ToggleAddButton\";\r\n\r\nfunction NodeOptionsButtons(props: INodeOptionsButtonsProps): JSX.Element {\r\n    if (props.buttonOptions.hasChild && !props.addChild)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.hasChild = true, without addChild()\");\r\n    else if (props.buttonOptions.hasSibling && !props.addSibling)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.hasSibling = true, without addSibling()\");\r\n    else if (props.buttonOptions.isDeleteable && !props.delete)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.isDeleteable = true, without delete()\");\r\n\r\n    const addHtmlDropId = NextId.next(\"Key\").toString();\r\n    const addToolTipId = NextId.next(\"Key\").toString();\r\n\r\n    return (\r\n        <div className=\"node-option-block\">\r\n            {props.buttonOptions.hasChild && props.buttonOptions.hasSibling && (\r\n                <div className=\"node-option-btn-block\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle as={ToggleAddButton} id={addHtmlDropId} />\r\n\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item href=\"#\" eventKey=\"1\" onClick={props.addSibling}>\r\n                                Add Sibling\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item href=\"#\" eventKey=\"2\" onClick={props.addChild}>\r\n                                Add Child\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.hasChild !== props.buttonOptions.hasSibling && (\r\n                <div className=\"node-option-btn-block\" onClick={props.buttonOptions.hasChild ? props.addChild : props.addSibling}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id={addToolTipId}> Add </Tooltip>}>\r\n                        <span>\r\n                            <FaPlus color=\"green\" />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.isDeleteable && (\r\n                <div className=\"node-option-btn-block\" onClick={props.delete}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"delete-tooltip\"> Delete </Tooltip>}>\r\n                        <span>\r\n                            <FaRegTrashAlt color=\"red\" />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.isOptionExist && (\r\n                <div className=\"node-option-btn-block\" onClick={props.showOptionModal}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"option-tooltip\"> Option </Tooltip>}>\r\n                        <span>\r\n                            <AiOutlineSetting />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NodeOptionsButtons;\r\n","import React from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\n\r\nfunction SpaceFront(props: { depth: number }): JSX.Element {\r\n    return <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (props.depth * 15).toString() + \"px\" }} />;\r\n}\r\n\r\nexport default SpaceFront;\r\n","import React from \"react\";\r\n\r\nimport Hint, * as HintTextType from \"../../model/Hint\";\r\nimport { IChildrenSchemaType } from \"../../model/schema/type_schema\";\r\nimport { NextId, arrayEquals, getOrDefault } from \"../../model/utility\";\r\nimport { DataType, PartialBy } from \"../../type\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport SchemaEditorFactory from \"./SchemaEditorFactory\";\r\nimport { IChildProperty, IChildrenEditorProps, INewChildEditorProps, ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ninterface ChildrenNodesState {\r\n    children: Array<IChildProperty>;\r\n\r\n    hint: Hint;\r\n}\r\n\r\nclass ChildrenSchemaEditor extends React.Component<IChildrenEditorProps, ChildrenNodesState> {\r\n    constructor(props: IChildrenEditorProps) {\r\n        super(props);\r\n\r\n        const children: IChildProperty[] = getOrDefault(props.childrenProperty, []);\r\n\r\n        this.state = {\r\n            children,\r\n            hint: new Hint(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.props.childrenDidUpdate) this.props.childrenDidUpdate(this.state.children);\r\n        this.checkDuplicateChildrenName();\r\n    }\r\n\r\n    componentDidUpdate(): void {\r\n        if (this.props.childrenDidUpdate) this.props.childrenDidUpdate(this.state.children);\r\n        this.checkDuplicateChildrenName();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.state.children.length;\r\n    }\r\n\r\n    exportSchema(): IChildrenSchemaType {\r\n        if (this.state.hint.getError().length > 0) throw new Error(JSON.stringify(this.state.hint.getError()));\r\n\r\n        return this.state.children.map(child => {\r\n            const c: ISchemaEditorType = child.ref.current as ISchemaEditorType;\r\n            return {\r\n                name: c.getField().name,\r\n                value: c.exportSchema(),\r\n                required: c.getField().required,\r\n            };\r\n        });\r\n    }\r\n\r\n    add(selfId?: string, props?: INewChildEditorProps): void {\r\n        const originChildren = this.state.children;\r\n        let currentIndex;\r\n\r\n        let p: PartialBy<Required<INewChildEditorProps>, \"field\"> = {\r\n            type: DataType.Object,\r\n            isDeleteable: true,\r\n            hasSibling: true,\r\n            isRequiredFieldReadonly: false,\r\n            isNameFieldReadonly: false,\r\n        };\r\n\r\n        if (props) {\r\n            p = {\r\n                ...p,\r\n                ...props,\r\n            };\r\n        }\r\n\r\n        if (selfId === undefined || selfId === \"\") {\r\n            // push to the last one\r\n            currentIndex = originChildren.length + 1;\r\n        } else {\r\n            // Add after a node\r\n            currentIndex = originChildren.findIndex(child => child.selfId === selfId);\r\n        }\r\n\r\n        originChildren.splice(currentIndex + 1, 0, {\r\n            selfId: NextId.next(\"child\").toString(),\r\n\r\n            // hasSibling, isDeletable, isRequiredFieldReadonly, isNameFieldReadonly, field\r\n            ...p,\r\n\r\n            ref: React.createRef<ISchemaEditorType>(),\r\n        });\r\n\r\n        this.setState({ children: originChildren });\r\n    }\r\n\r\n    delete(selfId: string): void {\r\n        const originChildren = this.state.children;\r\n        const currentIndex = originChildren.findIndex(child => child.selfId === selfId);\r\n\r\n        originChildren.splice(currentIndex, 1);\r\n\r\n        this.setState({ children: originChildren });\r\n    }\r\n\r\n    checkDuplicateChildrenName(): void {\r\n        const findDuplicate = this.findNameDuplicate();\r\n\r\n        if (findDuplicate) {\r\n            this.addHint(HintTextType.Error.DUPLICATED_FIELD_NAME);\r\n        } else {\r\n            this.removeHint(HintTextType.Error.DUPLICATED_FIELD_NAME);\r\n        }\r\n    }\r\n\r\n    changeType(selfId: string, type: DataType): void {\r\n        this.setState(prevState => {\r\n            const children = prevState.children.map(child => {\r\n                if (child.selfId === selfId) {\r\n                    return {\r\n                        ...child,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n                        type,\r\n                    };\r\n                } else {\r\n                    return child;\r\n                }\r\n            });\r\n\r\n            return {\r\n                children,\r\n            };\r\n        });\r\n    }\r\n\r\n    findNameDuplicate(): boolean {\r\n        if (this.props.isNameUnique) {\r\n            // Since state may not updated alreday, use schema instead.\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const nameList = this.state.children.map(child => child.ref.current!.schema.getCurrentField().name);\r\n\r\n            return new Set(nameList).size !== nameList.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    addHint(text: HintTextType.Warn | HintTextType.Info | HintTextType.Error): void {\r\n        const originAllHint = this.state.hint.getAll();\r\n\r\n        this.state.hint.add(text);\r\n\r\n        // to avoid recursively update state\r\n        let change = false;\r\n\r\n        if (Hint.isWarnText(text)) {\r\n            if (originAllHint[\"warn\"] === undefined || !arrayEquals(this.state.hint.getWarn(), originAllHint[\"warn\"])) change = true;\r\n        } else if (Hint.isInfoText(text)) {\r\n            if (originAllHint[\"info\"] === undefined || !arrayEquals(this.state.hint.getInfo(), originAllHint[\"info\"])) change = true;\r\n        } else {\r\n            if (originAllHint[\"error\"] === undefined || !arrayEquals(this.state.hint.getError(), originAllHint[\"error\"])) change = true;\r\n        }\r\n\r\n        if (change) {\r\n            this.setState({ hint: this.state.hint });\r\n        }\r\n    }\r\n\r\n    removeHint(text: HintTextType.Warn | HintTextType.Info | HintTextType.Error): void {\r\n        const originAllHint = this.state.hint.getAll();\r\n\r\n        this.state.hint.remove(text);\r\n\r\n        // to avoid recursively update state\r\n        let change = false;\r\n\r\n        if (Hint.isWarnText(text)) {\r\n            if (originAllHint[\"warn\"] !== undefined && !arrayEquals(this.state.hint.getWarn(), originAllHint[\"warn\"])) change = true;\r\n        } else if (Hint.isInfoText(text)) {\r\n            if (originAllHint[\"info\"] !== undefined && !arrayEquals(this.state.hint.getInfo(), originAllHint[\"info\"])) change = true;\r\n        } else {\r\n            if (originAllHint[\"error\"] !== undefined && !arrayEquals(this.state.hint.getError(), originAllHint[\"error\"])) change = true;\r\n        }\r\n\r\n        if (change) {\r\n            this.setState({ hint: this.state.hint });\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <HintText hint={this.state.hint} />\r\n                {this.state.children.map(child => (\r\n                    <SchemaEditorFactory\r\n                        key={child.selfId}\r\n                        depth={this.props.depth + 1}\r\n                        {...child}\r\n                        delete={this.delete.bind(this, child.selfId)}\r\n                        addSibling={this.add.bind(this, child.selfId)}\r\n                        changeType={this.changeType.bind(this, child.selfId)}\r\n                        changeName={this.checkDuplicateChildrenName.bind(this)}\r\n                    />\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChildrenSchemaEditor;\r\n","import React from \"react\";\r\n\r\nimport Hint, * as HintTextType from \"../../model/Hint\";\r\nimport Schema from \"../../model/schema/Schema\";\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport { arrayEquals } from \"../../model/utility\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr, OmitGenericField } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport { ISchemaEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nabstract class SchemaEditor<SchemaType extends ISchemaType, FieldType extends ISchemaEditorField> extends React.Component<\r\n    ISchemaEditorProps<SchemaType>,\r\n    ISchemaEditorState<FieldType>\r\n> {\r\n    protected abstract optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected abstract genericFieldOptions: IGenericFieldOptions;\r\n    public abstract schema: Schema<SchemaType, FieldType>;\r\n\r\n    // may not have options button in the child class\r\n    protected optionModalRef?: React.RefObject<EditorOptionModal>;\r\n\r\n    protected abstract genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    // may not have children in the child class\r\n    protected childrenRef?: React.RefObject<ChildrenSchemaEditor>;\r\n\r\n    abstract exportSchema(): ISchemaType;\r\n\r\n    addChild(): void {\r\n        if (this.childrenRef && this.childrenRef.current) this.childrenRef.current.add();\r\n    }\r\n\r\n    addSibling(): void {\r\n        if (this.props.addSibling) this.props.addSibling();\r\n    }\r\n\r\n    delete(): void {\r\n        if (this.props.delete) this.props.delete();\r\n    }\r\n\r\n    getField(): Required<FieldType> {\r\n        return this.schema.getCurrentField();\r\n    }\r\n\r\n    recordField(fieldName: keyof OmitGenericField<FieldType>, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentField = this.schema.recordField(fieldName, changeEvent);\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    showOptionModal(): void {\r\n        if (this.optionModalRef && this.optionModalRef.current) this.optionModalRef.current.setDisplayOptionModal(true);\r\n    }\r\n\r\n    clearOptionField(): void {\r\n        const currentField = this.schema.clearOptionField();\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    resetOptionField(): void {\r\n        const currentField = this.schema.resetOptionField();\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    addHint(text: HintTextType.Warn | HintTextType.Info | HintTextType.Error): void {\r\n        const originAllHint = this.state.hint.getAll();\r\n\r\n        this.state.hint.add(text);\r\n\r\n        // to avoid recursively update state\r\n        let change = false;\r\n\r\n        if (Hint.isWarnText(text)) {\r\n            if (originAllHint[\"warn\"] === undefined || !arrayEquals(this.state.hint.getWarn(), originAllHint[\"warn\"])) change = true;\r\n        } else if (Hint.isInfoText(text)) {\r\n            if (originAllHint[\"info\"] === undefined || !arrayEquals(this.state.hint.getInfo(), originAllHint[\"info\"])) change = true;\r\n        } else {\r\n            if (originAllHint[\"error\"] === undefined || !arrayEquals(this.state.hint.getError(), originAllHint[\"error\"])) change = true;\r\n        }\r\n\r\n        if (change) {\r\n            this.setState({ hint: this.state.hint });\r\n        }\r\n    }\r\n\r\n    removeHint(text: HintTextType.Warn | HintTextType.Info | HintTextType.Error): void {\r\n        const originAllHint = this.state.hint.getAll();\r\n\r\n        this.state.hint.remove(text);\r\n\r\n        // to avoid recursively update state\r\n        let change = false;\r\n\r\n        if ((text as string) in HintTextType.Warn) {\r\n            if (originAllHint[\"warn\"] !== undefined && !arrayEquals(this.state.hint.getWarn(), originAllHint[\"warn\"])) change = true;\r\n        } else if ((text as string) in HintTextType.Info) {\r\n            if (originAllHint[\"info\"] !== undefined && !arrayEquals(this.state.hint.getInfo(), originAllHint[\"info\"])) change = true;\r\n        } else {\r\n            if (originAllHint[\"error\"] !== undefined && !arrayEquals(this.state.hint.getError(), originAllHint[\"error\"])) change = true;\r\n        }\r\n\r\n        if (change) {\r\n            this.setState({ hint: this.state.hint });\r\n        }\r\n    }\r\n}\r\n\r\nexport default SchemaEditor;\r\n","import React from \"react\";\r\nimport { Col, Form, InputGroup, Row } from \"react-bootstrap\";\r\n\r\nimport Hint, * as HintTextType from \"../../model/Hint\";\r\nimport ArraySchema from \"../../model/schema/ArraySchema\";\r\nimport { IArraySchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport CodeField from \"../node_component/CodeField\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IArrayEditorField, IChildProperty, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass ArraySchemaEditor extends SchemaEditor<IArraySchemaType, IArrayEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: ArraySchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    protected childrenRef: React.RefObject<ChildrenSchemaEditor>;\r\n\r\n    private childrenLength: number;\r\n\r\n    constructor(props: ISchemaEditorProps<IArraySchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.childrenRef = React.createRef<ChildrenSchemaEditor>();\r\n\r\n        this.schema = new ArraySchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: true,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.childrenLength = 0;\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n            hint: new Hint(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (!this.props.schema) this.addChild();\r\n        if (this.state.currentField.maxItems < this.state.currentField.minItems) {\r\n            this.addHint(HintTextType.Warn.MIN_GT_MAX_ITEMS);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IArraySchemaType>, prevState: ISchemaEditorState<IArrayEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.maxItems !== this.state.currentField.maxItems &&\r\n                !(isNaN(prevState.currentField.maxItems) && isNaN(this.state.currentField.maxItems))) ||\r\n            (prevState.currentField.minItems !== this.state.currentField.minItems &&\r\n                !(isNaN(prevState.currentField.minItems) && isNaN(this.state.currentField.minItems)))\r\n        ) {\r\n            if (this.state.currentField.maxItems < this.state.currentField.minItems) {\r\n                this.addHint(HintTextType.Warn.MIN_GT_MAX_ITEMS);\r\n            } else {\r\n                this.removeHint(HintTextType.Warn.MIN_GT_MAX_ITEMS);\r\n            }\r\n        }\r\n    }\r\n\r\n    childrenDidUpdate(children: IChildProperty[]): void {\r\n        if (this.childrenLength !== children.length) {\r\n            if (children.length > 1) {\r\n                this.addHint(HintTextType.Info.ARRAY_ITEM_INDEX_MATTER);\r\n            } else {\r\n                this.removeHint(HintTextType.Info.ARRAY_ITEM_INDEX_MATTER);\r\n            }\r\n\r\n            this.childrenLength = children.length;\r\n        }\r\n    }\r\n\r\n    addChild(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this.childrenRef.current!.add(\"\", {\r\n            type: DataType.Object,\r\n            isDeleteable: true,\r\n            hasSibling: true,\r\n            isRequiredFieldReadonly: true,\r\n            isNameFieldReadonly: true,\r\n\r\n            field: {\r\n                name: \"items\",\r\n                required: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    exportSchema(): IArraySchemaType {\r\n        return this.schema.exportSchema(\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.childrenRef.current!.exportSchema()\r\n        );\r\n    }\r\n\r\n    recordCode(field: \"const\", value: string): void {\r\n        const currentField = this.schema.recordCode(field, value);\r\n\r\n        this.setState({ currentField });\r\n\r\n        try {\r\n            JSON.parse(value);\r\n            this.removeHint(HintTextType.Error.CANT_PARSE_JSON_CONST);\r\n        } catch (error) {\r\n            this.addHint(HintTextType.Error.CANT_PARSE_JSON_CONST);\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MinItems\">\r\n                                                Min Items\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinItems\"\r\n                                                    value={this.state.currentField.minItems}\r\n                                                    onChange={this.recordField.bind(this, \"minItems\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MaxItems\">\r\n                                                Max Items\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxItems\"\r\n                                                    value={this.state.currentField.maxItems}\r\n                                                    onChange={this.recordField.bind(this, \"maxItems\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <InputGroup>\r\n                                                    <CodeField\r\n                                                        title=\"Array constant\"\r\n                                                        value={this.state.currentField.const}\r\n                                                        update={this.recordCode.bind(this, \"const\")}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group>\r\n                                            <Form.Check type=\"checkbox\" id=\"uniqueCheckbox\">\r\n                                                <Form.Check.Input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={this.state.currentField.uniqueItems}\r\n                                                    onChange={this.recordField.bind(this, \"uniqueItems\")}\r\n                                                />\r\n                                                <Form.Check.Label>Unique Items</Form.Check.Label>\r\n                                            </Form.Check>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <ChildrenSchemaEditor\r\n                    ref={this.childrenRef}\r\n                    depth={this.props.depth}\r\n                    isNameUnique={false}\r\n                    childrenProperty={this.schema.childrenProperty}\r\n                    childrenDidUpdate={this.childrenDidUpdate.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArraySchemaEditor;\r\n","import { FieldWithoutType, IBooleanEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IBooleanSchemaType, IGenericSchemaType } from \"./type_schema\";\r\n\r\nclass BooleanSchema extends Schema<IBooleanSchemaType, IBooleanEditorField> {\r\n    protected type = DataType.Boolean;\r\n    protected currentField: Required<IBooleanEditorField>;\r\n    protected defaultField: Required<IBooleanEditorField>;\r\n\r\n    constructor(schema?: IBooleanSchemaType, field?: FieldWithoutType<IBooleanEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", undefined, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", undefined, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n    }\r\n\r\n    private isSelectElement(\r\n        event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n    ): event is React.ChangeEvent<HTMLSelectElement> {\r\n        if ((event as React.ChangeEvent<HTMLSelectElement>).target.selectedIndex !== undefined) return true;\r\n        else return false;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public recordField(\r\n        fieldName: keyof IBooleanEditorField,\r\n        changeEvent: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n    ): Required<IBooleanEditorField> {\r\n        if (this.isSelectElement(changeEvent) && (fieldName === \"default\" || fieldName === \"const\")) {\r\n            this.currentField[fieldName] = changeEvent.target.value.toLowerCase() === \"true\" ? true : false;\r\n        } else if (!this.isSelectElement(changeEvent)) {\r\n            Schema.prototype.recordField.call(this, fieldName, changeEvent);\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IBooleanEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IBooleanEditorField> {\r\n        this.currentField.default = (undefined as unknown) as boolean;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IBooleanSchemaType {\r\n        const type = DataType.Boolean;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", (undefined as unknown) as boolean);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", (undefined as unknown) as boolean);\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...defaultValue,\r\n            ...constValue,\r\n        };\r\n    }\r\n}\r\n\r\nexport default BooleanSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport Hint from \"../../model/Hint\";\r\nimport BooleanSchema from \"../../model/schema/BooleanSchema\";\r\nimport { IBooleanSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IBooleanEditorField, ISchemaEditorProps } from \"./type_SchemaEditor\";\r\n\r\nclass BooleanSchemaEditor extends SchemaEditor<IBooleanSchemaType, IBooleanEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: BooleanSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<IBooleanSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new BooleanSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n            hint: new Hint(),\r\n        };\r\n    }\r\n\r\n    exportSchema(): IBooleanSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg={4}>\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    custom\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                    value={\r\n                                                        this.state.currentField.default === undefined\r\n                                                            ? \"undefined\"\r\n                                                            : this.state.currentField.default.toString()\r\n                                                    }\r\n                                                >\r\n                                                    <option\r\n                                                        disabled\r\n                                                        hidden\r\n                                                        selected={this.state.currentField.default === undefined ? true : false}\r\n                                                        value=\"undefined\"\r\n                                                    >\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    <option value={\"true\"}>True</option>\r\n                                                    <option value={\"false\"}>False</option>\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg={4}>\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    custom\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                    value={\r\n                                                        this.state.currentField.const === undefined\r\n                                                            ? \"undefined\"\r\n                                                            : this.state.currentField.const.toString()\r\n                                                    }\r\n                                                >\r\n                                                    <option\r\n                                                        disabled\r\n                                                        hidden\r\n                                                        selected={this.state.currentField.const === undefined ? true : false}\r\n                                                        value=\"undefined\"\r\n                                                    >\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    <option value={\"true\"}>True</option>\r\n                                                    <option value={\"false\"}>False</option>\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BooleanSchemaEditor;\r\n","import { FieldWithoutType, IIntegerEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, XOR_Partial } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, IIntegerSchemaType, ISchemaTypeEnummable } from \"./type_schema\";\r\n\r\nclass IntegerSchema extends Schema<IIntegerSchemaType, IIntegerEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.Integer;\r\n    protected currentField: Required<IIntegerEditorField>;\r\n    protected defaultField: Required<IIntegerEditorField>;\r\n\r\n    constructor(schema?: IIntegerSchemaType, field?: FieldWithoutType<IIntegerEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        let min: number, max: number;\r\n        let ex_min: boolean, ex_max: boolean;\r\n\r\n        if (schema) {\r\n            if (schema.minimum) {\r\n                min = schema.minimum;\r\n                ex_min = false;\r\n            } else if (schema.exclusiveMinimum) {\r\n                min = schema.exclusiveMinimum;\r\n                ex_min = true;\r\n            } else {\r\n                min = NaN;\r\n                ex_min = false;\r\n            }\r\n\r\n            if (schema.maximum) {\r\n                max = schema.maximum;\r\n                ex_max = false;\r\n            } else if (schema.exclusiveMaximum) {\r\n                max = schema.exclusiveMaximum;\r\n                ex_max = true;\r\n            } else {\r\n                max = NaN;\r\n                ex_max = false;\r\n            }\r\n        } else {\r\n            min = max = NaN;\r\n            ex_min = ex_max = false;\r\n        }\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", NaN, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", NaN, schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            multipleOf: this.retrieveDefaultOptionValue(\"multipleOf\", NaN, schema),\r\n\r\n            minimum: min,\r\n            maximum: max,\r\n            exclusiveMinimum: ex_min,\r\n            exclusiveMaximum: ex_max,\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(NaN);\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = parseInt(changeEvent.target.value);\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IIntegerEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minimum = this.defaultField.minimum;\r\n        this.currentField.maximum = this.defaultField.maximum;\r\n        this.currentField.exclusiveMinimum = this.defaultField.exclusiveMinimum;\r\n        this.currentField.exclusiveMaximum = this.defaultField.exclusiveMaximum;\r\n        this.currentField.multipleOf = this.defaultField.multipleOf;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IIntegerEditorField> {\r\n        this.currentField.default = NaN;\r\n        this.currentField.const = NaN;\r\n        this.currentField.enum = [];\r\n        this.currentField.minimum = NaN;\r\n        this.currentField.maximum = NaN;\r\n        this.currentField.exclusiveMinimum = false;\r\n        this.currentField.exclusiveMaximum = false;\r\n        this.currentField.multipleOf = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IIntegerSchemaType {\r\n        const type = DataType.Integer;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => !isNaN(e));\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", NaN);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", NaN);\r\n        const multipleOf = this.exportSchemaWithoutUndefined(\"multipleOf\", NaN);\r\n\r\n        let min: XOR_Partial<{ exclusiveMinimum: number }, { minimum: number }> = {};\r\n        let max: XOR_Partial<{ exclusiveMaximum: number }, { maximum: number }> = {};\r\n\r\n        if (!isNaN(this.currentField.minimum)) {\r\n            if (this.currentField.exclusiveMinimum) {\r\n                min = { exclusiveMinimum: this.currentField.minimum };\r\n            } else {\r\n                min = { minimum: this.currentField.minimum };\r\n            }\r\n        }\r\n\r\n        if (!isNaN(this.currentField.maximum)) {\r\n            if (this.currentField.exclusiveMaximum) {\r\n                max = { exclusiveMaximum: this.currentField.maximum };\r\n            } else {\r\n                max = { maximum: this.currentField.maximum };\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...min,\r\n            ...max,\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...multipleOf,\r\n            ...enn,\r\n        };\r\n    }\r\n}\r\n\r\nexport default IntegerSchema;\r\n","import React from \"react\";\r\nimport { Button, Col, Form, FormControl, InputGroup, Row } from \"react-bootstrap\";\r\nimport { FaMinus, FaPlus } from \"react-icons/fa\";\r\n\r\nimport { EmptyState } from \"../type_component\";\r\n\r\ninterface EnumFieldProps<T> {\r\n    type: \"number\" | \"text\";\r\n\r\n    value: T[];\r\n    width: number;\r\n    add(): void;\r\n    update(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void;\r\n    delete(index: number): void;\r\n}\r\n\r\nclass EnumField<T extends string | number> extends React.Component<EnumFieldProps<T>, EmptyState> {\r\n    render(): JSX.Element {\r\n        return (\r\n            <Form.Group>\r\n                {this.props.value.length > 0 ? (\r\n                    this.props.value.map((enumeration, index: number) => (\r\n                        <Form.Group as={Row} key={index}>\r\n                            <Form.Label column lg=\"2\">\r\n                                {index === 0 ? \"Enum\" : \"\"}\r\n                            </Form.Label>\r\n                            <Col lg={this.props.width}>\r\n                                {index === this.props.value.length - 1 ? (\r\n                                    <InputGroup>\r\n                                        <FormControl\r\n                                            type={this.props.type}\r\n                                            id={index.toString()}\r\n                                            onChange={this.props.update.bind(this, index)}\r\n                                            value={enumeration}\r\n                                        />\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-danger\" onClick={this.props.delete.bind(this, index)}>\r\n                                                <FaMinus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-success\" onClick={this.props.add}>\r\n                                                <FaPlus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </InputGroup>\r\n                                ) : (\r\n                                    <InputGroup>\r\n                                        <FormControl\r\n                                            type={this.props.type}\r\n                                            id={index.toString()}\r\n                                            onChange={this.props.update.bind(this, index)}\r\n                                            value={enumeration}\r\n                                        />\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-danger\" onClick={this.props.delete.bind(this, index)}>\r\n                                                <FaMinus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </InputGroup>\r\n                                )}\r\n                            </Col>\r\n                        </Form.Group>\r\n                    ))\r\n                ) : (\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label column lg=\"2\">\r\n                            Enum\r\n                        </Form.Label>\r\n                        <Col lg=\"10\">\r\n                            <Row>\r\n                                <Col lg=\"12\">\r\n                                    <Button variant=\"outline-success\" onClick={this.props.add.bind(this)}>\r\n                                        <FaPlus color=\"green\" />\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Form.Group>\r\n                )}\r\n            </Form.Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnumField;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport Hint, * as HintTextType from \"../../model/Hint\";\r\nimport IntegerSchema from \"../../model/schema/IntegerSchema\";\r\nimport { IIntegerSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IIntegerEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass IntegerSchemaEditor extends SchemaEditor<IIntegerSchemaType, IIntegerEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: IntegerSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<IIntegerSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new IntegerSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n            hint: new Hint(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minimum > this.state.currentField.maximum) this.addHint(HintTextType.Warn.MIN_GT_MAX_VALUE);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IIntegerSchemaType>, prevState: ISchemaEditorState<IIntegerEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minimum !== this.state.currentField.minimum &&\r\n                !(isNaN(prevState.currentField.minimum) && isNaN(this.state.currentField.minimum))) ||\r\n            (prevState.currentField.maximum !== this.state.currentField.maximum &&\r\n                !(isNaN(prevState.currentField.maximum) && isNaN(this.state.currentField.maximum)))\r\n        ) {\r\n            if (this.state.currentField.maximum < this.state.currentField.minimum) {\r\n                this.addHint(HintTextType.Warn.MIN_GT_MAX_VALUE);\r\n            } else {\r\n                this.removeHint(HintTextType.Warn.MIN_GT_MAX_VALUE);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IIntegerSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row} controlId=\"MinValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Min Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.minimum}\r\n                                                    onChange={this.recordField.bind(this, \"minimum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMin\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                                                    checked={this.state.currentField.exclusiveMinimum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"MaxValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Max Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.maximum}\r\n                                                    onChange={this.recordField.bind(this, \"maximum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMax\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMaximum\")}\r\n                                                    checked={this.state.currentField.exclusiveMaximum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                                                Multiple Of\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"MultipleOf\"\r\n                                                    value={this.state.currentField.multipleOf}\r\n                                                    onChange={this.recordField.bind(this, \"multipleOf\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"const\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            width={4}\r\n                                            type=\"number\"\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IntegerSchemaEditor;\r\n","import { FieldWithoutType, INullEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, INullSchemaType } from \"./type_schema\";\r\n\r\nclass NullSchema extends Schema<INullSchemaType, INullEditorField> {\r\n    protected type = DataType.Null;\r\n    protected currentField: Required<INullEditorField>;\r\n    protected defaultField: Required<INullEditorField>;\r\n\r\n    constructor(schema?: INullSchemaType, field?: FieldWithoutType<INullEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = { ...genericField };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<INullEditorField> {\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<INullEditorField> {\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): INullSchemaType {\r\n        const type = DataType.Null;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n        };\r\n    }\r\n}\r\n\r\nexport default NullSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport Hint from \"../../model/Hint\";\r\nimport NullSchema from \"../../model/schema/NullSchema\";\r\nimport { INullSchemaType } from \"../../model/schema/type_schema\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { INullEditorField, ISchemaEditorProps } from \"./type_SchemaEditor\";\r\n\r\nclass NullSchemaEditor extends SchemaEditor<INullSchemaType, INullEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: NullSchema;\r\n\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<INullSchemaType>) {\r\n        super(props);\r\n\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new NullSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: false,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n            hint: new Hint(),\r\n        };\r\n    }\r\n\r\n    exportSchema(): INullSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NullSchemaEditor;\r\n","import { FieldWithoutType, INumberEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, XOR_Partial } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, INumberSchemaType, ISchemaTypeEnummable } from \"./type_schema\";\r\n\r\nclass NumberSchema extends Schema<INumberSchemaType, INumberEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.Number;\r\n    protected currentField: Required<INumberEditorField>;\r\n    protected defaultField: Required<INumberEditorField>;\r\n\r\n    constructor(schema?: INumberSchemaType, field?: FieldWithoutType<INumberEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        let min: number, max: number;\r\n        let ex_min: boolean, ex_max: boolean;\r\n\r\n        if (schema) {\r\n            if (schema.minimum) {\r\n                min = schema.minimum;\r\n                ex_min = false;\r\n            } else if (schema.exclusiveMinimum) {\r\n                min = schema.exclusiveMinimum;\r\n                ex_min = true;\r\n            } else {\r\n                min = NaN;\r\n                ex_min = false;\r\n            }\r\n\r\n            if (schema.maximum) {\r\n                max = schema.maximum;\r\n                ex_max = false;\r\n            } else if (schema.exclusiveMaximum) {\r\n                max = schema.exclusiveMaximum;\r\n                ex_max = true;\r\n            } else {\r\n                max = NaN;\r\n                ex_max = false;\r\n            }\r\n        } else {\r\n            min = max = NaN;\r\n            ex_min = ex_max = false;\r\n        }\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", NaN, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", NaN, schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            multipleOf: this.retrieveDefaultOptionValue(\"multipleOf\", NaN, schema),\r\n\r\n            minimum: min,\r\n            maximum: max,\r\n            exclusiveMinimum: ex_min,\r\n            exclusiveMaximum: ex_max,\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public recordField(\r\n        fieldName: keyof INumberEditorField,\r\n        changeEvent: React.ChangeEvent<HTMLInputElement>\r\n    ): Required<INumberEditorField> {\r\n        if (fieldName === \"$comment\" || fieldName === \"description\" || fieldName === \"name\" || fieldName === \"title\") {\r\n            this.currentField[fieldName] = changeEvent.target.value;\r\n        } else if (\r\n            fieldName === \"const\" ||\r\n            fieldName === \"default\" ||\r\n            fieldName === \"maximum\" ||\r\n            fieldName === \"minimum\" ||\r\n            fieldName === \"multipleOf\"\r\n        ) {\r\n            this.currentField[fieldName] = parseFloat(changeEvent.target.value);\r\n        } else if (fieldName === \"exclusiveMaximum\" || fieldName === \"exclusiveMinimum\" || fieldName === \"required\") {\r\n            this.currentField[fieldName] = changeEvent.target.checked;\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(NaN);\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = parseFloat(changeEvent.target.value);\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<INumberEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minimum = this.defaultField.minimum;\r\n        this.currentField.maximum = this.defaultField.maximum;\r\n        this.currentField.exclusiveMinimum = this.defaultField.exclusiveMinimum;\r\n        this.currentField.exclusiveMaximum = this.defaultField.exclusiveMaximum;\r\n        this.currentField.multipleOf = this.defaultField.multipleOf;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<INumberEditorField> {\r\n        this.currentField.default = NaN;\r\n        this.currentField.const = NaN;\r\n        this.currentField.enum = [];\r\n        this.currentField.minimum = NaN;\r\n        this.currentField.maximum = NaN;\r\n        this.currentField.exclusiveMinimum = false;\r\n        this.currentField.exclusiveMaximum = false;\r\n        this.currentField.multipleOf = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): INumberSchemaType {\r\n        const type = DataType.Number;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => !isNaN(e));\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", NaN);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", NaN);\r\n        const multipleOf = this.exportSchemaWithoutUndefined(\"multipleOf\", NaN);\r\n\r\n        let min: XOR_Partial<{ exclusiveMinimum: number }, { minimum: number }> = {};\r\n        let max: XOR_Partial<{ exclusiveMaximum: number }, { maximum: number }> = {};\r\n\r\n        if (!isNaN(this.currentField.minimum)) {\r\n            if (this.currentField.exclusiveMinimum) {\r\n                min = { exclusiveMinimum: this.currentField.minimum };\r\n            } else {\r\n                min = { minimum: this.currentField.minimum };\r\n            }\r\n        }\r\n\r\n        if (!isNaN(this.currentField.maximum)) {\r\n            if (this.currentField.exclusiveMaximum) {\r\n                max = { exclusiveMaximum: this.currentField.maximum };\r\n            } else {\r\n                max = { maximum: this.currentField.maximum };\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...min,\r\n            ...max,\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...multipleOf,\r\n            ...enn,\r\n        };\r\n    }\r\n}\r\n\r\nexport default NumberSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport Hint, * as HintTextType from \"../../model/Hint\";\r\nimport NumberSchema from \"../../model/schema/NumberSchema\";\r\nimport { INumberSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { INumberEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass NumberSchemaEditor extends SchemaEditor<INumberSchemaType, INumberEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: NumberSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<INumberSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new NumberSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n            hint: new Hint(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minimum > this.state.currentField.maximum) this.addHint(HintTextType.Warn.MIN_GT_MAX_VALUE);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<INumberSchemaType>, prevState: ISchemaEditorState<INumberEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minimum !== this.state.currentField.minimum &&\r\n                !(isNaN(prevState.currentField.minimum) && isNaN(this.state.currentField.minimum))) ||\r\n            (prevState.currentField.maximum !== this.state.currentField.maximum &&\r\n                !(isNaN(prevState.currentField.maximum) && isNaN(this.state.currentField.maximum)))\r\n        ) {\r\n            if (this.state.currentField.maximum < this.state.currentField.minimum) {\r\n                this.addHint(HintTextType.Warn.MIN_GT_MAX_VALUE);\r\n            } else {\r\n                this.removeHint(HintTextType.Warn.MIN_GT_MAX_VALUE);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): INumberSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row} controlId=\"MinValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Min Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.minimum}\r\n                                                    onChange={this.recordField.bind(this, \"minimum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMin\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                                                    checked={this.state.currentField.exclusiveMinimum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"MaxValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Max Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.maximum}\r\n                                                    onChange={this.recordField.bind(this, \"maximum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMax\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMaximum\")}\r\n                                                    checked={this.state.currentField.exclusiveMaximum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                                                Multiple Of\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"MultipleOf\"\r\n                                                    value={this.state.currentField.multipleOf}\r\n                                                    onChange={this.recordField.bind(this, \"multipleOf\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"const\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            type=\"number\"\r\n                                            width={4}\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberSchemaEditor;\r\n","import React from \"react\";\r\n\r\nimport { FieldWithoutType, IChildProperty, IObjectEditorField, ISchemaEditorType } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue, NextId } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IChildrenSchemaType, IObjectSchemaType } from \"./type_schema\";\r\n\r\nclass ObjectSchema extends Schema<IObjectSchemaType, IObjectEditorField> {\r\n    protected type = DataType.Object;\r\n    protected currentField: Required<IObjectEditorField>;\r\n    protected defaultField: Required<IObjectEditorField>;\r\n    public readonly childrenProperty?: IChildProperty[];\r\n\r\n    constructor(schema?: IObjectSchemaType, field?: FieldWithoutType<IObjectEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            const: schema && schema.const ? JSON.stringify(schema.const, null, 4) : \"{}\",\r\n\r\n            maxProperties: this.retrieveDefaultOptionValue(\"maxProperties\", NaN, schema),\r\n            minProperties: this.retrieveDefaultOptionValue(\"minProperties\", NaN, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n\r\n        if (schema) this.childrenProperty = this.generateChildrenPropertyFromSchema(schema);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    recordCode(field: \"const\", value: string): Required<IObjectEditorField> {\r\n        this.currentField.const = value;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    generateChildrenPropertyFromSchema(schema: IObjectSchemaType): IChildProperty[] {\r\n        return Object.keys(schema.properties).map(field => {\r\n            return {\r\n                type: schema.properties[field].type,\r\n                selfId: NextId.next(\"child\").toString(),\r\n\r\n                hasSibling: true,\r\n                isDeleteable: true,\r\n                isRequiredFieldReadonly: false,\r\n                isNameFieldReadonly: false,\r\n\r\n                ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                field: {\r\n                    name: field,\r\n                    required: schema.required.find(r => r === field) === undefined ? false : true,\r\n                },\r\n\r\n                schema: schema.properties[field],\r\n            };\r\n        });\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IObjectEditorField> {\r\n        this.currentField.maxProperties = this.defaultField.maxProperties;\r\n        this.currentField.minProperties = this.defaultField.minProperties;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IObjectEditorField> {\r\n        this.currentField.maxProperties = NaN;\r\n        this.currentField.minProperties = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(children?: IChildrenSchemaType): IObjectSchemaType {\r\n        const type = DataType.Object;\r\n\r\n        const genericSchema = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const maxProperties = this.exportSchemaWithoutUndefined(\"maxProperties\", NaN);\r\n        const minProperties = this.exportSchemaWithoutUndefined(\"minProperties\", NaN);\r\n\r\n        const constant: { const?: Record<string, unknown> } = {};\r\n\r\n        constant.const = JSON.parse(this.currentField.const.replace(/\\s/g, \"\")) as Record<string, unknown>;\r\n\r\n        const required: IObjectSchemaType[\"required\"] = [];\r\n        const properties: IObjectSchemaType[\"properties\"] = {};\r\n\r\n        if (children) {\r\n            for (const child of children) {\r\n                properties[child.name] = child.value;\r\n\r\n                if (child.required) {\r\n                    required.push(child.name);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...minProperties,\r\n            ...maxProperties,\r\n            required,\r\n            properties,\r\n            ...constant,\r\n        };\r\n    }\r\n}\r\n\r\nexport default ObjectSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, InputGroup, Row } from \"react-bootstrap\";\r\n\r\nimport Hint, * as HintTextType from \"../../model/Hint\";\r\nimport ObjectSchema from \"../../model/schema/ObjectSchema\";\r\nimport { IObjectSchemaType } from \"../../model/schema/type_schema\";\r\nimport CodeField from \"../node_component/CodeField\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IObjectEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass ObjectSchemaEditor extends SchemaEditor<IObjectSchemaType, IObjectEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: ObjectSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    protected childrenRef: React.RefObject<ChildrenSchemaEditor>;\r\n\r\n    constructor(props: ISchemaEditorProps<IObjectSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.childrenRef = React.createRef<ChildrenSchemaEditor>();\r\n\r\n        this.schema = new ObjectSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: true,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n            hint: new Hint(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.maxProperties < this.state.currentField.minProperties) {\r\n            this.addHint(HintTextType.Warn.MIN_GT_MAX_PROPERTIES);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IObjectSchemaType>, prevState: ISchemaEditorState<IObjectEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.maxProperties !== this.state.currentField.maxProperties &&\r\n                !(isNaN(prevState.currentField.maxProperties) && isNaN(this.state.currentField.maxProperties))) ||\r\n            (prevState.currentField.minProperties !== this.state.currentField.minProperties &&\r\n                !(isNaN(prevState.currentField.minProperties) && isNaN(this.state.currentField.minProperties)))\r\n        ) {\r\n            if (this.state.currentField.maxProperties < this.state.currentField.minProperties) {\r\n                this.addHint(HintTextType.Warn.MIN_GT_MAX_PROPERTIES);\r\n            } else {\r\n                this.removeHint(HintTextType.Warn.MIN_GT_MAX_PROPERTIES);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IObjectSchemaType {\r\n        return this.schema.exportSchema(\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.childrenRef.current!.exportSchema()\r\n        );\r\n    }\r\n\r\n    recordCode(field: \"const\", value: string): void {\r\n        const currentField = this.schema.recordCode(field, value);\r\n\r\n        this.setState({ currentField });\r\n\r\n        try {\r\n            JSON.parse(value);\r\n            this.removeHint(HintTextType.Error.CANT_PARSE_JSON_CONST);\r\n        } catch (error) {\r\n            this.addHint(HintTextType.Error.CANT_PARSE_JSON_CONST);\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"auto\" htmlFor=\"MinProperties\">\r\n                                                Min Properties\r\n                                            </Form.Label>\r\n                                            <Col>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinProperties\"\r\n                                                    value={this.state.currentField.minProperties}\r\n                                                    onChange={this.recordField.bind(this, \"minProperties\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"auto\" htmlFor=\"MaxProperties\">\r\n                                                Max Properties\r\n                                            </Form.Label>\r\n                                            <Col>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxProperties\"\r\n                                                    value={this.state.currentField.maxProperties}\r\n                                                    onChange={this.recordField.bind(this, \"maxProperties\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <InputGroup>\r\n                                                    <CodeField\r\n                                                        title=\"Object constant\"\r\n                                                        value={this.state.currentField.const}\r\n                                                        update={this.recordCode.bind(this, \"const\")}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <ChildrenSchemaEditor\r\n                    ref={this.childrenRef}\r\n                    depth={this.props.depth}\r\n                    isNameUnique={true}\r\n                    childrenProperty={this.schema.childrenProperty}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ObjectSchemaEditor;\r\n","import { FieldWithoutType, IStringEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, ISchemaTypeEnummable, IStringSchemaType } from \"./type_schema\";\r\n\r\nclass StringSchema extends Schema<IStringSchemaType, IStringEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.String;\r\n    protected currentField: Required<IStringEditorField>;\r\n    protected defaultField: Required<IStringEditorField>;\r\n\r\n    constructor(schema?: IStringSchemaType, field?: FieldWithoutType<IStringEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", \"\", schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", \"\", schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            minLength: this.retrieveDefaultOptionValue(\"minLength\", NaN, schema),\r\n            maxLength: this.retrieveDefaultOptionValue(\"maxLength\", NaN, schema),\r\n\r\n            format: this.retrieveDefaultOptionValue(\"format\", \"\" as IStringSchemaType[\"format\"], schema),\r\n            pattern: this.retrieveDefaultOptionValue(\"pattern\", \"\", schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(\"\");\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = changeEvent.target.value;\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IStringEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minLength = this.defaultField.minLength;\r\n        this.currentField.maxLength = this.defaultField.maxLength;\r\n        this.currentField.format = this.defaultField.format;\r\n        this.currentField.pattern = this.defaultField.pattern;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IStringEditorField> {\r\n        this.currentField.default = \"\";\r\n        this.currentField.const = \"\";\r\n        this.currentField.enum = [];\r\n        this.currentField.minLength = NaN;\r\n        this.currentField.maxLength = NaN;\r\n        this.currentField.format = \"\" as Required<IStringEditorField>[\"format\"];\r\n        this.currentField.pattern = \"\";\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IStringSchemaType {\r\n        const type = DataType.String;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => e !== \"\");\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", \"\");\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", \"\");\r\n        const minLength = this.exportSchemaWithoutUndefined(\"minLength\", NaN);\r\n        const maxLength = this.exportSchemaWithoutUndefined(\"maxLength\", NaN);\r\n        const format = this.exportSchemaWithoutUndefined(\"format\", \"\" as Required<IStringEditorField>[\"format\"]);\r\n        const pattern = this.exportSchemaWithoutUndefined(\"pattern\", \"\");\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...minLength,\r\n            ...maxLength,\r\n            ...enn,\r\n\r\n            ...format,\r\n            ...pattern,\r\n        };\r\n    }\r\n}\r\n\r\nexport default StringSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport Hint, * as HintTextType from \"../../model/Hint\";\r\nimport StringSchema from \"../../model/schema/StringSchema\";\r\nimport { IStringSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { ISchemaEditorProps, ISchemaEditorState, IStringEditorField } from \"./type_SchemaEditor\";\r\n\r\nclass StringSchemaEditor extends SchemaEditor<IStringSchemaType, IStringEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: StringSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<IStringSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new StringSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n            hint: new Hint(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minLength > this.state.currentField.maxLength) this.addHint(HintTextType.Warn.MIN_GT_MAX_LENGTH);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IStringSchemaType>, prevState: ISchemaEditorState<IStringEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minLength !== this.state.currentField.minLength &&\r\n                !(isNaN(prevState.currentField.minLength) && isNaN(this.state.currentField.minLength))) ||\r\n            (prevState.currentField.maxLength !== this.state.currentField.maxLength &&\r\n                !(isNaN(prevState.currentField.maxLength) && isNaN(this.state.currentField.maxLength)))\r\n        ) {\r\n            if (this.state.currentField.minLength > this.state.currentField.maxLength) {\r\n                this.addHint(HintTextType.Warn.MIN_GT_MAX_LENGTH);\r\n            } else {\r\n                this.removeHint(HintTextType.Warn.MIN_GT_MAX_LENGTH);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IStringSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                                                Min Length\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinLength\"\r\n                                                    value={this.state.currentField.minLength}\r\n                                                    onChange={this.recordField.bind(this, \"minLength\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MaxLength\">\r\n                                                Max Length\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxLength\"\r\n                                                    value={this.state.currentField.maxLength}\r\n                                                    onChange={this.recordField.bind(this, \"maxLength\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"Format\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Format\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    value={this.state.currentField.format}\r\n                                                    onChange={this.recordField.bind(this, \"format\")}\r\n                                                >\r\n                                                    <option disabled hidden value=\"\">\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    {[\r\n                                                        \"date-time\",\r\n                                                        \"time\",\r\n                                                        \"date\",\r\n                                                        \"email\",\r\n                                                        \"idn-email\",\r\n                                                        \"hostname\",\r\n                                                        \"idn-hostname\",\r\n                                                        \"ipv4\",\r\n                                                        \"ipv6\",\r\n                                                        \"uri\",\r\n                                                        \"uri-reference\",\r\n                                                        \"iri\",\r\n                                                        \"iri-reference\",\r\n                                                        \"uri-template\",\r\n                                                        \"json-pointer\",\r\n                                                        \"relative-json-pointer\",\r\n                                                        \"regex\",\r\n                                                    ].map((v, i) => (\r\n                                                        <option key={i} value={v}>\r\n                                                            {v}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"Pattern\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Pattern\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Regular Expression\"\r\n                                                    value={this.state.currentField.pattern}\r\n                                                    onChange={this.recordField.bind(this, \"pattern\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"const\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            type=\"text\"\r\n                                            width={10}\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StringSchemaEditor;\r\n","/* eslint-disable */\r\n// I think there is some bugs  in either eslint or react to use forwardref\r\nimport React from \"react\";\r\n\r\nimport {\r\n    IArraySchemaType,\r\n    IBooleanSchemaType,\r\n    IIntegerSchemaType,\r\n    INullSchemaType,\r\n    INumberSchemaType,\r\n    IObjectSchemaType,\r\n    ISchemaType,\r\n    IStringSchemaType,\r\n} from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport { IGenericField } from \"../node_component/type_NodeComponent\";\r\nimport ArraySchemaEditor from \"./ArraySchemaEditor\";\r\nimport BooleanSchemaEditor from \"./BooleanSchemaEditor\";\r\nimport IntegerSchemaEditor from \"./IntegerSchemaEditor\";\r\nimport NullSchemaEditor from \"./NullSchemaEditor\";\r\nimport NumberSchemaEditor from \"./NumberSchemaEditor\";\r\nimport ObjectSchemaEditor from \"./ObjectSchemaEditor\";\r\nimport StringSchemaEditor from \"./StringSchemaEditor\";\r\nimport { ISchemaEditorProps, ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ntype FactoryProps = Omit<ISchemaEditorProps<ISchemaType>, \"field\"> & {\r\n    type: DataType;\r\n    field?: Omit<IGenericField, \"type\">;\r\n};\r\n\r\nconst SchemaEditorFactory = React.forwardRef<ISchemaEditorType, FactoryProps>((props, ref) => {\r\n    switch (props.type) {\r\n        case DataType.Array:\r\n            return (\r\n                <ArraySchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IArraySchemaType }}\r\n                    ref={ref as React.RefObject<ArraySchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Boolean:\r\n            return (\r\n                <BooleanSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IBooleanSchemaType }}\r\n                    ref={ref as React.RefObject<BooleanSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Integer:\r\n            return (\r\n                <IntegerSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IIntegerSchemaType }}\r\n                    ref={ref as React.RefObject<IntegerSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Number:\r\n            return (\r\n                <NumberSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as INumberSchemaType }}\r\n                    ref={ref as React.RefObject<NumberSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Null:\r\n            return (\r\n                <NullSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as INullSchemaType }}\r\n                    ref={ref as React.RefObject<NullSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Object:\r\n            return (\r\n                <ObjectSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IObjectSchemaType }}\r\n                    ref={ref as React.RefObject<ObjectSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.String:\r\n            return (\r\n                <StringSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IStringSchemaType }}\r\n                    ref={ref as React.RefObject<StringSchemaEditor>}\r\n                />\r\n            );\r\n    }\r\n});\r\n\r\n// make eslint happy\r\nSchemaEditorFactory.displayName = \"SchemaEditorFactory\";\r\n\r\nexport default SchemaEditorFactory;\r\n","import React from \"react\";\r\n\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport SchemaEditorFactory from \"./SchemaEditorFactory\";\r\nimport { ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ninterface RootSchemaEditorProps {\r\n    schema?: ISchemaType;\r\n}\r\n\r\nclass RootSchemaEditor extends React.Component<RootSchemaEditorProps, { type: DataType }> {\r\n    private editorRef: React.RefObject<ISchemaEditorType>;\r\n\r\n    constructor(props: RootSchemaEditorProps) {\r\n        super(props);\r\n\r\n        this.editorRef = React.createRef<ISchemaEditorType>();\r\n\r\n        if (props.schema) {\r\n            this.state = { type: props.schema.type };\r\n        } else {\r\n            this.state = { type: DataType.Object };\r\n        }\r\n    }\r\n\r\n    changeType(type: DataType): void {\r\n        this.setState({ type });\r\n    }\r\n\r\n    changeName(): void {\r\n        console.log(`[Root Node] Change Name!!`);\r\n    }\r\n\r\n    exportSchema(): ISchemaType {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        return this.editorRef.current!.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <SchemaEditorFactory\r\n                ref={this.editorRef}\r\n                type={this.state.type}\r\n                schema={this.props.schema}\r\n                depth={0}\r\n                field={{ name: \"root\", required: true }}\r\n                hasSibling={false}\r\n                isDeleteable={false}\r\n                isRequiredFieldReadonly={true}\r\n                isNameFieldReadonly={true}\r\n                changeType={this.changeType.bind(this)}\r\n                changeName={this.changeName.bind(this)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default RootSchemaEditor;\r\n","import Ajv from \"ajv\";\r\nimport draft_04_meta from \"ajv/lib/refs/json-schema-draft-04.json\";\r\nimport draft_06_meta from \"ajv/lib/refs/json-schema-draft-06.json\";\r\nimport React from \"react\";\r\nimport { Button, Toast } from \"react-bootstrap\";\r\n\r\nimport { ISchemaType } from \"../model/schema/type_schema\";\r\nimport { NextId } from \"../model/utility\";\r\nimport RootSchemaEditor from \"./schema_editor/RootSchemaEditor\";\r\nimport { EmptyProps } from \"./type_component\";\r\n\r\ninterface IEditorState {\r\n    error?: string;\r\n    schema?: ISchemaType;\r\n}\r\n\r\nclass Editor extends React.Component<EmptyProps, IEditorState> {\r\n    private fileUploadRef: React.RefObject<HTMLInputElement>;\r\n    private editorRef: React.RefObject<RootSchemaEditor>;\r\n    private rootSchemaEditorKey: string;\r\n\r\n    constructor(props: EmptyProps) {\r\n        super(props);\r\n\r\n        this.fileUploadRef = React.createRef<HTMLInputElement>();\r\n        this.editorRef = React.createRef<RootSchemaEditor>();\r\n\r\n        this.rootSchemaEditorKey = NextId.next(\"key\").toString();\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    toggleImport(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this.fileUploadRef.current!.click();\r\n    }\r\n\r\n    async import(event: React.ChangeEvent<HTMLInputElement>): Promise<void> {\r\n        if (event.target.files) {\r\n            try {\r\n                const text = await event.target.files[0].text();\r\n                const schema = JSON.parse(text);\r\n\r\n                const validator = new Ajv({ schemaId: \"auto\" });\r\n                validator.addMetaSchema(draft_04_meta);\r\n                validator.addMetaSchema(draft_06_meta);\r\n\r\n                const result = validator.validateSchema(schema);\r\n\r\n                if (!result) {\r\n                    this.setState({\r\n                        error: \"Parsing Schema Error! We only support draft-04/06/07\",\r\n                    });\r\n                } else {\r\n                    this.rootSchemaEditorKey = NextId.next(\"key\").toString();\r\n                    this.setState({ schema });\r\n                }\r\n            } catch (error) {\r\n                this.setState({\r\n                    error: \"Parsing Schema Error! Please check your schema.\",\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    export(): void {\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const schema = this.editorRef.current!.exportSchema();\r\n\r\n            const fileBlob = new Blob([JSON.stringify(schema, null, 4)], { type: \"application/schema+json\" });\r\n            const blobURL = window.URL.createObjectURL(fileBlob);\r\n\r\n            const anchorElement = document.createElement(\"a\");\r\n            anchorElement.href = blobURL;\r\n            anchorElement.setAttribute(\"download\", \"Schema.json\");\r\n            document.body.appendChild(anchorElement);\r\n            anchorElement.click();\r\n\r\n            document.body.removeChild(anchorElement);\r\n        } catch (e) {\r\n            this.setState({ error: `Find Error: ${e.message} Please check and export again.` });\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-3 mx-4 \">\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"file-uploader\"\r\n                    data-target=\"file-uploader\"\r\n                    hidden\r\n                    ref={this.fileUploadRef}\r\n                    onChange={this.import.bind(this)}\r\n                />\r\n                <Button variant=\"outline-primary\" onClick={this.toggleImport.bind(this)}>\r\n                    Import from file\r\n                </Button>{\" \"}\r\n                <Button variant=\"outline-success\" onClick={this.export.bind(this)}>\r\n                    Export Schema\r\n                </Button>\r\n                <RootSchemaEditor ref={this.editorRef} key={this.rootSchemaEditorKey} schema={this.state.schema} />\r\n                {this.state.error && (\r\n                    <Toast\r\n                        show={this.state.error ? true : false}\r\n                        onClose={(): void => {\r\n                            this.setState({ error: undefined });\r\n                        }}\r\n                        delay={3000}\r\n                        autohide\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            bottom: \"20px\",\r\n                            right: \"20px\",\r\n                            borderColor: \"red\",\r\n                            color: \"red\",\r\n                        }}\r\n                    >\r\n                        <Toast.Header style={{ borderColor: \"red\", color: \"red\" }}>\r\n                            <strong className=\"mr-auto\">Error</strong>\r\n                        </Toast.Header>\r\n                        <Toast.Body>{this.state.error}</Toast.Body>\r\n                    </Toast>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nimport Editor from \"./Editor\";\r\n\r\nclass App extends React.Component {\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\">JSON Schema Editor</Navbar.Brand>\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text>\r\n                            <a href=\"https://github.com/JingWangTW/json-schema-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <img height=\"30px\" src=\"https://github.com/fluidicon.png\" alt=\"Github ICON\" />\r\n                            </a>\r\n                        </Navbar.Text>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n                <Editor />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import \"./index.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./component/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}