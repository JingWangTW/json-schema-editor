{"version":3,"sources":["model/utility.ts","type.ts","model/schema/Schema.ts","model/schema/ArraySchema.ts","component/node_component/EditorOptionModal.tsx","component/node_component/GenericField.tsx","component/node_component/HintText.tsx","component/node_component/OptionsButtons.tsx","component/node_component/SpaceFront.tsx","component/schema_editor/ChildrenSchemaEditor.tsx","component/schema_editor/SchemaEditor.tsx","component/schema_editor/ArraySchemaEditor.tsx","model/schema/BooleanSchema.ts","component/schema_editor/BooleanSchemaEditor.tsx","model/schema/IntegerSchema.ts","component/node_component/EnumField.tsx","component/schema_editor/IntegerSchemaEditor.tsx","model/schema/NullSchema.ts","component/schema_editor/NullSchemaEditor.tsx","model/schema/NumberSchema.ts","component/schema_editor/NumberSchemaEditor.tsx","model/schema/ObjectSchema.ts","component/schema_editor/ObjectSchemaEditor.tsx","model/schema/StringSchema.ts","component/schema_editor/StringSchemaEditor.tsx","component/schema_editor/SchemaEditorFactory.tsx","component/schema_editor/RootSchemaEditor.tsx","component/Editor.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["NextId","name","mappedKeyId","getOrDefault","optionalValue","defaultValue","undefined","CloneReturnValue","target","key","descriptor","original","value","args","ret","apply","this","Object","DataType","Schema","type","currentField","defaultField","recordField","fieldName","changeEvent","toString","checked","parseInt","getDefaultField","getCurrentField","getGenericSchemaFromField","field","schema","title","description","$comment","getGenericFieldFromSchema","f","required","next","retrieveDefaultOptionValue","exportSchemaWithoutUndefined","emptyValue","temp","isNaN","ArraySchema","constructor","super","Array","childrenProperty","genericField","minItems","NaN","maxItems","uniqueItems","generateChildrenPropertyFromSchema","items","map","s","selfId","hasSibling","isDeleteable","isRequiredFieldReadonly","isNameFieldReadonly","ref","React","createRef","resetOptionField","clearOptionField","exportSchema","children","genericSchema","length","child","EditorOptionModal","Component","props","state","isOptionModalShow","setDisplayOptionModal","show","setState","render","Modal","onHide","bind","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Footer","Button","variant","onClick","clearOptionFieldForm","resetOptionFiledForm","GenericField","schemaType","options","isDescriptionModalShow","isCommentFieldShow","changeType","preventDefault","newType","values","includes","changeName","setDisplayDescriptionModal","Accordion","Form","Row","Col","lg","InputGroup","OverlayTrigger","trigger","overlay","Tooltip","Prepend","Checkbox","disabled","onChange","Control","placeholder","readOnly","as","custom","String","Integer","Number","Null","Boolean","FormControl","Append","Group","rows","style","paddingTop","Collapse","eventKey","cursor","Toggle","className","color","HintText","renderHint","r","hint","push","ToggleAddButton","forwardRef","displayName","NodeOptionsButtons","buttonOptions","hasChild","addChild","Error","addSibling","delete","addHtmlDropId","addToolTipId","Dropdown","Menu","Item","href","isOptionExist","showOptionModal","SpaceFront","width","depth","ChildrenSchemaEditor","componentDidMount","childrenDidUpdate","checkDuplicateChildrenName","componentDidUpdate","error","c","current","getField","add","originChildren","currentIndex","p","findIndex","splice","findNameDuplicate","updateHint","prevState","isNameUnique","nameList","Set","hintType","SchemaEditor","optionsButtonsAttr","genericFieldOptions","optionModalRef","genericFieldRef","childrenRef","ArraySchemaEditor","childrenLength","prevProps","OptionsButtons","Label","column","htmlFor","min","Check","Input","BooleanSchema","default","isSelectElement","event","selectedIndex","toLowerCase","prototype","call","BooleanSchemaEditor","hidden","selected","IntegerSchema","max","ex_min","ex_max","minimum","exclusiveMinimum","maximum","exclusiveMaximum","const","enum","multipleOf","addEnum","updateEnum","index","deleteEnum","enumeration","filter","e","enn","constValue","EnumField","update","IntegerSchemaEditor","controlId","inline","label","height","NullSchema","NullSchemaEditor","NumberSchema","parseFloat","NumberSchemaEditor","ObjectSchema","maxProperties","minProperties","keys","properties","find","ObjectSchemaEditor","StringSchema","minLength","maxLength","format","pattern","StringSchemaEditor","console","log","v","i","SchemaEditorFactory","RootSchemaEditor","editorRef","Editor","fileUploadRef","rootSchemaEditorKey","toggleImport","click","import","files","text","JSON","parse","validator","Ajv","schemaId","addMetaSchema","draft_04_meta","draft_06_meta","validateSchema","export","fileBlob","Blob","stringify","blobURL","window","URL","createObjectURL","anchorElement","document","createElement","setAttribute","body","appendChild","removeChild","message","data-target","Toast","onClose","delay","autohide","position","bottom","right","borderColor","App","Navbar","collapseOnSelect","expand","bg","Brand","Text","rel","src","alt","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d940b892.chunk.js","sourcesContent":["class NextId {\r\n    private static mappedKeyId: { [key: string]: number } = {};\r\n\r\n    public static next(name = \"global\"): number {\r\n        if (!(name in NextId.mappedKeyId)) {\r\n            NextId.mappedKeyId[name] = 0;\r\n        }\r\n\r\n        NextId.mappedKeyId[name]++;\r\n\r\n        return NextId.mappedKeyId[name];\r\n    }\r\n}\r\n\r\nfunction getOrDefault<T>(optionalValue: T | undefined, defaultValue: T): T {\r\n    if (optionalValue === undefined) return defaultValue;\r\n    else return optionalValue;\r\n}\r\n\r\nfunction CloneReturnValue(target: unknown, key: string | symbol, descriptor: PropertyDescriptor): PropertyDescriptor {\r\n    const original = descriptor.value;\r\n\r\n    descriptor.value = function (...args: unknown[]): unknown {\r\n        const ret = original.apply(this, args);\r\n        if (ret && ret instanceof Object) return { ...ret };\r\n        else return ret;\r\n    };\r\n\r\n    return descriptor;\r\n}\r\n\r\nexport { NextId, getOrDefault, CloneReturnValue };\r\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\r\nexport type XOR_Partial<T, U> = (Without<T, U> & Partial<U>) | (Without<U, T> & Partial<T>);\r\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\r\nexport type IntersectionKey<T, U> = Extract<keyof T, keyof U>;\r\n\r\nexport enum DataType {\r\n    Array = \"array\",\r\n    Boolean = \"boolean\",\r\n    Integer = \"integer\",\r\n    Number = \"number\",\r\n    Object = \"object\",\r\n    String = \"string\",\r\n    Null = \"null\",\r\n}\r\n","import { IGenericField } from \"../../component/node_component/type_NodeComponent\";\r\nimport { FieldWithoutType, ISchemaEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue, NextId, getOrDefault } from \"../utility\";\r\nimport { IGenericSchemaType, ISchemaType } from \"./type_schema\";\r\n\r\nabstract class Schema<SchemaType extends ISchemaType, FieldType extends ISchemaEditorField> {\r\n    protected abstract type: DataType;\r\n    protected abstract currentField: Required<FieldType>;\r\n    protected abstract defaultField: Required<FieldType>;\r\n\r\n    abstract resetOptionField(): Required<FieldType>;\r\n    abstract clearOptionField(): Required<FieldType>;\r\n    abstract exportSchema(): SchemaType;\r\n\r\n    @CloneReturnValue\r\n    public recordField(fieldName: keyof FieldType, changeEvent: React.ChangeEvent<HTMLInputElement>): Required<FieldType> {\r\n        switch (typeof this.currentField[fieldName]) {\r\n            case \"string\":\r\n                this.currentField[fieldName] = (changeEvent.target.value.toString() as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n            case \"boolean\":\r\n                this.currentField[fieldName] = (changeEvent.target.checked as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n            case \"number\":\r\n                this.currentField[fieldName] = (parseInt(changeEvent.target.value) as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public getDefaultField(): Required<FieldType> {\r\n        return this.defaultField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public getCurrentField(): Required<FieldType> {\r\n        return this.currentField;\r\n    }\r\n\r\n    protected getGenericSchemaFromField(field: IGenericField): IGenericSchemaType {\r\n        const schema: IGenericSchemaType = {};\r\n\r\n        if (field.title && field.title !== \"\") schema.title = field.title;\r\n        if (field.description && field.description !== \"\") schema.description = field.description;\r\n        if (field.$comment && field.$comment !== \"\") schema.$comment = field.$comment;\r\n\r\n        return schema;\r\n    }\r\n\r\n    protected getGenericFieldFromSchema(schema?: IGenericSchemaType, field?: FieldWithoutType<IGenericField>): Required<IGenericField> {\r\n        let f: IGenericField;\r\n\r\n        if (schema === undefined) schema = {};\r\n        if (field === undefined) {\r\n            f = {\r\n                type: this.type,\r\n                required: true,\r\n                name: `Field_${NextId.next(\"Field\")}`,\r\n            };\r\n        } else {\r\n            f = { type: this.type, ...field };\r\n        }\r\n\r\n        return {\r\n            type: this.type,\r\n            required: f.required,\r\n            name: f.name,\r\n\r\n            title: getOrDefault(schema.title, getOrDefault(f.title, \"\")),\r\n            description: getOrDefault(schema.description, getOrDefault(f.description, \"\")),\r\n            $comment: getOrDefault(schema.$comment, getOrDefault(f.$comment, \"\")),\r\n        };\r\n    }\r\n\r\n    protected retrieveDefaultOptionValue<T extends keyof SchemaType>(\r\n        key: T,\r\n        defaultValue: SchemaType[T],\r\n        schema?: SchemaType\r\n    ): Required<SchemaType>[T] {\r\n        if (schema && key in schema && schema[key] !== undefined) {\r\n            return schema[key];\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    protected exportSchemaWithoutUndefined<K extends keyof (SchemaType | FieldType)>(\r\n        key: K,\r\n        emptyValue: Required<FieldType>[K]\r\n    ): Partial<Record<K, FieldType[K]>> {\r\n        const temp: Partial<Record<K, FieldType[K]>> = {};\r\n\r\n        // NaN === Nan get false\r\n        if (typeof emptyValue === \"number\" && isNaN(emptyValue)) {\r\n            if (!isNaN((this.currentField[key] as unknown) as number)) {\r\n                temp[key] = this.currentField[key];\r\n            }\r\n        } else {\r\n            if (this.currentField[key] !== emptyValue) {\r\n                temp[key] = this.currentField[key];\r\n            }\r\n        }\r\n\r\n        return temp;\r\n    }\r\n}\r\n\r\nexport default Schema;\r\n","import React from \"react\";\r\n\r\nimport { FieldWithoutType, IArrayEditorField, IChildProperty, ISchemaEditorType } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue, NextId } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IArraySchemaType, IChildrenSchemaType, IGenericSchemaType } from \"./type_schema\";\r\n\r\nclass ArraySchema extends Schema<IArraySchemaType, IArrayEditorField> {\r\n    protected type = DataType.Array;\r\n    protected currentField: Required<IArrayEditorField>;\r\n    protected defaultField: Required<IArrayEditorField>;\r\n    public readonly childrenProperty?: IChildProperty[];\r\n\r\n    constructor(schema?: IArraySchemaType, field?: FieldWithoutType<IArrayEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            minItems: this.retrieveDefaultOptionValue(\"minItems\", NaN, schema),\r\n            maxItems: this.retrieveDefaultOptionValue(\"maxItems\", NaN, schema),\r\n            uniqueItems: this.retrieveDefaultOptionValue(\"uniqueItems\", false, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n\r\n        if (schema) this.childrenProperty = this.generateChildrenPropertyFromSchema(schema);\r\n    }\r\n\r\n    generateChildrenPropertyFromSchema(schema: IArraySchemaType): IChildProperty[] {\r\n        if (schema.items) {\r\n            if (schema.items instanceof Array) {\r\n                return schema.items.map(s => {\r\n                    return {\r\n                        type: s.type,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n\r\n                        hasSibling: true,\r\n                        isDeleteable: true,\r\n                        isRequiredFieldReadonly: true,\r\n                        isNameFieldReadonly: true,\r\n\r\n                        ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                        field: {\r\n                            name: \"items\",\r\n                            required: true,\r\n                        },\r\n\r\n                        schema: s,\r\n                    };\r\n                });\r\n            } else {\r\n                return [\r\n                    {\r\n                        type: schema.type,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n\r\n                        hasSibling: true,\r\n                        isDeleteable: true,\r\n                        isRequiredFieldReadonly: true,\r\n                        isNameFieldReadonly: true,\r\n\r\n                        ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                        field: {\r\n                            name: \"items\",\r\n                            required: true,\r\n                        },\r\n\r\n                        schema: schema.items,\r\n                    },\r\n                ];\r\n            }\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IArrayEditorField> {\r\n        this.currentField.maxItems = this.defaultField.maxItems;\r\n        this.currentField.minItems = this.defaultField.minItems;\r\n        this.currentField.uniqueItems = this.defaultField.uniqueItems;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IArrayEditorField> {\r\n        this.currentField.maxItems = NaN;\r\n        this.currentField.minItems = NaN;\r\n        this.currentField.uniqueItems = false;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(children?: IChildrenSchemaType): IArraySchemaType {\r\n        const type = DataType.Array;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const { uniqueItems } = this.currentField;\r\n\r\n        const minItems = this.exportSchemaWithoutUndefined(\"minItems\", NaN);\r\n        const maxItems = this.exportSchemaWithoutUndefined(\"maxItems\", NaN);\r\n\r\n        let items: IArraySchemaType[\"items\"];\r\n\r\n        if (children) {\r\n            if (children.length === 1) {\r\n                items = children[0].value;\r\n            } else if (children.length > 1) {\r\n                items = children.map(child => child.value);\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...minItems,\r\n            ...maxItems,\r\n            uniqueItems,\r\n            items,\r\n        };\r\n    }\r\n}\r\n\r\nexport default ArraySchema;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React, { PropsWithChildren } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\ninterface EditorOptionModalProps {\r\n    clearOptionFieldForm(): void;\r\n    resetOptionFiledForm(): void;\r\n}\r\n\r\ninterface EditorOptionModalState {\r\n    isOptionModalShow: boolean;\r\n}\r\n\r\nclass EditorOptionModal extends React.Component<PropsWithChildren<EditorOptionModalProps>, EditorOptionModalState> {\r\n    constructor(props: EditorOptionModalProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOptionModalShow: false,\r\n        };\r\n    }\r\n\r\n    setDisplayOptionModal(show: boolean): void {\r\n        this.setState({ isOptionModalShow: show });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Modal\r\n                onHide={this.setDisplayOptionModal.bind(this, false)}\r\n                show={this.state.isOptionModalShow}\r\n                size=\"lg\"\r\n                aria-labelledby=\"option-modal\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"option-modal\">Advanced Options</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{this.props.children}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={this.props.clearOptionFieldForm}>\r\n                        Clear\r\n                    </Button>\r\n                    <Button variant=\"outline-primary\" onClick={this.props.resetOptionFiledForm}>\r\n                        Reset\r\n                    </Button>\r\n                    <Button variant=\"outline-success\" onClick={this.setDisplayOptionModal.bind(this, false)}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorOptionModal;\r\n","import \"../../index.css\";\r\n\r\n// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Accordion, Button, Col, Form, FormControl, InputGroup, Modal, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AiOutlineDown } from \"react-icons/ai\";\r\nimport { TiPencil } from \"react-icons/ti\";\r\n\r\nimport Schema from \"../../model/schema/Schema\";\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport { getOrDefault } from \"../../model/utility\";\r\nimport { DataType } from \"../../type\";\r\nimport { ISchemaEditorField } from \"../schema_editor/type_SchemaEditor\";\r\nimport { IGenericField, IGenericFieldOptions } from \"./type_NodeComponent\";\r\n\r\ninterface IGenericFieldProps<T extends ISchemaType, U extends ISchemaEditorField> {\r\n    options: IGenericFieldOptions;\r\n    schemaType: Schema<T, U>;\r\n\r\n    changeType(props: DataType): void;\r\n    changeName(): void;\r\n}\r\n\r\ninterface IGenericFieldState {\r\n    currentField: Required<IGenericField>;\r\n    isRequiredFieldReadonly: boolean;\r\n    isNameFieldReadonly: boolean;\r\n\r\n    isDescriptionModalShow: boolean;\r\n    isCommentFieldShow: boolean;\r\n}\r\n\r\nclass GenericField extends React.Component<IGenericFieldProps<ISchemaType, IGenericField>, IGenericFieldState> {\r\n    constructor(props: IGenericFieldProps<ISchemaType, IGenericField>) {\r\n        super(props);\r\n\r\n        const currentField: Required<IGenericField> = props.schemaType.getDefaultField();\r\n\r\n        this.state = {\r\n            currentField,\r\n            isRequiredFieldReadonly: getOrDefault(this.props.options.isRequiredFieldReadonly, false),\r\n            isNameFieldReadonly: getOrDefault(this.props.options.isNameFieldReadonly, false),\r\n\r\n            isDescriptionModalShow: false,\r\n            isCommentFieldShow: false,\r\n        };\r\n    }\r\n\r\n    recordField(fieldName: keyof Omit<IGenericField, \"type\">, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentField = this.props.schemaType.recordField(fieldName, changeEvent);\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    changeType(changeEvent: React.ChangeEvent<HTMLSelectElement>): void {\r\n        changeEvent.preventDefault();\r\n\r\n        const newType = changeEvent.target.value as DataType;\r\n\r\n        if (Object.values(DataType).includes(newType)) {\r\n            this.props.changeType(newType);\r\n        }\r\n    }\r\n\r\n    changeName(changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.recordField(\"name\", changeEvent);\r\n        if (this.props.changeName) this.props.changeName();\r\n    }\r\n\r\n    setDisplayDescriptionModal(show: boolean): void {\r\n        this.setState({\r\n            isDescriptionModalShow: show,\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Accordion>\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Row>\r\n                            <Col lg={3}>\r\n                                <InputGroup>\r\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"add-tooltip\"> Required </Tooltip>}>\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Checkbox\r\n                                                checked={this.state.currentField.required}\r\n                                                disabled={this.state.isRequiredFieldReadonly}\r\n                                                onChange={this.recordField.bind(this, \"required\")}\r\n                                            />\r\n                                        </InputGroup.Prepend>\r\n                                    </OverlayTrigger>\r\n\r\n                                    <Form.Control\r\n                                        placeholder=\"items\"\r\n                                        readOnly={this.state.isNameFieldReadonly}\r\n                                        value={this.state.currentField.name}\r\n                                        onChange={this.changeName.bind(this)}\r\n                                    />\r\n                                </InputGroup>\r\n                            </Col>\r\n                            <Col lg={1}>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    custom\r\n                                    placeholder=\"DataType\"\r\n                                    onChange={this.changeType.bind(this)}\r\n                                    value={this.state.currentField.type}\r\n                                >\r\n                                    <option value={DataType.Object}>Object</option>\r\n                                    <option value={DataType.Array}>Array</option>\r\n                                    <option value={DataType.String}>String</option>\r\n                                    <option value={DataType.Integer}>Integer</option>\r\n                                    <option value={DataType.Number}>Number</option>\r\n                                    <option value={DataType.Null}>Null</option>\r\n                                    <option value={DataType.Boolean}>Boolean</option>\r\n                                </Form.Control>\r\n                            </Col>\r\n                            <Col lg={4}>\r\n                                <Form.Control\r\n                                    placeholder=\"Titile\"\r\n                                    value={this.state.currentField.title}\r\n                                    onChange={this.recordField.bind(this, \"title\")}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={4}>\r\n                                <InputGroup>\r\n                                    <FormControl\r\n                                        type=\"text\"\r\n                                        id=\"Description\"\r\n                                        placeholder=\"Description\"\r\n                                        value={this.state.currentField.description}\r\n                                        onChange={this.recordField.bind(this, \"description\")}\r\n                                    />\r\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"add-tooltip\"> Edit </Tooltip>}>\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-primary\" onClick={this.setDisplayDescriptionModal.bind(this, true)}>\r\n                                                <TiPencil />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </OverlayTrigger>\r\n                                </InputGroup>\r\n\r\n                                <Modal\r\n                                    onHide={this.setDisplayDescriptionModal.bind(this, false)}\r\n                                    show={this.state.isDescriptionModalShow}\r\n                                    size=\"lg\"\r\n                                    aria-labelledby=\"description-modal\"\r\n                                    centered\r\n                                >\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title id=\"description-modal\">Description</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <Form.Group>\r\n                                            <Form.Control\r\n                                                as=\"textarea\"\r\n                                                rows={3}\r\n                                                value={this.state.currentField.description}\r\n                                                onChange={this.recordField.bind(this, \"description\")}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Modal.Body>\r\n                                </Modal>\r\n                            </Col>\r\n                            <Col lg={12} style={{ paddingTop: \"5px\" }}>\r\n                                <Accordion.Collapse eventKey=\"0\">\r\n                                    <Form.Control\r\n                                        placeholder=\"$comment\"\r\n                                        value={this.state.currentField.$comment}\r\n                                        onChange={this.recordField.bind(this, \"$comment\")}\r\n                                    />\r\n                                </Accordion.Collapse>\r\n                            </Col>\r\n                        </Form.Row>\r\n                    </Col>\r\n                    <Col lg=\"auto\" style={{ cursor: \"pointer\" }}>\r\n                        <Accordion.Toggle eventKey=\"0\" as=\"span\" className=\"node-option-block\">\r\n                            <AiOutlineDown color=\"blue\" />\r\n                        </Accordion.Toggle>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Accordion>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GenericField;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\n\r\nimport { EmptyState } from \"../type_component\";\r\nimport { type_Hints } from \"./type_NodeComponent\";\r\n\r\ntype IHintTextProps = { hint?: type_Hints };\r\n\r\nclass HintText extends React.Component<IHintTextProps, EmptyState> {\r\n    renderHint(): JSX.Element[] {\r\n        const r: JSX.Element[] = [];\r\n\r\n        if (this.props.hint) {\r\n            let key: keyof type_Hints;\r\n\r\n            for (key in this.props.hint) {\r\n                if (this.props.hint[key] !== undefined) {\r\n                    switch (key) {\r\n                        case \"info\":\r\n                            r.push(\r\n                                <span style={{ color: \"green\" }}>\r\n                                    <b>Hint: </b>\r\n                                    {this.props.hint[key]}\r\n                                </span>\r\n                            );\r\n                            r.push(<br />);\r\n                            break;\r\n                        case \"warn\":\r\n                            r.push(\r\n                                <span style={{ color: \"orange\" }}>\r\n                                    <b>Warning: </b>\r\n                                    {this.props.hint[key]}\r\n                                </span>\r\n                            );\r\n                            r.push(<br />);\r\n                            break;\r\n                        case \"error\":\r\n                            r.push(\r\n                                <span style={{ color: \"red\" }}>\r\n                                    <b>{`Error: ${this.props.hint[key]}`}</b>\r\n                                </span>\r\n                            );\r\n                            r.push(<br />);\r\n                            break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return r;\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        if (this.props.hint) {\r\n            return <>{this.renderHint()}</>;\r\n        } else {\r\n            return <></>;\r\n        }\r\n    }\r\n}\r\n\r\nexport default HintText;\r\n","import \"../../index.css\";\r\n\r\nimport React from \"react\";\r\nimport { Dropdown, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AiOutlineSetting } from \"react-icons/ai\";\r\nimport { FaPlus, FaRegTrashAlt } from \"react-icons/fa\";\r\n\r\nimport { NextId } from \"../../model/utility\";\r\nimport { IOptionsButtonsAttr } from \"./type_NodeComponent\";\r\n\r\ninterface INodeOptionsButtonsProps {\r\n    buttonOptions: IOptionsButtonsAttr;\r\n\r\n    showOptionModal(): void;\r\n\r\n    addChild?(): void;\r\n    addSibling?(): void;\r\n    delete?(): void;\r\n}\r\n\r\ninterface ToggleAddButtonProps {\r\n    id: string;\r\n    onClick(event: React.MouseEvent<HTMLSpanElement>): void;\r\n}\r\n\r\nconst ToggleAddButton = React.forwardRef<HTMLSpanElement, ToggleAddButtonProps>((props: ToggleAddButtonProps, ref) => (\r\n    <span ref={ref} id={props.id} onClick={props.onClick}>\r\n        <FaPlus color=\"green\" />\r\n    </span>\r\n));\r\n\r\n// to make eslint happy\r\nToggleAddButton.displayName = \"ToggleAddButton\";\r\n\r\nfunction NodeOptionsButtons(props: INodeOptionsButtonsProps): JSX.Element {\r\n    if (props.buttonOptions.hasChild && !props.addChild)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.hasChild = true, without addChild()\");\r\n    else if (props.buttonOptions.hasSibling && !props.addSibling)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.hasSibling = true, without addSibling()\");\r\n    else if (props.buttonOptions.isDeleteable && !props.delete)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.isDeleteable = true, without delete()\");\r\n\r\n    const addHtmlDropId = NextId.next(\"Key\").toString();\r\n    const addToolTipId = NextId.next(\"Key\").toString();\r\n\r\n    return (\r\n        <div className=\"node-option-block\">\r\n            {props.buttonOptions.hasChild && props.buttonOptions.hasSibling && (\r\n                <div className=\"node-option-btn-block\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle as={ToggleAddButton} id={addHtmlDropId} />\r\n\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item href=\"#\" eventKey=\"1\" onClick={props.addSibling}>\r\n                                Add Sibling\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item href=\"#\" eventKey=\"2\" onClick={props.addChild}>\r\n                                Add Child\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.hasChild !== props.buttonOptions.hasSibling && (\r\n                <div className=\"node-option-btn-block\" onClick={props.buttonOptions.hasChild ? props.addChild : props.addSibling}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id={addToolTipId}> Add </Tooltip>}>\r\n                        <span>\r\n                            <FaPlus color=\"green\" />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.isDeleteable && (\r\n                <div className=\"node-option-btn-block\" onClick={props.delete}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"delete-tooltip\"> Delete </Tooltip>}>\r\n                        <span>\r\n                            <FaRegTrashAlt color=\"red\" />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.isOptionExist && (\r\n                <div className=\"node-option-btn-block\" onClick={props.showOptionModal}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"option-tooltip\"> Option </Tooltip>}>\r\n                        <span>\r\n                            <AiOutlineSetting />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NodeOptionsButtons;\r\n","import React from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\n\r\nfunction SpaceFront(props: { depth: number }): JSX.Element {\r\n    return <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (props.depth * 15).toString() + \"px\" }} />;\r\n}\r\n\r\nexport default SpaceFront;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\n\r\nimport { IChildrenSchemaType } from \"../../model/schema/type_schema\";\r\nimport { NextId, getOrDefault } from \"../../model/utility\";\r\nimport { DataType, PartialBy } from \"../../type\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport { type_Hints } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditorFactory from \"./SchemaEditorFactory\";\r\nimport { IChildProperty, IChildrenEditorProps, INewChildEditorProps, ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ninterface ChildrenNodesState {\r\n    children: Array<IChildProperty>;\r\n\r\n    hint?: type_Hints;\r\n}\r\n\r\nclass ChildrenSchemaEditor extends React.Component<IChildrenEditorProps, ChildrenNodesState> {\r\n    constructor(props: IChildrenEditorProps) {\r\n        super(props);\r\n\r\n        const children: IChildProperty[] = getOrDefault(props.childrenProperty, []);\r\n\r\n        this.state = {\r\n            children,\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.props.childrenDidUpdate) this.props.childrenDidUpdate(this.state.children);\r\n        this.checkDuplicateChildrenName();\r\n    }\r\n\r\n    componentDidUpdate(): void {\r\n        if (this.props.childrenDidUpdate) this.props.childrenDidUpdate(this.state.children);\r\n        this.checkDuplicateChildrenName();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.state.children.length;\r\n    }\r\n\r\n    exportSchema(): IChildrenSchemaType {\r\n        if (this.state.hint?.error) throw new Error(this.state.hint.error);\r\n\r\n        return this.state.children.map(child => {\r\n            const c: ISchemaEditorType = child.ref.current as ISchemaEditorType;\r\n            return {\r\n                name: c.getField().name,\r\n                value: c.exportSchema(),\r\n                required: c.getField().required,\r\n            };\r\n        });\r\n    }\r\n\r\n    add(selfId?: string, props?: INewChildEditorProps): void {\r\n        const originChildren = this.state.children;\r\n        let currentIndex;\r\n\r\n        let p: PartialBy<Required<INewChildEditorProps>, \"field\"> = {\r\n            type: DataType.Object,\r\n            isDeleteable: true,\r\n            hasSibling: true,\r\n            isRequiredFieldReadonly: false,\r\n            isNameFieldReadonly: false,\r\n        };\r\n\r\n        if (props) {\r\n            p = {\r\n                ...p,\r\n                ...props,\r\n            };\r\n        }\r\n\r\n        if (selfId === undefined || selfId === \"\") {\r\n            // push to the last one\r\n            currentIndex = originChildren.length + 1;\r\n        } else {\r\n            // Add after a node\r\n            currentIndex = originChildren.findIndex(child => child.selfId === selfId);\r\n        }\r\n\r\n        originChildren.splice(currentIndex + 1, 0, {\r\n            selfId: NextId.next(\"child\").toString(),\r\n\r\n            // hasSibling, isDeletable, isRequiredFieldReadonly, isNameFieldReadonly, field\r\n            ...p,\r\n\r\n            ref: React.createRef<ISchemaEditorType>(),\r\n        });\r\n\r\n        this.setState({ children: originChildren });\r\n    }\r\n\r\n    delete(selfId: string): void {\r\n        const originChildren = this.state.children;\r\n        const currentIndex = originChildren.findIndex(child => child.selfId === selfId);\r\n\r\n        originChildren.splice(currentIndex, 1);\r\n\r\n        this.setState({ children: originChildren });\r\n    }\r\n\r\n    checkDuplicateChildrenName(): void {\r\n        const findDuplicate = this.findNameDuplicate();\r\n\r\n        if (findDuplicate) {\r\n            this.updateHint(\"error\", \"Find duplicated field name.\");\r\n        } else {\r\n            this.updateHint(\"error\");\r\n        }\r\n    }\r\n\r\n    changeType(selfId: string, type: DataType): void {\r\n        this.setState(prevState => {\r\n            const children = prevState.children.map(child => {\r\n                if (child.selfId === selfId) {\r\n                    return {\r\n                        ...child,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n                        type,\r\n                    };\r\n                } else {\r\n                    return child;\r\n                }\r\n            });\r\n\r\n            return {\r\n                children,\r\n            };\r\n        });\r\n    }\r\n\r\n    findNameDuplicate(): boolean {\r\n        if (this.props.isNameUnique) {\r\n            // Since state may not updated alreday, use schema instead.\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const nameList = this.state.children.map(child => child.ref.current!.schema.getCurrentField().name);\r\n\r\n            return new Set(nameList).size !== nameList.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    updateHint(hintType: keyof type_Hints, value?: string): void {\r\n        // clear value\r\n        if (value === undefined) {\r\n            if (this.state.hint && this.state.hint[hintType]) {\r\n                this.setState(prevState => ({\r\n                    hint: {\r\n                        ...prevState.hint,\r\n                        [hintType]: value,\r\n                    },\r\n                }));\r\n            }\r\n        } else {\r\n            // set value\r\n            if (!this.state.hint || !this.state.hint[hintType]) {\r\n                this.setState(prevState => ({\r\n                    hint: {\r\n                        ...prevState.hint,\r\n                        [hintType]: value,\r\n                    },\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <HintText hint={this.state.hint} />\r\n                {this.state.children.map(child => (\r\n                    <SchemaEditorFactory\r\n                        key={child.selfId}\r\n                        depth={this.props.depth + 1}\r\n                        {...child}\r\n                        delete={this.delete.bind(this, child.selfId)}\r\n                        addSibling={this.add.bind(this, child.selfId)}\r\n                        changeType={this.changeType.bind(this, child.selfId)}\r\n                        changeName={this.checkDuplicateChildrenName.bind(this)}\r\n                    />\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChildrenSchemaEditor;\r\n","import React from \"react\";\r\n\r\nimport Schema from \"../../model/schema/Schema\";\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr, OmitGenericField, type_Hints } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport { ISchemaEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nabstract class SchemaEditor<SchemaType extends ISchemaType, FieldType extends ISchemaEditorField> extends React.Component<\r\n    ISchemaEditorProps<SchemaType>,\r\n    ISchemaEditorState<FieldType>\r\n> {\r\n    protected abstract optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected abstract genericFieldOptions: IGenericFieldOptions;\r\n    public abstract schema: Schema<SchemaType, FieldType>;\r\n\r\n    // may not have options button in the child class\r\n    protected optionModalRef?: React.RefObject<EditorOptionModal>;\r\n\r\n    protected abstract genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    // may not have children in the child class\r\n    protected childrenRef?: React.RefObject<ChildrenSchemaEditor>;\r\n\r\n    abstract exportSchema(): ISchemaType;\r\n\r\n    addChild(): void {\r\n        if (this.childrenRef && this.childrenRef.current) this.childrenRef.current.add();\r\n    }\r\n\r\n    addSibling(): void {\r\n        if (this.props.addSibling) this.props.addSibling();\r\n    }\r\n\r\n    delete(): void {\r\n        if (this.props.delete) this.props.delete();\r\n    }\r\n\r\n    getField(): Required<FieldType> {\r\n        return this.schema.getCurrentField();\r\n    }\r\n\r\n    recordField(fieldName: keyof OmitGenericField<FieldType>, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentField = this.schema.recordField(fieldName, changeEvent);\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    showOptionModal(): void {\r\n        if (this.optionModalRef && this.optionModalRef.current) this.optionModalRef.current.setDisplayOptionModal(true);\r\n    }\r\n\r\n    clearOptionField(): void {\r\n        const currentField = this.schema.clearOptionField();\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    resetOptionField(): void {\r\n        const currentField = this.schema.resetOptionField();\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    updateHint(hintType: keyof type_Hints, value?: string): void {\r\n        this.setState(prevState => ({\r\n            hint: {\r\n                ...prevState.hint,\r\n                [hintType]: value,\r\n            },\r\n        }));\r\n    }\r\n}\r\n\r\nexport default SchemaEditor;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport ArraySchema from \"../../model/schema/ArraySchema\";\r\nimport { IArraySchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IArrayEditorField, IChildProperty, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass ArraySchemaEditor extends SchemaEditor<IArraySchemaType, IArrayEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: ArraySchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    protected childrenRef: React.RefObject<ChildrenSchemaEditor>;\r\n\r\n    private childrenLength: number;\r\n\r\n    constructor(props: ISchemaEditorProps<IArraySchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.childrenRef = React.createRef<ChildrenSchemaEditor>();\r\n\r\n        this.schema = new ArraySchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: true,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.childrenLength = 0;\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (!this.props.schema) this.addChild();\r\n        if (this.state.currentField.maxItems < this.state.currentField.minItems) {\r\n            this.updateHint(\"warn\", \"minItems > maxItems\");\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IArraySchemaType>, prevState: ISchemaEditorState<IArrayEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.maxItems !== this.state.currentField.maxItems &&\r\n                !(isNaN(prevState.currentField.maxItems) && isNaN(this.state.currentField.maxItems))) ||\r\n            (prevState.currentField.minItems !== this.state.currentField.minItems &&\r\n                !(isNaN(prevState.currentField.minItems) && isNaN(this.state.currentField.minItems)))\r\n        ) {\r\n            if (this.state.currentField.maxItems < this.state.currentField.minItems) {\r\n                this.updateHint(\"warn\", \"minItems > maxItems\");\r\n            } else {\r\n                this.updateHint(\"warn\", undefined);\r\n            }\r\n        }\r\n    }\r\n\r\n    childrenDidUpdate(children: IChildProperty[]): void {\r\n        if (this.childrenLength !== children.length) {\r\n            if (children.length > 1) {\r\n                this.updateHint(\"info\", \"Ordinal index of each item under Array type is meaningful.\");\r\n            } else {\r\n                this.updateHint(\"info\");\r\n            }\r\n\r\n            this.childrenLength = children.length;\r\n        }\r\n    }\r\n\r\n    addChild(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this.childrenRef.current!.add(\"\", {\r\n            type: DataType.Object,\r\n            isDeleteable: true,\r\n            hasSibling: true,\r\n            isRequiredFieldReadonly: true,\r\n            isNameFieldReadonly: true,\r\n\r\n            field: {\r\n                name: \"items\",\r\n                required: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    exportSchema(): IArraySchemaType {\r\n        return this.schema.exportSchema(\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.childrenRef.current!.exportSchema()\r\n        );\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MinItems\">\r\n                                                Min Items\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinItems\"\r\n                                                    value={this.state.currentField.minItems}\r\n                                                    onChange={this.recordField.bind(this, \"minItems\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MaxItems\">\r\n                                                Max Items\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxItems\"\r\n                                                    value={this.state.currentField.maxItems}\r\n                                                    onChange={this.recordField.bind(this, \"maxItems\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group>\r\n                                            <Form.Check type=\"checkbox\" id=\"uniqueCheckbox\">\r\n                                                <Form.Check.Input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={this.state.currentField.uniqueItems}\r\n                                                    onChange={this.recordField.bind(this, \"uniqueItems\")}\r\n                                                />\r\n                                                <Form.Check.Label>Unique Items</Form.Check.Label>\r\n                                            </Form.Check>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <ChildrenSchemaEditor\r\n                    ref={this.childrenRef}\r\n                    depth={this.props.depth}\r\n                    isNameUnique={false}\r\n                    childrenProperty={this.schema.childrenProperty}\r\n                    childrenDidUpdate={this.childrenDidUpdate.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArraySchemaEditor;\r\n","import { FieldWithoutType, IBooleanEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IBooleanSchemaType, IGenericSchemaType } from \"./type_schema\";\r\n\r\nclass BooleanSchema extends Schema<IBooleanSchemaType, IBooleanEditorField> {\r\n    protected type = DataType.Boolean;\r\n    protected currentField: Required<IBooleanEditorField>;\r\n    protected defaultField: Required<IBooleanEditorField>;\r\n\r\n    constructor(schema?: IBooleanSchemaType, field?: FieldWithoutType<IBooleanEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", undefined, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n    }\r\n\r\n    private isSelectElement(\r\n        event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n    ): event is React.ChangeEvent<HTMLSelectElement> {\r\n        if ((event as React.ChangeEvent<HTMLSelectElement>).target.selectedIndex !== undefined) return true;\r\n        else return false;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public recordField(\r\n        fieldName: keyof IBooleanEditorField,\r\n        changeEvent: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n    ): Required<IBooleanEditorField> {\r\n        if (this.isSelectElement(changeEvent) && fieldName === \"default\") {\r\n            this.currentField[fieldName] = changeEvent.target.value.toLowerCase() === \"true\" ? true : false;\r\n        } else if (!this.isSelectElement(changeEvent)) {\r\n            Schema.prototype.recordField.call(this, fieldName, changeEvent);\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IBooleanEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IBooleanEditorField> {\r\n        this.currentField.default = (undefined as unknown) as boolean;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IBooleanSchemaType {\r\n        const type = DataType.Boolean;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", (undefined as unknown) as boolean);\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...defaultValue,\r\n        };\r\n    }\r\n}\r\n\r\nexport default BooleanSchema;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport BooleanSchema from \"../../model/schema/BooleanSchema\";\r\nimport { IBooleanSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IBooleanEditorField, ISchemaEditorProps } from \"./type_SchemaEditor\";\r\n\r\nclass BooleanSchemaEditor extends SchemaEditor<IBooleanSchemaType, IBooleanEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: BooleanSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<IBooleanSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new BooleanSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    exportSchema(): IBooleanSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"auto\" htmlFor=\"default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg={4}>\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    custom\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                    value={\r\n                                                        this.state.currentField.default === undefined\r\n                                                            ? \"undefined\"\r\n                                                            : this.state.currentField.default.toString()\r\n                                                    }\r\n                                                >\r\n                                                    <option\r\n                                                        disabled\r\n                                                        hidden\r\n                                                        selected={this.state.currentField.default === undefined ? true : false}\r\n                                                        value=\"undefined\"\r\n                                                    >\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    <option value={\"true\"}>True</option>\r\n                                                    <option value={\"false\"}>False</option>\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BooleanSchemaEditor;\r\n","import { FieldWithoutType, IIntegerEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, XOR_Partial } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, IIntegerSchemaType, ISchemaTypeEnummable } from \"./type_schema\";\r\n\r\nclass IntegerSchema extends Schema<IIntegerSchemaType, IIntegerEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.Integer;\r\n    protected currentField: Required<IIntegerEditorField>;\r\n    protected defaultField: Required<IIntegerEditorField>;\r\n\r\n    constructor(schema?: IIntegerSchemaType, field?: FieldWithoutType<IIntegerEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        let min: number, max: number;\r\n        let ex_min: boolean, ex_max: boolean;\r\n\r\n        if (schema) {\r\n            if (schema.minimum) {\r\n                min = schema.minimum;\r\n                ex_min = false;\r\n            } else if (schema.exclusiveMinimum) {\r\n                min = schema.exclusiveMinimum;\r\n                ex_min = true;\r\n            } else {\r\n                min = NaN;\r\n                ex_min = false;\r\n            }\r\n\r\n            if (schema.maximum) {\r\n                max = schema.maximum;\r\n                ex_max = false;\r\n            } else if (schema.exclusiveMaximum) {\r\n                max = schema.exclusiveMaximum;\r\n                ex_max = true;\r\n            } else {\r\n                max = NaN;\r\n                ex_max = false;\r\n            }\r\n        } else {\r\n            min = max = NaN;\r\n            ex_min = ex_max = false;\r\n        }\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", NaN, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", NaN, schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            multipleOf: this.retrieveDefaultOptionValue(\"multipleOf\", NaN, schema),\r\n\r\n            minimum: min,\r\n            maximum: max,\r\n            exclusiveMinimum: ex_min,\r\n            exclusiveMaximum: ex_max,\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(NaN);\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = parseInt(changeEvent.target.value);\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IIntegerEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minimum = this.defaultField.minimum;\r\n        this.currentField.maximum = this.defaultField.maximum;\r\n        this.currentField.exclusiveMinimum = this.defaultField.exclusiveMinimum;\r\n        this.currentField.exclusiveMaximum = this.defaultField.exclusiveMaximum;\r\n        this.currentField.multipleOf = this.defaultField.multipleOf;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IIntegerEditorField> {\r\n        this.currentField.default = NaN;\r\n        this.currentField.const = NaN;\r\n        this.currentField.enum = [];\r\n        this.currentField.minimum = NaN;\r\n        this.currentField.maximum = NaN;\r\n        this.currentField.exclusiveMinimum = false;\r\n        this.currentField.exclusiveMaximum = false;\r\n        this.currentField.multipleOf = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IIntegerSchemaType {\r\n        const type = DataType.Integer;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => !isNaN(e));\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", NaN);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", NaN);\r\n        const multipleOf = this.exportSchemaWithoutUndefined(\"multipleOf\", NaN);\r\n\r\n        let min: XOR_Partial<{ exclusiveMinimum: number }, { minimum: number }> = {};\r\n        let max: XOR_Partial<{ exclusiveMaximum: number }, { maximum: number }> = {};\r\n\r\n        if (!isNaN(this.currentField.minimum)) {\r\n            if (this.currentField.exclusiveMinimum) {\r\n                min = { exclusiveMinimum: this.currentField.minimum };\r\n            } else {\r\n                min = { minimum: this.currentField.minimum };\r\n            }\r\n        }\r\n\r\n        if (!isNaN(this.currentField.maximum)) {\r\n            if (this.currentField.exclusiveMaximum) {\r\n                max = { exclusiveMaximum: this.currentField.maximum };\r\n            } else {\r\n                max = { maximum: this.currentField.maximum };\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...min,\r\n            ...max,\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...multipleOf,\r\n            ...enn,\r\n        };\r\n    }\r\n}\r\n\r\nexport default IntegerSchema;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Button, Col, Form, FormControl, InputGroup, Row } from \"react-bootstrap\";\r\nimport { FaMinus, FaPlus } from \"react-icons/fa\";\r\n\r\nimport { EmptyState } from \"../type_component\";\r\n\r\ninterface EnumFieldProps<T> {\r\n    type: \"number\" | \"text\";\r\n\r\n    value: T[];\r\n    width: number;\r\n    add(): void;\r\n    update(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void;\r\n    delete(index: number): void;\r\n}\r\n\r\nclass EnumField<T extends string | number> extends React.Component<EnumFieldProps<T>, EmptyState> {\r\n    render(): JSX.Element {\r\n        return (\r\n            <Form.Group>\r\n                {this.props.value.length > 0 ? (\r\n                    this.props.value.map((enumeration, index: number) => (\r\n                        <Form.Group as={Row} key={index}>\r\n                            <Form.Label column lg=\"2\">\r\n                                {index === 0 ? \"Enum\" : \"\"}\r\n                            </Form.Label>\r\n                            <Col lg={this.props.width}>\r\n                                {index === this.props.value.length - 1 ? (\r\n                                    <InputGroup>\r\n                                        <FormControl\r\n                                            type={this.props.type}\r\n                                            id={index.toString()}\r\n                                            onChange={this.props.update.bind(this, index)}\r\n                                            value={enumeration}\r\n                                        />\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-danger\" onClick={this.props.delete.bind(this, index)}>\r\n                                                <FaMinus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-success\" onClick={this.props.add}>\r\n                                                <FaPlus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </InputGroup>\r\n                                ) : (\r\n                                    <InputGroup>\r\n                                        <FormControl\r\n                                            type={this.props.type}\r\n                                            id={index.toString()}\r\n                                            onChange={this.props.update.bind(this, index)}\r\n                                            value={enumeration}\r\n                                        />\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-danger\" onClick={this.props.delete.bind(this, index)}>\r\n                                                <FaMinus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </InputGroup>\r\n                                )}\r\n                            </Col>\r\n                        </Form.Group>\r\n                    ))\r\n                ) : (\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label column lg=\"2\">\r\n                            Enum\r\n                        </Form.Label>\r\n                        <Col lg=\"10\">\r\n                            <Row>\r\n                                <Col lg=\"12\">\r\n                                    <Button variant=\"outline-success\" onClick={this.props.add.bind(this)}>\r\n                                        <FaPlus color=\"green\" />\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Form.Group>\r\n                )}\r\n            </Form.Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnumField;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport IntegerSchema from \"../../model/schema/IntegerSchema\";\r\nimport { IIntegerSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IIntegerEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass IntegerSchemaEditor extends SchemaEditor<IIntegerSchemaType, IIntegerEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: IntegerSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<IIntegerSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new IntegerSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minimum > this.state.currentField.maximum) this.updateHint(\"warn\", \"Min Value > Max Value\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IIntegerSchemaType>, prevState: ISchemaEditorState<IIntegerEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minimum !== this.state.currentField.minimum &&\r\n                !(isNaN(prevState.currentField.minimum) && isNaN(this.state.currentField.minimum))) ||\r\n            (prevState.currentField.maximum !== this.state.currentField.maximum &&\r\n                !(isNaN(prevState.currentField.maximum) && isNaN(this.state.currentField.maximum)))\r\n        ) {\r\n            if (this.state.currentField.maximum < this.state.currentField.minimum) {\r\n                this.updateHint(\"warn\", \"Min Value > Max Value\");\r\n            } else {\r\n                this.updateHint(\"warn\", undefined);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IIntegerSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row} controlId=\"MinValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Min Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.minimum}\r\n                                                    onChange={this.recordField.bind(this, \"minimum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMin\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                                                    checked={this.state.currentField.exclusiveMinimum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"MaxValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Max Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.maximum}\r\n                                                    onChange={this.recordField.bind(this, \"maximum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMax\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMaximum\")}\r\n                                                    checked={this.state.currentField.exclusiveMaximum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                                                Multiple Of\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"MultipleOf\"\r\n                                                    value={this.state.currentField.multipleOf}\r\n                                                    onChange={this.recordField.bind(this, \"multipleOf\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"const\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            width={4}\r\n                                            type=\"number\"\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IntegerSchemaEditor;\r\n","import { FieldWithoutType, INullEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, INullSchemaType } from \"./type_schema\";\r\n\r\nclass NullSchema extends Schema<INullSchemaType, INullEditorField> {\r\n    protected type = DataType.Null;\r\n    protected currentField: Required<INullEditorField>;\r\n    protected defaultField: Required<INullEditorField>;\r\n\r\n    constructor(schema?: INullSchemaType, field?: FieldWithoutType<INullEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = { ...genericField };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<INullEditorField> {\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<INullEditorField> {\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): INullSchemaType {\r\n        const type = DataType.Null;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n        };\r\n    }\r\n}\r\n\r\nexport default NullSchema;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport NullSchema from \"../../model/schema/NullSchema\";\r\nimport { INullSchemaType } from \"../../model/schema/type_schema\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { INullEditorField, ISchemaEditorProps } from \"./type_SchemaEditor\";\r\n\r\nclass NullSchemaEditor extends SchemaEditor<INullSchemaType, INullEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: NullSchema;\r\n\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<INullSchemaType>) {\r\n        super(props);\r\n\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new NullSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: false,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    exportSchema(): INullSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NullSchemaEditor;\r\n","import { FieldWithoutType, INumberEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, XOR_Partial } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, INumberSchemaType, ISchemaTypeEnummable } from \"./type_schema\";\r\n\r\nclass NumberSchema extends Schema<INumberSchemaType, INumberEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.Number;\r\n    protected currentField: Required<INumberEditorField>;\r\n    protected defaultField: Required<INumberEditorField>;\r\n\r\n    constructor(schema?: INumberSchemaType, field?: FieldWithoutType<INumberEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        let min: number, max: number;\r\n        let ex_min: boolean, ex_max: boolean;\r\n\r\n        if (schema) {\r\n            if (schema.minimum) {\r\n                min = schema.minimum;\r\n                ex_min = false;\r\n            } else if (schema.exclusiveMinimum) {\r\n                min = schema.exclusiveMinimum;\r\n                ex_min = true;\r\n            } else {\r\n                min = NaN;\r\n                ex_min = false;\r\n            }\r\n\r\n            if (schema.maximum) {\r\n                max = schema.maximum;\r\n                ex_max = false;\r\n            } else if (schema.exclusiveMaximum) {\r\n                max = schema.exclusiveMaximum;\r\n                ex_max = true;\r\n            } else {\r\n                max = NaN;\r\n                ex_max = false;\r\n            }\r\n        } else {\r\n            min = max = NaN;\r\n            ex_min = ex_max = false;\r\n        }\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", NaN, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", NaN, schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            multipleOf: this.retrieveDefaultOptionValue(\"multipleOf\", NaN, schema),\r\n\r\n            minimum: min,\r\n            maximum: max,\r\n            exclusiveMinimum: ex_min,\r\n            exclusiveMaximum: ex_max,\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public recordField(\r\n        fieldName: keyof INumberEditorField,\r\n        changeEvent: React.ChangeEvent<HTMLInputElement>\r\n    ): Required<INumberEditorField> {\r\n        if (fieldName === \"$comment\" || fieldName === \"description\" || fieldName === \"name\" || fieldName === \"title\") {\r\n            this.currentField[fieldName] = changeEvent.target.value;\r\n        } else if (\r\n            fieldName === \"const\" ||\r\n            fieldName === \"default\" ||\r\n            fieldName === \"maximum\" ||\r\n            fieldName === \"minimum\" ||\r\n            fieldName === \"multipleOf\"\r\n        ) {\r\n            this.currentField[fieldName] = parseFloat(changeEvent.target.value);\r\n        } else if (fieldName === \"exclusiveMaximum\" || fieldName === \"exclusiveMinimum\" || fieldName === \"required\") {\r\n            this.currentField[fieldName] = changeEvent.target.checked;\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(NaN);\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = parseFloat(changeEvent.target.value);\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<INumberEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minimum = this.defaultField.minimum;\r\n        this.currentField.maximum = this.defaultField.maximum;\r\n        this.currentField.exclusiveMinimum = this.defaultField.exclusiveMinimum;\r\n        this.currentField.exclusiveMaximum = this.defaultField.exclusiveMaximum;\r\n        this.currentField.multipleOf = this.defaultField.multipleOf;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<INumberEditorField> {\r\n        this.currentField.default = NaN;\r\n        this.currentField.const = NaN;\r\n        this.currentField.enum = [];\r\n        this.currentField.minimum = NaN;\r\n        this.currentField.maximum = NaN;\r\n        this.currentField.exclusiveMinimum = false;\r\n        this.currentField.exclusiveMaximum = false;\r\n        this.currentField.multipleOf = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): INumberSchemaType {\r\n        const type = DataType.Number;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => !isNaN(e));\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", NaN);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", NaN);\r\n        const multipleOf = this.exportSchemaWithoutUndefined(\"multipleOf\", NaN);\r\n\r\n        let min: XOR_Partial<{ exclusiveMinimum: number }, { minimum: number }> = {};\r\n        let max: XOR_Partial<{ exclusiveMaximum: number }, { maximum: number }> = {};\r\n\r\n        if (!isNaN(this.currentField.minimum)) {\r\n            if (this.currentField.exclusiveMinimum) {\r\n                min = { exclusiveMinimum: this.currentField.minimum };\r\n            } else {\r\n                min = { minimum: this.currentField.minimum };\r\n            }\r\n        }\r\n\r\n        if (!isNaN(this.currentField.maximum)) {\r\n            if (this.currentField.exclusiveMaximum) {\r\n                max = { exclusiveMaximum: this.currentField.maximum };\r\n            } else {\r\n                max = { maximum: this.currentField.maximum };\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...min,\r\n            ...max,\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...multipleOf,\r\n            ...enn,\r\n        };\r\n    }\r\n}\r\n\r\nexport default NumberSchema;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport NumberSchema from \"../../model/schema/NumberSchema\";\r\nimport { INumberSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { INumberEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass NumberSchemaEditor extends SchemaEditor<INumberSchemaType, INumberEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: NumberSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<INumberSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new NumberSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minimum > this.state.currentField.maximum) this.updateHint(\"warn\", \"Min Value > Max Value\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<INumberSchemaType>, prevState: ISchemaEditorState<INumberEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minimum !== this.state.currentField.minimum &&\r\n                !(isNaN(prevState.currentField.minimum) && isNaN(this.state.currentField.minimum))) ||\r\n            (prevState.currentField.maximum !== this.state.currentField.maximum &&\r\n                !(isNaN(prevState.currentField.maximum) && isNaN(this.state.currentField.maximum)))\r\n        ) {\r\n            if (this.state.currentField.maximum < this.state.currentField.minimum) {\r\n                this.updateHint(\"warn\", \"Min Value > Max Value\");\r\n            } else {\r\n                this.updateHint(\"warn\", undefined);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): INumberSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row} controlId=\"MinValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Min Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.minimum}\r\n                                                    onChange={this.recordField.bind(this, \"minimum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMin\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                                                    checked={this.state.currentField.exclusiveMinimum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"MaxValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Max Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.maximum}\r\n                                                    onChange={this.recordField.bind(this, \"maximum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMax\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMaximum\")}\r\n                                                    checked={this.state.currentField.exclusiveMaximum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                                                Multiple Of\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"MultipleOf\"\r\n                                                    value={this.state.currentField.multipleOf}\r\n                                                    onChange={this.recordField.bind(this, \"multipleOf\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"const\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            type=\"number\"\r\n                                            width={4}\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberSchemaEditor;\r\n","import React from \"react\";\r\n\r\nimport { FieldWithoutType, IChildProperty, IObjectEditorField, ISchemaEditorType } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue, NextId } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IChildrenSchemaType, IObjectSchemaType } from \"./type_schema\";\r\n\r\nclass ObjectSchema extends Schema<IObjectSchemaType, IObjectEditorField> {\r\n    protected type = DataType.Object;\r\n    protected currentField: Required<IObjectEditorField>;\r\n    protected defaultField: Required<IObjectEditorField>;\r\n    public readonly childrenProperty?: IChildProperty[];\r\n\r\n    constructor(schema?: IObjectSchemaType, field?: FieldWithoutType<IObjectEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n            maxProperties: this.retrieveDefaultOptionValue(\"maxProperties\", NaN, schema),\r\n            minProperties: this.retrieveDefaultOptionValue(\"minProperties\", NaN, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n\r\n        if (schema) this.childrenProperty = this.generateChildrenPropertyFromSchema(schema);\r\n    }\r\n\r\n    generateChildrenPropertyFromSchema(schema: IObjectSchemaType): IChildProperty[] {\r\n        return Object.keys(schema.properties).map(field => {\r\n            return {\r\n                type: schema.properties[field].type,\r\n                selfId: NextId.next(\"child\").toString(),\r\n\r\n                hasSibling: true,\r\n                isDeleteable: true,\r\n                isRequiredFieldReadonly: false,\r\n                isNameFieldReadonly: false,\r\n\r\n                ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                field: {\r\n                    name: field,\r\n                    required: schema.required.find(r => r === field) === undefined ? false : true,\r\n                },\r\n\r\n                schema: schema.properties[field],\r\n            };\r\n        });\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IObjectEditorField> {\r\n        this.currentField.maxProperties = this.defaultField.maxProperties;\r\n        this.currentField.minProperties = this.defaultField.minProperties;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IObjectEditorField> {\r\n        this.currentField.maxProperties = NaN;\r\n        this.currentField.minProperties = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(children?: IChildrenSchemaType): IObjectSchemaType {\r\n        const type = DataType.Object;\r\n\r\n        const genericSchema = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const maxProperties = this.exportSchemaWithoutUndefined(\"maxProperties\", NaN);\r\n        const minProperties = this.exportSchemaWithoutUndefined(\"minProperties\", NaN);\r\n\r\n        const required: IObjectSchemaType[\"required\"] = [];\r\n        const properties: IObjectSchemaType[\"properties\"] = {};\r\n\r\n        if (children) {\r\n            for (const child of children) {\r\n                properties[child.name] = child.value;\r\n\r\n                if (child.required) {\r\n                    required.push(child.name);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...minProperties,\r\n            ...maxProperties,\r\n            required,\r\n            properties,\r\n        };\r\n    }\r\n}\r\n\r\nexport default ObjectSchema;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport ObjectSchema from \"../../model/schema/ObjectSchema\";\r\nimport { IObjectSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IObjectEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass ObjectSchemaEditor extends SchemaEditor<IObjectSchemaType, IObjectEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: ObjectSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    protected childrenRef: React.RefObject<ChildrenSchemaEditor>;\r\n\r\n    constructor(props: ISchemaEditorProps<IObjectSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.childrenRef = React.createRef<ChildrenSchemaEditor>();\r\n\r\n        this.schema = new ObjectSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: true,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.maxProperties < this.state.currentField.minProperties) {\r\n            this.updateHint(\"warn\", \"minProperties > maxProperties\");\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IObjectSchemaType>, prevState: ISchemaEditorState<IObjectEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.maxProperties !== this.state.currentField.maxProperties &&\r\n                !(isNaN(prevState.currentField.maxProperties) && isNaN(this.state.currentField.maxProperties))) ||\r\n            (prevState.currentField.minProperties !== this.state.currentField.minProperties &&\r\n                !(isNaN(prevState.currentField.minProperties) && isNaN(this.state.currentField.minProperties)))\r\n        ) {\r\n            if (this.state.currentField.maxProperties < this.state.currentField.minProperties) {\r\n                this.updateHint(\"warn\", \"minProperties > maxProperties\");\r\n            } else {\r\n                this.updateHint(\"warn\");\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IObjectSchemaType {\r\n        return this.schema.exportSchema(\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.childrenRef.current!.exportSchema()\r\n        );\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"auto\" htmlFor=\"MinProperties\">\r\n                                                Min Properties\r\n                                            </Form.Label>\r\n                                            <Col>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinProperties\"\r\n                                                    value={this.state.currentField.minProperties}\r\n                                                    onChange={this.recordField.bind(this, \"minProperties\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"auto\" htmlFor=\"MaxProperties\">\r\n                                                Max Properties\r\n                                            </Form.Label>\r\n                                            <Col>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxProperties\"\r\n                                                    value={this.state.currentField.maxProperties}\r\n                                                    onChange={this.recordField.bind(this, \"maxProperties\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <ChildrenSchemaEditor\r\n                    ref={this.childrenRef}\r\n                    depth={this.props.depth}\r\n                    isNameUnique={true}\r\n                    childrenProperty={this.schema.childrenProperty}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ObjectSchemaEditor;\r\n","import { FieldWithoutType, IStringEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, ISchemaTypeEnummable, IStringSchemaType } from \"./type_schema\";\r\n\r\nclass StringSchema extends Schema<IStringSchemaType, IStringEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.String;\r\n    protected currentField: Required<IStringEditorField>;\r\n    protected defaultField: Required<IStringEditorField>;\r\n\r\n    constructor(schema?: IStringSchemaType, field?: FieldWithoutType<IStringEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", \"\", schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", \"\", schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            minLength: this.retrieveDefaultOptionValue(\"minLength\", NaN, schema),\r\n            maxLength: this.retrieveDefaultOptionValue(\"maxLength\", NaN, schema),\r\n\r\n            format: this.retrieveDefaultOptionValue(\"format\", \"\" as IStringSchemaType[\"format\"], schema),\r\n            pattern: this.retrieveDefaultOptionValue(\"pattern\", \"\", schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(\"\");\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = changeEvent.target.value;\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IStringEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minLength = this.defaultField.minLength;\r\n        this.currentField.maxLength = this.defaultField.maxLength;\r\n        this.currentField.format = this.defaultField.format;\r\n        this.currentField.pattern = this.defaultField.pattern;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IStringEditorField> {\r\n        this.currentField.default = \"\";\r\n        this.currentField.const = \"\";\r\n        this.currentField.enum = [];\r\n        this.currentField.minLength = NaN;\r\n        this.currentField.maxLength = NaN;\r\n        this.currentField.format = \"\" as Required<IStringEditorField>[\"format\"];\r\n        this.currentField.pattern = \"\";\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IStringSchemaType {\r\n        const type = DataType.String;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => e !== \"\");\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", \"\");\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", \"\");\r\n        const minLength = this.exportSchemaWithoutUndefined(\"minLength\", NaN);\r\n        const maxLength = this.exportSchemaWithoutUndefined(\"maxLength\", NaN);\r\n        const format = this.exportSchemaWithoutUndefined(\"format\", \"\" as Required<IStringEditorField>[\"format\"]);\r\n        const pattern = this.exportSchemaWithoutUndefined(\"pattern\", \"\");\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...minLength,\r\n            ...maxLength,\r\n            ...enn,\r\n\r\n            ...format,\r\n            ...pattern,\r\n        };\r\n    }\r\n}\r\n\r\nexport default StringSchema;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport StringSchema from \"../../model/schema/StringSchema\";\r\nimport { IStringSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { ISchemaEditorProps, ISchemaEditorState, IStringEditorField } from \"./type_SchemaEditor\";\r\n\r\nclass StringSchemaEditor extends SchemaEditor<IStringSchemaType, IStringEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: StringSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<IStringSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new StringSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minLength > this.state.currentField.maxLength) this.updateHint(\"warn\", \"Min Length > Max Length\");\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IStringSchemaType>, prevState: ISchemaEditorState<IStringEditorField>): void {\r\n        console.log(prevState, this.state);\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minLength !== this.state.currentField.minLength &&\r\n                !(isNaN(prevState.currentField.minLength) && isNaN(this.state.currentField.minLength))) ||\r\n            (prevState.currentField.maxLength !== this.state.currentField.maxLength &&\r\n                !(isNaN(prevState.currentField.maxLength) && isNaN(this.state.currentField.maxLength)))\r\n        ) {\r\n            if (this.state.currentField.minLength > this.state.currentField.maxLength) {\r\n                this.updateHint(\"warn\", \"Min Length > Max Length\");\r\n            } else {\r\n                this.updateHint(\"warn\", undefined);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IStringSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText hint={this.state.hint} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                                                Min Length\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinLength\"\r\n                                                    value={this.state.currentField.minLength}\r\n                                                    onChange={this.recordField.bind(this, \"minLength\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MaxLength\">\r\n                                                Max Length\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxLength\"\r\n                                                    value={this.state.currentField.maxLength}\r\n                                                    onChange={this.recordField.bind(this, \"maxLength\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"Format\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Format\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    value={this.state.currentField.format}\r\n                                                    onChange={this.recordField.bind(this, \"format\")}\r\n                                                >\r\n                                                    <option disabled hidden value=\"\">\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    {[\r\n                                                        \"date-time\",\r\n                                                        \"time\",\r\n                                                        \"date\",\r\n                                                        \"email\",\r\n                                                        \"idn-email\",\r\n                                                        \"hostname\",\r\n                                                        \"idn-hostname\",\r\n                                                        \"ipv4\",\r\n                                                        \"ipv6\",\r\n                                                        \"uri\",\r\n                                                        \"uri-reference\",\r\n                                                        \"iri\",\r\n                                                        \"iri-reference\",\r\n                                                        \"uri-template\",\r\n                                                        \"json-pointer\",\r\n                                                        \"relative-json-pointer\",\r\n                                                        \"regex\",\r\n                                                    ].map((v, i) => (\r\n                                                        <option key={i} value={v}>\r\n                                                            {v}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"Pattern\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Pattern\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Regular Expression\"\r\n                                                    value={this.state.currentField.pattern}\r\n                                                    onChange={this.recordField.bind(this, \"pattern\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"const\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            type=\"text\"\r\n                                            width={10}\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StringSchemaEditor;\r\n","/* eslint-disable */\r\n// I think there is some bugs  in either eslint or react to use forwardref\r\nimport React from \"react\";\r\n\r\nimport {\r\n    IArraySchemaType,\r\n    IBooleanSchemaType,\r\n    IIntegerSchemaType,\r\n    INullSchemaType,\r\n    INumberSchemaType,\r\n    IObjectSchemaType,\r\n    ISchemaType,\r\n    IStringSchemaType,\r\n} from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport { IGenericField } from \"../node_component/type_NodeComponent\";\r\nimport ArraySchemaEditor from \"./ArraySchemaEditor\";\r\nimport BooleanSchemaEditor from \"./BooleanSchemaEditor\";\r\nimport IntegerSchemaEditor from \"./IntegerSchemaEditor\";\r\nimport NullSchemaEditor from \"./NullSchemaEditor\";\r\nimport NumberSchemaEditor from \"./NumberSchemaEditor\";\r\nimport ObjectSchemaEditor from \"./ObjectSchemaEditor\";\r\nimport StringSchemaEditor from \"./StringSchemaEditor\";\r\nimport { ISchemaEditorProps, ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ntype FactoryProps = Omit<ISchemaEditorProps<ISchemaType>, \"field\"> & {\r\n    type: DataType;\r\n    field?: Omit<IGenericField, \"type\">;\r\n};\r\n\r\nconst SchemaEditorFactory = React.forwardRef<ISchemaEditorType, FactoryProps>((props, ref) => {\r\n    switch (props.type) {\r\n        case DataType.Array:\r\n            return (\r\n                <ArraySchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IArraySchemaType }}\r\n                    ref={ref as React.RefObject<ArraySchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Boolean:\r\n            return (\r\n                <BooleanSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IBooleanSchemaType }}\r\n                    ref={ref as React.RefObject<BooleanSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Integer:\r\n            return (\r\n                <IntegerSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IIntegerSchemaType }}\r\n                    ref={ref as React.RefObject<IntegerSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Number:\r\n            return (\r\n                <NumberSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as INumberSchemaType }}\r\n                    ref={ref as React.RefObject<NumberSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Null:\r\n            return (\r\n                <NullSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as INullSchemaType }}\r\n                    ref={ref as React.RefObject<NullSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Object:\r\n            return (\r\n                <ObjectSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IObjectSchemaType }}\r\n                    ref={ref as React.RefObject<ObjectSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.String:\r\n            return (\r\n                <StringSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IStringSchemaType }}\r\n                    ref={ref as React.RefObject<StringSchemaEditor>}\r\n                />\r\n            );\r\n    }\r\n});\r\n\r\n// make eslint happy\r\nSchemaEditorFactory.displayName = \"SchemaEditorFactory\";\r\n\r\nexport default SchemaEditorFactory;\r\n","// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\n\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport SchemaEditorFactory from \"./SchemaEditorFactory\";\r\nimport { ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ninterface RootSchemaEditorProps {\r\n    schema?: ISchemaType;\r\n}\r\n\r\nclass RootSchemaEditor extends React.Component<RootSchemaEditorProps, { type: DataType }> {\r\n    private editorRef: React.RefObject<ISchemaEditorType>;\r\n\r\n    constructor(props: RootSchemaEditorProps) {\r\n        super(props);\r\n\r\n        this.editorRef = React.createRef<ISchemaEditorType>();\r\n\r\n        if (props.schema) {\r\n            this.state = { type: props.schema.type };\r\n        } else {\r\n            this.state = { type: DataType.Object };\r\n        }\r\n    }\r\n\r\n    changeType(type: DataType): void {\r\n        this.setState({ type });\r\n    }\r\n\r\n    changeName(): void {\r\n        console.log(`[Root Node] Change Name!!`);\r\n    }\r\n\r\n    exportSchema(): ISchemaType {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        return this.editorRef.current!.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <SchemaEditorFactory\r\n                ref={this.editorRef}\r\n                type={this.state.type}\r\n                schema={this.props.schema}\r\n                depth={0}\r\n                field={{ name: \"root\", required: true }}\r\n                hasSibling={false}\r\n                isDeleteable={false}\r\n                isRequiredFieldReadonly={true}\r\n                isNameFieldReadonly={true}\r\n                changeType={this.changeType.bind(this)}\r\n                changeName={this.changeName.bind(this)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default RootSchemaEditor;\r\n","import Ajv from \"ajv\";\r\nimport draft_04_meta from \"ajv/lib/refs/json-schema-draft-04.json\";\r\nimport draft_06_meta from \"ajv/lib/refs/json-schema-draft-06.json\";\r\n// I think there is some bugs  in either eslint or react to use forwardref\r\n// eslint-disable-next-line @typescript-eslint/no-use-before-define\r\nimport React from \"react\";\r\nimport { Button, Toast } from \"react-bootstrap\";\r\n\r\nimport { ISchemaType } from \"../model/schema/type_schema\";\r\nimport { NextId } from \"../model/utility\";\r\nimport RootSchemaEditor from \"./schema_editor/RootSchemaEditor\";\r\nimport { EmptyProps } from \"./type_component\";\r\n\r\ninterface IEditorState {\r\n    error?: string;\r\n    schema?: ISchemaType;\r\n}\r\n\r\nclass Editor extends React.Component<EmptyProps, IEditorState> {\r\n    private fileUploadRef: React.RefObject<HTMLInputElement>;\r\n    private editorRef: React.RefObject<RootSchemaEditor>;\r\n    private rootSchemaEditorKey: string;\r\n\r\n    constructor(props: EmptyProps) {\r\n        super(props);\r\n\r\n        this.fileUploadRef = React.createRef<HTMLInputElement>();\r\n        this.editorRef = React.createRef<RootSchemaEditor>();\r\n\r\n        this.rootSchemaEditorKey = NextId.next(\"key\").toString();\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    toggleImport(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this.fileUploadRef.current!.click();\r\n    }\r\n\r\n    async import(event: React.ChangeEvent<HTMLInputElement>): Promise<void> {\r\n        if (event.target.files) {\r\n            try {\r\n                const text = await event.target.files[0].text();\r\n                const schema = JSON.parse(text);\r\n\r\n                const validator = new Ajv({ schemaId: \"auto\" });\r\n                validator.addMetaSchema(draft_04_meta);\r\n                validator.addMetaSchema(draft_06_meta);\r\n\r\n                const result = validator.validateSchema(schema);\r\n\r\n                if (!result) {\r\n                    this.setState({\r\n                        error: \"Parsing Schema Error! We only support draft-04/06/07\",\r\n                    });\r\n                } else {\r\n                    this.rootSchemaEditorKey = NextId.next(\"key\").toString();\r\n                    this.setState({ schema });\r\n                }\r\n            } catch (error) {\r\n                this.setState({\r\n                    error: \"Parsing Schema Error! Please check your schema.\",\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    export(): void {\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const schema = this.editorRef.current!.exportSchema();\r\n\r\n            const fileBlob = new Blob([JSON.stringify(schema, null, 4)], { type: \"application/schema+json\" });\r\n            const blobURL = window.URL.createObjectURL(fileBlob);\r\n\r\n            const anchorElement = document.createElement(\"a\");\r\n            anchorElement.href = blobURL;\r\n            anchorElement.setAttribute(\"download\", \"Schema.json\");\r\n            document.body.appendChild(anchorElement);\r\n            anchorElement.click();\r\n\r\n            document.body.removeChild(anchorElement);\r\n        } catch (e) {\r\n            this.setState({ error: `Find Error: ${e.message} Please check and export again.` });\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-3 mx-4 \">\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"file-uploader\"\r\n                    data-target=\"file-uploader\"\r\n                    hidden\r\n                    ref={this.fileUploadRef}\r\n                    onChange={this.import.bind(this)}\r\n                />\r\n                <Button variant=\"outline-primary\" onClick={this.toggleImport.bind(this)}>\r\n                    Import from file\r\n                </Button>{\" \"}\r\n                <Button variant=\"outline-success\" onClick={this.export.bind(this)}>\r\n                    Export Schema\r\n                </Button>\r\n                <RootSchemaEditor ref={this.editorRef} key={this.rootSchemaEditorKey} schema={this.state.schema} />\r\n                {this.state.error && (\r\n                    <Toast\r\n                        show={this.state.error ? true : false}\r\n                        onClose={(): void => {\r\n                            this.setState({ error: undefined });\r\n                        }}\r\n                        delay={3000}\r\n                        autohide\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            bottom: \"20px\",\r\n                            right: \"20px\",\r\n                            borderColor: \"red\",\r\n                            color: \"red\",\r\n                        }}\r\n                    >\r\n                        <Toast.Header style={{ borderColor: \"red\", color: \"red\" }}>\r\n                            <strong className=\"mr-auto\">Error</strong>\r\n                        </Toast.Header>\r\n                        <Toast.Body>{this.state.error}</Toast.Body>\r\n                    </Toast>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nimport Editor from \"./Editor\";\r\n\r\nclass App extends React.Component {\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\">JSON Schema Editor</Navbar.Brand>\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text>\r\n                            <a href=\"https://github.com/JingWangTW/json-schema-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <img height=\"30px\" src=\"https://github.com/fluidicon.png\" alt=\"Github ICON\" />\r\n                            </a>\r\n                        </Navbar.Text>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n                <Editor />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import \"./index.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./component/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}