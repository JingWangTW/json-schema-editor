{"version":3,"sources":["type.ts","model/utility.ts","model/schema/Schema.ts","model/schema/ArraySchema.ts","component/node_component/CodeField.tsx","component/node_component/HintText.tsx","component/node_component/EditorOptionModal.tsx","component/node_component/GenericField.tsx","component/node_component/OptionsButtons.tsx","component/node_component/SpaceFront.tsx","component/node_component/type_NodeComponent.tsx","component/schema_editor/ChildrenSchemaEditor.tsx","component/schema_editor/SchemaEditor.tsx","component/schema_editor/ArraySchemaEditor.tsx","model/schema/BooleanSchema.ts","component/schema_editor/BooleanSchemaEditor.tsx","model/schema/IntegerSchema.ts","component/node_component/EnumField.tsx","component/schema_editor/IntegerSchemaEditor.tsx","model/schema/NullSchema.ts","component/schema_editor/NullSchemaEditor.tsx","model/schema/NumberSchema.ts","component/schema_editor/NumberSchemaEditor.tsx","model/schema/ObjectSchema.ts","component/schema_editor/ObjectSchemaEditor.tsx","model/schema/StringSchema.ts","component/schema_editor/StringSchemaEditor.tsx","component/schema_editor/SchemaEditorFactory.tsx","component/schema_editor/RootSchemaEditor.tsx","component/Editor.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["DataType","NextId","name","mappedKeyId","getOrDefault","optionalValue","defaultValue","undefined","CloneReturnValue","target","key","descriptor","original","value","args","ret","apply","this","Object","Schema","type","currentField","defaultField","fieldName","changeEvent","toString","checked","parseInt","field","schema","title","description","$comment","f","required","next","emptyValue","temp","isNaN","ArraySchema","Array","childrenProperty","genericField","getGenericFieldFromSchema","const","JSON","stringify","minItems","retrieveDefaultOptionValue","NaN","maxItems","uniqueItems","generateChildrenPropertyFromSchema","items","map","s","selfId","hasSibling","isDeleteable","isRequiredFieldReadonly","isNameFieldReadonly","ref","React","createRef","children","genericSchema","getGenericSchemaFromField","exportSchemaWithoutUndefined","constant","constantTemp","parse","replace","isArray","Error","length","child","require","Warn","Info","CodeField","props","state","isShowModal","setState","FormControl","onChange","e","update","InputGroup","Append","Button","variant","onClick","setDisplayCodeModal","bind","Modal","onHide","show","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Form","Group","placeholder","width","mode","theme","fontSize","showPrintMargin","showGutter","highlightActiveLine","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","Component","EditorOptionModal","isOptionModalShow","setDisplayOptionModal","Footer","clearOptionFieldForm","resetOptionFiledForm","GenericField","schemaType","getDefaultField","options","isDescriptionModalShow","isCommentFieldShow","recordField","preventDefault","newType","values","includes","changeType","changeName","Accordion","Row","Col","lg","OverlayTrigger","trigger","overlay","Tooltip","Prepend","Checkbox","disabled","Control","readOnly","as","custom","String","Integer","Number","Null","Boolean","setDisplayDescriptionModal","rows","style","paddingTop","Collapse","eventKey","cursor","Toggle","className","color","HintText","error","Set","info","warn","text","isWarnText","has","_addHint","isInfoText","isErrorText","_removeHint","from","hintType","add","delete","renderElement","colorMapping","forEach","push","charAt","toUpperCase","substring","ToggleAddButton","forwardRef","displayName","NodeOptionsButtons","buttonOptions","hasChild","addChild","addSibling","addHtmlDropId","addToolTipId","Dropdown","Menu","Item","href","isOptionExist","showOptionModal","SpaceFront","depth","Hint","ChildrenSchemaEditor","hintTextRef","childrenDidUpdate","checkDuplicateChildrenName","current","get","c","getField","exportSchema","currentIndex","originChildren","p","findIndex","splice","findNameDuplicate","DUPLICATED_FIELD_NAME","remove","prevState","isNameUnique","nameList","getCurrentField","SchemaEditor","optionsButtonsAttr","genericFieldOptions","optionModalRef","genericFieldRef","childrenRef","clearOptionField","resetOptionField","ArraySchemaEditor","childrenLength","MIN_GT_MAX_ITEMS","prevProps","ARRAY_ITEM_INDEX_MATTER","recordCode","CANT_PARSE_JSON_CONST","OptionsButtons","Label","column","htmlFor","min","Check","Input","BooleanSchema","default","event","selectedIndex","isSelectElement","prototype","call","toLowerCase","constValue","BooleanSchemaEditor","hidden","selected","IntegerSchema","max","ex_min","ex_max","minimum","exclusiveMinimum","maximum","exclusiveMaximum","enum","multipleOf","index","enumeration","filter","enn","EnumField","IntegerSchemaEditor","MIN_GT_MAX_VALUE","addEnum","deleteEnum","updateEnum","controlId","inline","label","height","NullSchema","NullSchemaEditor","NumberSchema","parseFloat","NumberSchemaEditor","ObjectSchema","maxProperties","minProperties","keys","properties","find","r","ObjectSchemaEditor","MIN_GT_MAX_PROPERTIES","StringSchema","minLength","maxLength","format","pattern","StringSchemaEditor","MIN_GT_MAX_LENGTH","v","i","SchemaEditorFactory","RootSchemaEditor","editorRef","console","log","Editor","fileUploadRef","rootSchemaEditorKey","click","a","files","validator","Ajv","schemaId","addMetaSchema","draft_04_meta","draft_06_meta","validateSchema","fileBlob","Blob","blobURL","window","URL","createObjectURL","anchorElement","document","createElement","setAttribute","body","appendChild","removeChild","message","data-target","import","toggleImport","export","Toast","onClose","delay","autohide","position","bottom","right","borderColor","App","Navbar","collapseOnSelect","expand","bg","Brand","Text","rel","src","alt","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.799cc02b.chunk.js","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nexport type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };\r\nexport type XOR_Partial<T, U> = (Without<T, U> & Partial<U>) | (Without<U, T> & Partial<T>);\r\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>;\r\nexport type IntersectionKey<T, U> = Extract<keyof T, keyof U>;\r\n\r\nexport enum DataType {\r\n    Array = \"array\",\r\n    Boolean = \"boolean\",\r\n    Integer = \"integer\",\r\n    Number = \"number\",\r\n    Object = \"object\",\r\n    String = \"string\",\r\n    Null = \"null\",\r\n}\r\n","class NextId {\r\n    private static mappedKeyId: { [key: string]: number } = {};\r\n\r\n    public static next(name = \"global\"): number {\r\n        if (!(name in NextId.mappedKeyId)) {\r\n            NextId.mappedKeyId[name] = 0;\r\n        }\r\n\r\n        NextId.mappedKeyId[name]++;\r\n\r\n        return NextId.mappedKeyId[name];\r\n    }\r\n}\r\n\r\nfunction arrayEquals<T>(a: T[], b: T[]): boolean {\r\n    if (a === b) return true;\r\n    if (a.length !== b.length) return false;\r\n    return a.every(c => b.includes(c));\r\n}\r\n\r\nfunction getOrDefault<T>(optionalValue: T | undefined, defaultValue: T): T {\r\n    if (optionalValue === undefined) return defaultValue;\r\n    else return optionalValue;\r\n}\r\n\r\nfunction CloneReturnValue(target: unknown, key: string | symbol, descriptor: PropertyDescriptor): PropertyDescriptor {\r\n    const original = descriptor.value;\r\n\r\n    descriptor.value = function (...args: unknown[]): unknown {\r\n        const ret = original.apply(this, args);\r\n        if (ret && ret instanceof Object) return { ...ret };\r\n        else return ret;\r\n    };\r\n\r\n    return descriptor;\r\n}\r\n\r\nexport { NextId, getOrDefault, CloneReturnValue, arrayEquals };\r\n","import { IGenericField } from \"../../component/node_component/type_NodeComponent\";\r\nimport { FieldWithoutType, ISchemaEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue, NextId, getOrDefault } from \"../utility\";\r\nimport { IGenericSchemaType, ISchemaType } from \"./type_schema\";\r\n\r\nabstract class Schema<SchemaType extends ISchemaType, FieldType extends ISchemaEditorField> {\r\n    protected abstract type: DataType;\r\n    protected abstract currentField: Required<FieldType>;\r\n    protected abstract defaultField: Required<FieldType>;\r\n\r\n    abstract resetOptionField(): Required<FieldType>;\r\n    abstract clearOptionField(): Required<FieldType>;\r\n    abstract exportSchema(): SchemaType;\r\n\r\n    @CloneReturnValue\r\n    public recordField(fieldName: keyof FieldType, changeEvent: React.ChangeEvent<HTMLInputElement>): Required<FieldType> {\r\n        switch (typeof this.currentField[fieldName]) {\r\n            case \"string\":\r\n                this.currentField[fieldName] = (changeEvent.target.value.toString() as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n            case \"boolean\":\r\n                this.currentField[fieldName] = (changeEvent.target.checked as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n            case \"number\":\r\n                this.currentField[fieldName] = (parseInt(changeEvent.target.value) as unknown) as FieldType[keyof FieldType];\r\n                break;\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public getDefaultField(): Required<FieldType> {\r\n        return this.defaultField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public getCurrentField(): Required<FieldType> {\r\n        return this.currentField;\r\n    }\r\n\r\n    protected getGenericSchemaFromField(field: IGenericField): IGenericSchemaType {\r\n        const schema: IGenericSchemaType = {};\r\n\r\n        if (field.title && field.title !== \"\") schema.title = field.title;\r\n        if (field.description && field.description !== \"\") schema.description = field.description;\r\n        if (field.$comment && field.$comment !== \"\") schema.$comment = field.$comment;\r\n\r\n        return schema;\r\n    }\r\n\r\n    protected getGenericFieldFromSchema(schema?: IGenericSchemaType, field?: FieldWithoutType<IGenericField>): Required<IGenericField> {\r\n        let f: IGenericField;\r\n\r\n        if (schema === undefined) schema = {};\r\n        if (field === undefined) {\r\n            f = {\r\n                type: this.type,\r\n                required: true,\r\n                name: `Field_${NextId.next(\"Field\")}`,\r\n            };\r\n        } else {\r\n            f = { type: this.type, ...field };\r\n        }\r\n\r\n        return {\r\n            type: this.type,\r\n            required: f.required,\r\n            name: f.name,\r\n\r\n            title: getOrDefault(schema.title, getOrDefault(f.title, \"\")),\r\n            description: getOrDefault(schema.description, getOrDefault(f.description, \"\")),\r\n            $comment: getOrDefault(schema.$comment, getOrDefault(f.$comment, \"\")),\r\n        };\r\n    }\r\n\r\n    protected retrieveDefaultOptionValue<T extends keyof SchemaType>(\r\n        key: T,\r\n        defaultValue: SchemaType[T],\r\n        schema?: SchemaType\r\n    ): Required<SchemaType>[T] {\r\n        if (schema && key in schema && schema[key] !== undefined) {\r\n            return schema[key];\r\n        } else {\r\n            return defaultValue;\r\n        }\r\n    }\r\n\r\n    protected exportSchemaWithoutUndefined<K extends keyof (SchemaType | FieldType)>(\r\n        key: K,\r\n        emptyValue: Required<FieldType>[K]\r\n    ): Partial<Record<K, FieldType[K]>> {\r\n        const temp: Partial<Record<K, FieldType[K]>> = {};\r\n\r\n        // NaN === Nan get false\r\n        if (typeof emptyValue === \"number\" && isNaN(emptyValue)) {\r\n            if (!isNaN((this.currentField[key] as unknown) as number)) {\r\n                temp[key] = this.currentField[key];\r\n            }\r\n        } else {\r\n            if (this.currentField[key] !== emptyValue) {\r\n                temp[key] = this.currentField[key];\r\n            }\r\n        }\r\n\r\n        return temp;\r\n    }\r\n}\r\n\r\nexport default Schema;\r\n","import React from \"react\";\r\n\r\nimport { FieldWithoutType, IArrayEditorField, IChildProperty, ISchemaEditorType } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue, NextId } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IArraySchemaType, IChildrenSchemaType, IGenericSchemaType } from \"./type_schema\";\r\n\r\nclass ArraySchema extends Schema<IArraySchemaType, IArrayEditorField> {\r\n    protected type = DataType.Array;\r\n    protected currentField: Required<IArrayEditorField>;\r\n    protected defaultField: Required<IArrayEditorField>;\r\n    public readonly childrenProperty?: IChildProperty[];\r\n\r\n    constructor(schema?: IArraySchemaType, field?: FieldWithoutType<IArrayEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            const: schema && schema.const ? JSON.stringify(schema.const, null, 4) : \"[]\",\r\n\r\n            minItems: this.retrieveDefaultOptionValue(\"minItems\", NaN, schema),\r\n            maxItems: this.retrieveDefaultOptionValue(\"maxItems\", NaN, schema),\r\n            uniqueItems: this.retrieveDefaultOptionValue(\"uniqueItems\", false, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n\r\n        if (schema) this.childrenProperty = this.generateChildrenPropertyFromSchema(schema);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    recordCode(field: \"const\", value: string): Required<IArrayEditorField> {\r\n        this.currentField.const = value;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    generateChildrenPropertyFromSchema(schema: IArraySchemaType): IChildProperty[] {\r\n        if (schema.items) {\r\n            if (schema.items instanceof Array) {\r\n                return schema.items.map(s => {\r\n                    return {\r\n                        type: s.type,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n\r\n                        hasSibling: true,\r\n                        isDeleteable: true,\r\n                        isRequiredFieldReadonly: true,\r\n                        isNameFieldReadonly: true,\r\n\r\n                        ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                        field: {\r\n                            name: \"items\",\r\n                            required: true,\r\n                        },\r\n\r\n                        schema: s,\r\n                    };\r\n                });\r\n            } else {\r\n                return [\r\n                    {\r\n                        type: schema.type,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n\r\n                        hasSibling: true,\r\n                        isDeleteable: true,\r\n                        isRequiredFieldReadonly: true,\r\n                        isNameFieldReadonly: true,\r\n\r\n                        ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                        field: {\r\n                            name: \"items\",\r\n                            required: true,\r\n                        },\r\n\r\n                        schema: schema.items,\r\n                    },\r\n                ];\r\n            }\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IArrayEditorField> {\r\n        this.currentField.const = this.defaultField.const;\r\n\r\n        this.currentField.maxItems = this.defaultField.maxItems;\r\n        this.currentField.minItems = this.defaultField.minItems;\r\n        this.currentField.uniqueItems = this.defaultField.uniqueItems;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IArrayEditorField> {\r\n        this.currentField.const = \"[]\";\r\n\r\n        this.currentField.maxItems = NaN;\r\n        this.currentField.minItems = NaN;\r\n        this.currentField.uniqueItems = false;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(children?: IChildrenSchemaType): IArraySchemaType {\r\n        const type = DataType.Array;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const { uniqueItems } = this.currentField;\r\n\r\n        const minItems = this.exportSchemaWithoutUndefined(\"minItems\", NaN);\r\n        const maxItems = this.exportSchemaWithoutUndefined(\"maxItems\", NaN);\r\n\r\n        const constant: { const?: [] } = {};\r\n\r\n        const constantTemp = JSON.parse(this.currentField.const.replace(/\\s/g, \"\"));\r\n        if (!Array.isArray(constantTemp)) throw new Error(\"const field in an Array DataType should be a valid array\");\r\n        if ((constantTemp as []).length > 0) constant.const = constantTemp as [];\r\n\r\n        let items: IArraySchemaType[\"items\"];\r\n\r\n        if (children) {\r\n            if (children.length === 1) {\r\n                items = children[0].value;\r\n            } else if (children.length > 1) {\r\n                items = children.map(child => child.value);\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...minItems,\r\n            ...maxItems,\r\n            uniqueItems,\r\n            items,\r\n            ...constant,\r\n        };\r\n    }\r\n}\r\n\r\nexport default ArraySchema;\r\n","import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport { Button, Form, FormControl, InputGroup, Modal } from \"react-bootstrap\";\r\nimport { TiPencil } from \"react-icons/ti\";\r\n\r\nrequire(\"ace-builds/src-noconflict/mode-json\");\r\nrequire(\"ace-builds/src-noconflict/theme-terminal\");\r\n\r\ninterface CodeFieldProps {\r\n    title: string;\r\n\r\n    value: string;\r\n    update(value: string): void;\r\n}\r\n\r\ninterface CodeFieldState {\r\n    isShowModal: boolean;\r\n}\r\n\r\nclass CodeField extends React.Component<CodeFieldProps, CodeFieldState> {\r\n    constructor(props: CodeFieldProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isShowModal: false,\r\n        };\r\n    }\r\n\r\n    setDisplayCodeModal(isShowModal: boolean): void {\r\n        this.setState({ isShowModal });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <FormControl\r\n                    type=\"text\"\r\n                    onChange={(e): void => {\r\n                        this.props.update(e.target.value);\r\n                    }}\r\n                    value={this.props.value}\r\n                />\r\n                <InputGroup.Append>\r\n                    <Button variant=\"outline-primary\" onClick={this.setDisplayCodeModal.bind(this, true)}>\r\n                        <TiPencil />\r\n                    </Button>\r\n                </InputGroup.Append>\r\n                <Modal\r\n                    onHide={this.setDisplayCodeModal.bind(this, false)}\r\n                    show={this.state.isShowModal}\r\n                    size=\"lg\"\r\n                    aria-labelledby=\"code-modal\"\r\n                    centered\r\n                >\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title id=\"code-modal\">{this.props.title}</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <Form.Group>\r\n                            <AceEditor\r\n                                placeholder=\"Placeholder Text\"\r\n                                width=\"100%\"\r\n                                mode=\"json\"\r\n                                theme=\"terminal\"\r\n                                name=\"Code\"\r\n                                onChange={this.props.update}\r\n                                fontSize={14}\r\n                                showPrintMargin={true}\r\n                                showGutter={true}\r\n                                highlightActiveLine={true}\r\n                                value={this.props.value}\r\n                                setOptions={{\r\n                                    enableBasicAutocompletion: false,\r\n                                    enableLiveAutocompletion: false,\r\n                                    enableSnippets: false,\r\n                                    showLineNumbers: true,\r\n                                    tabSize: 4,\r\n                                }}\r\n                            />\r\n                        </Form.Group>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CodeField;\r\n","import React from \"react\";\r\n\r\nimport { NextId } from \"../../model/utility\";\r\nimport { EmptyProps } from \"../type_component\";\r\n\r\nexport enum Error {\r\n    DUPLICATED_FIELD_NAME = \"Find duplicated field name\",\r\n    CANT_PARSE_JSON_CONST = \"Invalid JSON in const field\",\r\n}\r\n\r\nexport enum Warn {\r\n    MIN_GT_MAX_ITEMS = \"Min Items > Max Items\",\r\n    MIN_GT_MAX_VALUE = \"Min Value > Max Value\",\r\n    MIN_GT_MAX_PROPERTIES = \"Min Properties > Max Properties\",\r\n    MIN_GT_MAX_LENGTH = \"Min Length > Max Length\",\r\n}\r\n\r\nexport enum Info {\r\n    ARRAY_ITEM_INDEX_MATTER = \"Ordinal index of each item under Array type is meaningful\",\r\n}\r\ninterface IHintTextState {\r\n    error: Set<Error>;\r\n    info: Set<Info>;\r\n    warn: Set<Warn>;\r\n}\r\n\r\ntype HintType = keyof IHintTextState;\r\ntype HintTextType = Warn | Error | Info;\r\n\r\nclass HintText extends React.Component<EmptyProps, IHintTextState> {\r\n    constructor(props: EmptyProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            error: new Set<Error>(),\r\n            info: new Set<Info>(),\r\n            warn: new Set<Warn>(),\r\n        };\r\n    }\r\n\r\n    static isWarnText(text: string): text is Warn {\r\n        return Object.values(Warn).includes(text as Warn);\r\n    }\r\n\r\n    static isInfoText(text: string): text is Info {\r\n        return Object.values(Info).includes(text as Info);\r\n    }\r\n\r\n    static isErrorText(text: string): text is Error {\r\n        return Object.values(Error).includes(text as Error);\r\n    }\r\n\r\n    add(text: HintTextType): void {\r\n        if (HintText.isWarnText(text)) {\r\n            if (!this.state[\"warn\"].has(text)) this._addHint(\"warn\", text);\r\n        } else if (HintText.isInfoText(text)) {\r\n            if (!this.state[\"info\"].has(text)) this._addHint(\"info\", text);\r\n        } else if (HintText.isErrorText(text)) {\r\n            if (!this.state[\"error\"].has(text)) this._addHint(\"error\", text);\r\n        }\r\n    }\r\n\r\n    remove(text: HintTextType): void {\r\n        if (HintText.isWarnText(text)) {\r\n            if (this.state[\"warn\"].has(text)) this._removeHint(\"warn\", text);\r\n        } else if (HintText.isInfoText(text)) {\r\n            if (this.state[\"info\"].has(text)) this._removeHint(\"info\", text);\r\n        } else if (HintText.isErrorText(text)) {\r\n            if (this.state[\"error\"].has(text)) this._removeHint(\"error\", text);\r\n        }\r\n    }\r\n\r\n    get(type: HintType): Warn[] | Error[] | Info[] {\r\n        switch (type) {\r\n            case \"warn\":\r\n                return Array.from(this.state[\"warn\"]);\r\n            case \"error\":\r\n                return Array.from(this.state[\"error\"]);\r\n            case \"info\":\r\n                return Array.from(this.state[\"info\"]);\r\n        }\r\n    }\r\n\r\n    private _addHint<T extends HintType>(hintType: T, text: HintTextType): void {\r\n        if (hintType === \"warn\") this.state[\"warn\"].add(text as Warn);\r\n        else if (hintType === \"info\") this.state[\"info\"].add(text as Info);\r\n        else if (hintType === \"error\") this.state[\"error\"].add(text as Error);\r\n\r\n        this.setState(this.state);\r\n    }\r\n\r\n    private _removeHint<T extends HintTextType>(hintType: HintType, text: T): void {\r\n        if (hintType === \"warn\") this.state[\"warn\"].delete(text as Warn);\r\n        else if (hintType === \"info\") this.state[\"info\"].delete(text as Info);\r\n        else if (hintType === \"error\") this.state[\"error\"].delete(text as Error);\r\n\r\n        this.setState(this.state);\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        const renderElement: JSX.Element[] = [];\r\n        const colorMapping: Record<HintType, string> = {\r\n            error: \"red\",\r\n            info: \"green\",\r\n            warn: \"orange\",\r\n        };\r\n\r\n        let key: HintType;\r\n\r\n        for (key in this.state) {\r\n            this.state[key].forEach((text: HintTextType) => {\r\n                renderElement.push(\r\n                    <span style={{ color: colorMapping[key] }} key={NextId.next()}>\r\n                        <b>{`${key.charAt(0).toUpperCase()}${key.substring(1)}`}: </b>\r\n                        {text}\r\n                    </span>\r\n                );\r\n            });\r\n        }\r\n\r\n        return <>{renderElement}</>;\r\n    }\r\n}\r\n\r\nexport default HintText;\r\n","import React, { PropsWithChildren } from \"react\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\n\r\ninterface EditorOptionModalProps {\r\n    clearOptionFieldForm(): void;\r\n    resetOptionFiledForm(): void;\r\n}\r\n\r\ninterface EditorOptionModalState {\r\n    isOptionModalShow: boolean;\r\n}\r\n\r\nclass EditorOptionModal extends React.Component<PropsWithChildren<EditorOptionModalProps>, EditorOptionModalState> {\r\n    constructor(props: EditorOptionModalProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            isOptionModalShow: false,\r\n        };\r\n    }\r\n\r\n    setDisplayOptionModal(show: boolean): void {\r\n        this.setState({ isOptionModalShow: show });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Modal\r\n                onHide={this.setDisplayOptionModal.bind(this, false)}\r\n                show={this.state.isOptionModalShow}\r\n                size=\"lg\"\r\n                aria-labelledby=\"option-modal\"\r\n                centered\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title id=\"option-modal\">Advanced Options</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>{this.props.children}</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={this.props.clearOptionFieldForm}>\r\n                        Clear\r\n                    </Button>\r\n                    <Button variant=\"outline-primary\" onClick={this.props.resetOptionFiledForm}>\r\n                        Reset\r\n                    </Button>\r\n                    <Button variant=\"outline-success\" onClick={this.setDisplayOptionModal.bind(this, false)}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EditorOptionModal;\r\n","import \"../../index.css\";\r\n\r\nimport React from \"react\";\r\nimport { Accordion, Button, Col, Form, FormControl, InputGroup, Modal, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AiOutlineDown } from \"react-icons/ai\";\r\nimport { TiPencil } from \"react-icons/ti\";\r\n\r\nimport Schema from \"../../model/schema/Schema\";\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport { getOrDefault } from \"../../model/utility\";\r\nimport { DataType } from \"../../type\";\r\nimport { ISchemaEditorField } from \"../schema_editor/type_SchemaEditor\";\r\nimport { IGenericField, IGenericFieldOptions } from \"./type_NodeComponent\";\r\n\r\ninterface IGenericFieldProps<T extends ISchemaType, U extends ISchemaEditorField> {\r\n    options: IGenericFieldOptions;\r\n    schemaType: Schema<T, U>;\r\n\r\n    changeType(props: DataType): void;\r\n    changeName(): void;\r\n}\r\n\r\ninterface IGenericFieldState {\r\n    currentField: Required<IGenericField>;\r\n    isRequiredFieldReadonly: boolean;\r\n    isNameFieldReadonly: boolean;\r\n\r\n    isDescriptionModalShow: boolean;\r\n    isCommentFieldShow: boolean;\r\n}\r\n\r\nclass GenericField extends React.Component<IGenericFieldProps<ISchemaType, IGenericField>, IGenericFieldState> {\r\n    constructor(props: IGenericFieldProps<ISchemaType, IGenericField>) {\r\n        super(props);\r\n\r\n        const currentField: Required<IGenericField> = props.schemaType.getDefaultField();\r\n\r\n        this.state = {\r\n            currentField,\r\n            isRequiredFieldReadonly: getOrDefault(this.props.options.isRequiredFieldReadonly, false),\r\n            isNameFieldReadonly: getOrDefault(this.props.options.isNameFieldReadonly, false),\r\n\r\n            isDescriptionModalShow: false,\r\n            isCommentFieldShow: false,\r\n        };\r\n    }\r\n\r\n    recordField(fieldName: keyof Omit<IGenericField, \"type\">, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentField = this.props.schemaType.recordField(fieldName, changeEvent);\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    changeType(changeEvent: React.ChangeEvent<HTMLSelectElement>): void {\r\n        changeEvent.preventDefault();\r\n\r\n        const newType = changeEvent.target.value as DataType;\r\n\r\n        if (Object.values(DataType).includes(newType)) {\r\n            this.props.changeType(newType);\r\n        }\r\n    }\r\n\r\n    changeName(changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.recordField(\"name\", changeEvent);\r\n        if (this.props.changeName) this.props.changeName();\r\n    }\r\n\r\n    setDisplayDescriptionModal(show: boolean): void {\r\n        this.setState({\r\n            isDescriptionModalShow: show,\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <Accordion>\r\n                <Form.Row>\r\n                    <Col>\r\n                        <Form.Row>\r\n                            <Col lg={3}>\r\n                                <InputGroup>\r\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"add-tooltip\"> Required </Tooltip>}>\r\n                                        <InputGroup.Prepend>\r\n                                            <InputGroup.Checkbox\r\n                                                checked={this.state.currentField.required}\r\n                                                disabled={this.state.isRequiredFieldReadonly}\r\n                                                onChange={this.recordField.bind(this, \"required\")}\r\n                                            />\r\n                                        </InputGroup.Prepend>\r\n                                    </OverlayTrigger>\r\n\r\n                                    <Form.Control\r\n                                        placeholder=\"items\"\r\n                                        readOnly={this.state.isNameFieldReadonly}\r\n                                        value={this.state.currentField.name}\r\n                                        onChange={this.changeName.bind(this)}\r\n                                    />\r\n                                </InputGroup>\r\n                            </Col>\r\n                            <Col lg={1}>\r\n                                <Form.Control\r\n                                    as=\"select\"\r\n                                    custom\r\n                                    placeholder=\"DataType\"\r\n                                    onChange={this.changeType.bind(this)}\r\n                                    value={this.state.currentField.type}\r\n                                >\r\n                                    <option value={DataType.Object}>Object</option>\r\n                                    <option value={DataType.Array}>Array</option>\r\n                                    <option value={DataType.String}>String</option>\r\n                                    <option value={DataType.Integer}>Integer</option>\r\n                                    <option value={DataType.Number}>Number</option>\r\n                                    <option value={DataType.Null}>Null</option>\r\n                                    <option value={DataType.Boolean}>Boolean</option>\r\n                                </Form.Control>\r\n                            </Col>\r\n                            <Col lg={4}>\r\n                                <Form.Control\r\n                                    placeholder=\"Titile\"\r\n                                    value={this.state.currentField.title}\r\n                                    onChange={this.recordField.bind(this, \"title\")}\r\n                                />\r\n                            </Col>\r\n                            <Col lg={4}>\r\n                                <InputGroup>\r\n                                    <FormControl\r\n                                        type=\"text\"\r\n                                        id=\"Description\"\r\n                                        placeholder=\"Description\"\r\n                                        value={this.state.currentField.description}\r\n                                        onChange={this.recordField.bind(this, \"description\")}\r\n                                    />\r\n                                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"add-tooltip\"> Edit </Tooltip>}>\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-primary\" onClick={this.setDisplayDescriptionModal.bind(this, true)}>\r\n                                                <TiPencil />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </OverlayTrigger>\r\n                                </InputGroup>\r\n\r\n                                <Modal\r\n                                    onHide={this.setDisplayDescriptionModal.bind(this, false)}\r\n                                    show={this.state.isDescriptionModalShow}\r\n                                    size=\"lg\"\r\n                                    aria-labelledby=\"description-modal\"\r\n                                    centered\r\n                                >\r\n                                    <Modal.Header closeButton>\r\n                                        <Modal.Title id=\"description-modal\">Description</Modal.Title>\r\n                                    </Modal.Header>\r\n                                    <Modal.Body>\r\n                                        <Form.Group>\r\n                                            <Form.Control\r\n                                                as=\"textarea\"\r\n                                                rows={3}\r\n                                                value={this.state.currentField.description}\r\n                                                onChange={this.recordField.bind(this, \"description\")}\r\n                                            />\r\n                                        </Form.Group>\r\n                                    </Modal.Body>\r\n                                </Modal>\r\n                            </Col>\r\n                            <Col lg={12} style={{ paddingTop: \"5px\" }}>\r\n                                <Accordion.Collapse eventKey=\"0\">\r\n                                    <Form.Control\r\n                                        placeholder=\"$comment\"\r\n                                        value={this.state.currentField.$comment}\r\n                                        onChange={this.recordField.bind(this, \"$comment\")}\r\n                                    />\r\n                                </Accordion.Collapse>\r\n                            </Col>\r\n                        </Form.Row>\r\n                    </Col>\r\n                    <Col lg=\"auto\" style={{ cursor: \"pointer\" }}>\r\n                        <Accordion.Toggle eventKey=\"0\" as=\"span\" className=\"node-option-block\">\r\n                            <AiOutlineDown color=\"blue\" />\r\n                        </Accordion.Toggle>\r\n                    </Col>\r\n                </Form.Row>\r\n            </Accordion>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GenericField;\r\n","import \"../../index.css\";\r\n\r\nimport React from \"react\";\r\nimport { Dropdown, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { AiOutlineSetting } from \"react-icons/ai\";\r\nimport { FaPlus, FaRegTrashAlt } from \"react-icons/fa\";\r\n\r\nimport { NextId } from \"../../model/utility\";\r\nimport { IOptionsButtonsAttr } from \"./type_NodeComponent\";\r\n\r\ninterface INodeOptionsButtonsProps {\r\n    buttonOptions: IOptionsButtonsAttr;\r\n\r\n    showOptionModal(): void;\r\n\r\n    addChild?(): void;\r\n    addSibling?(): void;\r\n    delete?(): void;\r\n}\r\n\r\ninterface ToggleAddButtonProps {\r\n    id: string;\r\n    onClick(event: React.MouseEvent<HTMLSpanElement>): void;\r\n}\r\n\r\nconst ToggleAddButton = React.forwardRef<HTMLSpanElement, ToggleAddButtonProps>((props: ToggleAddButtonProps, ref) => (\r\n    <span ref={ref} id={props.id} onClick={props.onClick}>\r\n        <FaPlus color=\"green\" />\r\n    </span>\r\n));\r\n\r\n// to make eslint happy\r\nToggleAddButton.displayName = \"ToggleAddButton\";\r\n\r\nfunction NodeOptionsButtons(props: INodeOptionsButtonsProps): JSX.Element {\r\n    if (props.buttonOptions.hasChild && !props.addChild)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.hasChild = true, without addChild()\");\r\n    else if (props.buttonOptions.hasSibling && !props.addSibling)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.hasSibling = true, without addSibling()\");\r\n    else if (props.buttonOptions.isDeleteable && !props.delete)\r\n        throw new Error(\"Bad arguments to create NodeOptionsButtons: Provide buttonOptions.isDeleteable = true, without delete()\");\r\n\r\n    const addHtmlDropId = NextId.next(\"Key\").toString();\r\n    const addToolTipId = NextId.next(\"Key\").toString();\r\n\r\n    return (\r\n        <div className=\"node-option-block\">\r\n            {props.buttonOptions.hasChild && props.buttonOptions.hasSibling && (\r\n                <div className=\"node-option-btn-block\">\r\n                    <Dropdown>\r\n                        <Dropdown.Toggle as={ToggleAddButton} id={addHtmlDropId} />\r\n\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item href=\"#\" eventKey=\"1\" onClick={props.addSibling}>\r\n                                Add Sibling\r\n                            </Dropdown.Item>\r\n                            <Dropdown.Item href=\"#\" eventKey=\"2\" onClick={props.addChild}>\r\n                                Add Child\r\n                            </Dropdown.Item>\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.hasChild !== props.buttonOptions.hasSibling && (\r\n                <div className=\"node-option-btn-block\" onClick={props.buttonOptions.hasChild ? props.addChild : props.addSibling}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id={addToolTipId}> Add </Tooltip>}>\r\n                        <span>\r\n                            <FaPlus color=\"green\" />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.isDeleteable && (\r\n                <div className=\"node-option-btn-block\" onClick={props.delete}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"delete-tooltip\"> Delete </Tooltip>}>\r\n                        <span>\r\n                            <FaRegTrashAlt color=\"red\" />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n\r\n            {props.buttonOptions.isOptionExist && (\r\n                <div className=\"node-option-btn-block\" onClick={props.showOptionModal}>\r\n                    <OverlayTrigger trigger={[\"hover\", \"focus\"]} overlay={<Tooltip id=\"option-tooltip\"> Option </Tooltip>}>\r\n                        <span>\r\n                            <AiOutlineSetting />\r\n                        </span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NodeOptionsButtons;\r\n","import React from \"react\";\r\nimport { Col } from \"react-bootstrap\";\r\n\r\nfunction SpaceFront(props: { depth: number }): JSX.Element {\r\n    return <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (props.depth * 15).toString() + \"px\" }} />;\r\n}\r\n\r\nexport default SpaceFront;\r\n","import { IGenericSchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport { Error, Info, Warn } from \"./HintText\";\r\n\r\nexport interface IGenericField {\r\n    type: DataType;\r\n\r\n    name: string;\r\n    required: boolean;\r\n    title?: string;\r\n    description?: string;\r\n\r\n    $comment?: string;\r\n}\r\n\r\nexport interface IOptionsButtonsAttr {\r\n    hasChild: boolean;\r\n    hasSibling: boolean;\r\n    isDeleteable: boolean;\r\n    isOptionExist: boolean;\r\n}\r\n\r\nexport type IGenericFieldOptions = {\r\n    isRequiredFieldReadonly?: boolean;\r\n    isNameFieldReadonly?: boolean;\r\n};\r\n\r\nexport type OmitGenericField<T extends IGenericSchemaType> = Omit<T, keyof IGenericField>;\r\n\r\nexport const Hint = { Warn, Info, Error };\r\nexport type Hint = typeof Hint;\r\n","import React from \"react\";\r\n\r\nimport { IChildrenSchemaType } from \"../../model/schema/type_schema\";\r\nimport { NextId, getOrDefault } from \"../../model/utility\";\r\nimport { DataType, PartialBy } from \"../../type\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport { Hint } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditorFactory from \"./SchemaEditorFactory\";\r\nimport { IChildProperty, IChildrenEditorProps, INewChildEditorProps, ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ninterface ChildrenNodesState {\r\n    children: Array<IChildProperty>;\r\n}\r\n\r\nclass ChildrenSchemaEditor extends React.Component<IChildrenEditorProps, ChildrenNodesState> {\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: IChildrenEditorProps) {\r\n        super(props);\r\n\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        const children: IChildProperty[] = getOrDefault(props.childrenProperty, []);\r\n\r\n        this.state = {\r\n            children,\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.props.childrenDidUpdate) this.props.childrenDidUpdate(this.state.children);\r\n        this.checkDuplicateChildrenName();\r\n    }\r\n\r\n    componentDidUpdate(): void {\r\n        if (this.props.childrenDidUpdate) this.props.childrenDidUpdate(this.state.children);\r\n        this.checkDuplicateChildrenName();\r\n    }\r\n\r\n    get length(): number {\r\n        return this.state.children.length;\r\n    }\r\n\r\n    exportSchema(): IChildrenSchemaType {\r\n        if (this.hintTextRef.current?.get(\"error\").length) throw new Error(JSON.stringify(this.hintTextRef.current?.get(\"error\")));\r\n\r\n        return this.state.children.map(child => {\r\n            const c: ISchemaEditorType = child.ref.current as ISchemaEditorType;\r\n            return {\r\n                name: c.getField().name,\r\n                value: c.exportSchema(),\r\n                required: c.getField().required,\r\n            };\r\n        });\r\n    }\r\n\r\n    add(selfId?: string, props?: INewChildEditorProps): void {\r\n        const originChildren = this.state.children;\r\n        let currentIndex;\r\n\r\n        let p: PartialBy<Required<INewChildEditorProps>, \"field\"> = {\r\n            type: DataType.Object,\r\n            isDeleteable: true,\r\n            hasSibling: true,\r\n            isRequiredFieldReadonly: false,\r\n            isNameFieldReadonly: false,\r\n        };\r\n\r\n        if (props) {\r\n            p = {\r\n                ...p,\r\n                ...props,\r\n            };\r\n        }\r\n\r\n        if (selfId === undefined || selfId === \"\") {\r\n            // push to the last one\r\n            currentIndex = originChildren.length + 1;\r\n        } else {\r\n            // Add after a node\r\n            currentIndex = originChildren.findIndex(child => child.selfId === selfId);\r\n        }\r\n\r\n        originChildren.splice(currentIndex + 1, 0, {\r\n            selfId: NextId.next(\"child\").toString(),\r\n\r\n            // hasSibling, isDeletable, isRequiredFieldReadonly, isNameFieldReadonly, field\r\n            ...p,\r\n\r\n            ref: React.createRef<ISchemaEditorType>(),\r\n        });\r\n\r\n        this.setState({ children: originChildren });\r\n    }\r\n\r\n    delete(selfId: string): void {\r\n        const originChildren = this.state.children;\r\n        const currentIndex = originChildren.findIndex(child => child.selfId === selfId);\r\n\r\n        originChildren.splice(currentIndex, 1);\r\n\r\n        this.setState({ children: originChildren });\r\n    }\r\n\r\n    checkDuplicateChildrenName(): void {\r\n        const findDuplicate = this.findNameDuplicate();\r\n\r\n        if (findDuplicate) {\r\n            this.hintTextRef.current?.add(Hint.Error.DUPLICATED_FIELD_NAME);\r\n        } else {\r\n            this.hintTextRef.current?.remove(Hint.Error.DUPLICATED_FIELD_NAME);\r\n        }\r\n    }\r\n\r\n    changeType(selfId: string, type: DataType): void {\r\n        this.setState(prevState => {\r\n            const children = prevState.children.map(child => {\r\n                if (child.selfId === selfId) {\r\n                    return {\r\n                        ...child,\r\n                        selfId: NextId.next(\"child\").toString(),\r\n                        type,\r\n                    };\r\n                } else {\r\n                    return child;\r\n                }\r\n            });\r\n\r\n            return {\r\n                children,\r\n            };\r\n        });\r\n    }\r\n\r\n    findNameDuplicate(): boolean {\r\n        if (this.props.isNameUnique) {\r\n            // Since state may not updated alreday, use schema instead.\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const nameList = this.state.children.map(child => child.ref.current!.schema.getCurrentField().name);\r\n\r\n            return new Set(nameList).size !== nameList.length;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <HintText ref={this.hintTextRef} />\r\n                {this.state.children.map(child => (\r\n                    <SchemaEditorFactory\r\n                        key={child.selfId}\r\n                        depth={this.props.depth + 1}\r\n                        {...child}\r\n                        delete={this.delete.bind(this, child.selfId)}\r\n                        addSibling={this.add.bind(this, child.selfId)}\r\n                        changeType={this.changeType.bind(this, child.selfId)}\r\n                        changeName={this.checkDuplicateChildrenName.bind(this)}\r\n                    />\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChildrenSchemaEditor;\r\n","import React from \"react\";\r\n\r\nimport Schema from \"../../model/schema/Schema\";\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr, OmitGenericField } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport { ISchemaEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nabstract class SchemaEditor<SchemaType extends ISchemaType, FieldType extends ISchemaEditorField> extends React.Component<\r\n    ISchemaEditorProps<SchemaType>,\r\n    ISchemaEditorState<FieldType>\r\n> {\r\n    protected abstract optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected abstract genericFieldOptions: IGenericFieldOptions;\r\n    public abstract schema: Schema<SchemaType, FieldType>;\r\n\r\n    // may not have options button in the child class\r\n    protected optionModalRef?: React.RefObject<EditorOptionModal>;\r\n\r\n    protected abstract genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    // may not have children in the child class\r\n    protected childrenRef?: React.RefObject<ChildrenSchemaEditor>;\r\n\r\n    abstract exportSchema(): ISchemaType;\r\n\r\n    addChild(): void {\r\n        if (this.childrenRef && this.childrenRef.current) this.childrenRef.current.add();\r\n    }\r\n\r\n    addSibling(): void {\r\n        if (this.props.addSibling) this.props.addSibling();\r\n    }\r\n\r\n    delete(): void {\r\n        if (this.props.delete) this.props.delete();\r\n    }\r\n\r\n    getField(): Required<FieldType> {\r\n        return this.schema.getCurrentField();\r\n    }\r\n\r\n    recordField(fieldName: keyof OmitGenericField<FieldType>, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        const currentField = this.schema.recordField(fieldName, changeEvent);\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    showOptionModal(): void {\r\n        if (this.optionModalRef && this.optionModalRef.current) this.optionModalRef.current.setDisplayOptionModal(true);\r\n    }\r\n\r\n    clearOptionField(): void {\r\n        const currentField = this.schema.clearOptionField();\r\n\r\n        this.setState({ currentField });\r\n    }\r\n\r\n    resetOptionField(): void {\r\n        const currentField = this.schema.resetOptionField();\r\n\r\n        this.setState({ currentField });\r\n    }\r\n}\r\n\r\nexport default SchemaEditor;\r\n","import React from \"react\";\r\nimport { Col, Form, InputGroup, Row } from \"react-bootstrap\";\r\n\r\nimport ArraySchema from \"../../model/schema/ArraySchema\";\r\nimport { IArraySchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport CodeField from \"../node_component/CodeField\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IArrayEditorField, IChildProperty, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass ArraySchemaEditor extends SchemaEditor<IArraySchemaType, IArrayEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: ArraySchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    protected childrenRef: React.RefObject<ChildrenSchemaEditor>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    private childrenLength: number;\r\n\r\n    constructor(props: ISchemaEditorProps<IArraySchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.childrenRef = React.createRef<ChildrenSchemaEditor>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new ArraySchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: true,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.childrenLength = 0;\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (!this.props.schema) this.addChild();\r\n        if (this.state.currentField.maxItems < this.state.currentField.minItems) {\r\n            this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_ITEMS);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IArraySchemaType>, prevState: ISchemaEditorState<IArrayEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.maxItems !== this.state.currentField.maxItems &&\r\n                !(isNaN(prevState.currentField.maxItems) && isNaN(this.state.currentField.maxItems))) ||\r\n            (prevState.currentField.minItems !== this.state.currentField.minItems &&\r\n                !(isNaN(prevState.currentField.minItems) && isNaN(this.state.currentField.minItems)))\r\n        ) {\r\n            if (this.state.currentField.maxItems < this.state.currentField.minItems) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_ITEMS);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_ITEMS);\r\n            }\r\n        }\r\n    }\r\n\r\n    childrenDidUpdate(children: IChildProperty[]): void {\r\n        if (this.childrenLength !== children.length) {\r\n            if (children.length > 1) {\r\n                this.hintTextRef.current?.add(Hint.Info.ARRAY_ITEM_INDEX_MATTER);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Info.ARRAY_ITEM_INDEX_MATTER);\r\n            }\r\n\r\n            this.childrenLength = children.length;\r\n        }\r\n    }\r\n\r\n    addChild(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this.childrenRef.current!.add(\"\", {\r\n            type: DataType.Object,\r\n            isDeleteable: true,\r\n            hasSibling: true,\r\n            isRequiredFieldReadonly: true,\r\n            isNameFieldReadonly: true,\r\n\r\n            field: {\r\n                name: \"items\",\r\n                required: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    exportSchema(): IArraySchemaType {\r\n        return this.schema.exportSchema(\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.childrenRef.current!.exportSchema()\r\n        );\r\n    }\r\n\r\n    recordCode(field: \"const\", value: string): void {\r\n        const currentField = this.schema.recordCode(field, value);\r\n\r\n        this.setState({ currentField });\r\n\r\n        try {\r\n            JSON.parse(value);\r\n            this.hintTextRef.current?.remove(Hint.Error.CANT_PARSE_JSON_CONST);\r\n        } catch (error) {\r\n            this.hintTextRef.current?.add(Hint.Error.CANT_PARSE_JSON_CONST);\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MinItems\">\r\n                                                Min Items\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinItems\"\r\n                                                    value={this.state.currentField.minItems}\r\n                                                    onChange={this.recordField.bind(this, \"minItems\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MaxItems\">\r\n                                                Max Items\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxItems\"\r\n                                                    value={this.state.currentField.maxItems}\r\n                                                    onChange={this.recordField.bind(this, \"maxItems\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <InputGroup>\r\n                                                    <CodeField\r\n                                                        title=\"Array constant\"\r\n                                                        value={this.state.currentField.const}\r\n                                                        update={this.recordCode.bind(this, \"const\")}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group>\r\n                                            <Form.Check type=\"checkbox\" id=\"uniqueCheckbox\">\r\n                                                <Form.Check.Input\r\n                                                    type=\"checkbox\"\r\n                                                    checked={this.state.currentField.uniqueItems}\r\n                                                    onChange={this.recordField.bind(this, \"uniqueItems\")}\r\n                                                />\r\n                                                <Form.Check.Label>Unique Items</Form.Check.Label>\r\n                                            </Form.Check>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <ChildrenSchemaEditor\r\n                    ref={this.childrenRef}\r\n                    depth={this.props.depth}\r\n                    isNameUnique={false}\r\n                    childrenProperty={this.schema.childrenProperty}\r\n                    childrenDidUpdate={this.childrenDidUpdate.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ArraySchemaEditor;\r\n","import { FieldWithoutType, IBooleanEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IBooleanSchemaType, IGenericSchemaType } from \"./type_schema\";\r\n\r\nclass BooleanSchema extends Schema<IBooleanSchemaType, IBooleanEditorField> {\r\n    protected type = DataType.Boolean;\r\n    protected currentField: Required<IBooleanEditorField>;\r\n    protected defaultField: Required<IBooleanEditorField>;\r\n\r\n    constructor(schema?: IBooleanSchemaType, field?: FieldWithoutType<IBooleanEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", undefined, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", undefined, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n    }\r\n\r\n    private isSelectElement(\r\n        event: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n    ): event is React.ChangeEvent<HTMLSelectElement> {\r\n        if ((event as React.ChangeEvent<HTMLSelectElement>).target.selectedIndex !== undefined) return true;\r\n        else return false;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public recordField(\r\n        fieldName: keyof IBooleanEditorField,\r\n        changeEvent: React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>\r\n    ): Required<IBooleanEditorField> {\r\n        if (this.isSelectElement(changeEvent) && (fieldName === \"default\" || fieldName === \"const\")) {\r\n            this.currentField[fieldName] = changeEvent.target.value.toLowerCase() === \"true\" ? true : false;\r\n        } else if (!this.isSelectElement(changeEvent)) {\r\n            Schema.prototype.recordField.call(this, fieldName, changeEvent);\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IBooleanEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IBooleanEditorField> {\r\n        this.currentField.default = (undefined as unknown) as boolean;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IBooleanSchemaType {\r\n        const type = DataType.Boolean;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", (undefined as unknown) as boolean);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", (undefined as unknown) as boolean);\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...defaultValue,\r\n            ...constValue,\r\n        };\r\n    }\r\n}\r\n\r\nexport default BooleanSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport BooleanSchema from \"../../model/schema/BooleanSchema\";\r\nimport { IBooleanSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IBooleanEditorField, ISchemaEditorProps } from \"./type_SchemaEditor\";\r\n\r\nclass BooleanSchemaEditor extends SchemaEditor<IBooleanSchemaType, IBooleanEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: BooleanSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<IBooleanSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new BooleanSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    exportSchema(): IBooleanSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg={4}>\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    custom\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                    value={\r\n                                                        this.state.currentField.default === undefined\r\n                                                            ? \"undefined\"\r\n                                                            : this.state.currentField.default.toString()\r\n                                                    }\r\n                                                >\r\n                                                    <option\r\n                                                        disabled\r\n                                                        hidden\r\n                                                        selected={this.state.currentField.default === undefined ? true : false}\r\n                                                        value=\"undefined\"\r\n                                                    >\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    <option value={\"true\"}>True</option>\r\n                                                    <option value={\"false\"}>False</option>\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg={4}>\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    custom\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                    value={\r\n                                                        this.state.currentField.const === undefined\r\n                                                            ? \"undefined\"\r\n                                                            : this.state.currentField.const.toString()\r\n                                                    }\r\n                                                >\r\n                                                    <option\r\n                                                        disabled\r\n                                                        hidden\r\n                                                        selected={this.state.currentField.const === undefined ? true : false}\r\n                                                        value=\"undefined\"\r\n                                                    >\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    <option value={\"true\"}>True</option>\r\n                                                    <option value={\"false\"}>False</option>\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BooleanSchemaEditor;\r\n","import { FieldWithoutType, IIntegerEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, XOR_Partial } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, IIntegerSchemaType, ISchemaTypeEnummable } from \"./type_schema\";\r\n\r\nclass IntegerSchema extends Schema<IIntegerSchemaType, IIntegerEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.Integer;\r\n    protected currentField: Required<IIntegerEditorField>;\r\n    protected defaultField: Required<IIntegerEditorField>;\r\n\r\n    constructor(schema?: IIntegerSchemaType, field?: FieldWithoutType<IIntegerEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        let min: number, max: number;\r\n        let ex_min: boolean, ex_max: boolean;\r\n\r\n        if (schema) {\r\n            if (schema.minimum) {\r\n                min = schema.minimum;\r\n                ex_min = false;\r\n            } else if (schema.exclusiveMinimum) {\r\n                min = schema.exclusiveMinimum;\r\n                ex_min = true;\r\n            } else {\r\n                min = NaN;\r\n                ex_min = false;\r\n            }\r\n\r\n            if (schema.maximum) {\r\n                max = schema.maximum;\r\n                ex_max = false;\r\n            } else if (schema.exclusiveMaximum) {\r\n                max = schema.exclusiveMaximum;\r\n                ex_max = true;\r\n            } else {\r\n                max = NaN;\r\n                ex_max = false;\r\n            }\r\n        } else {\r\n            min = max = NaN;\r\n            ex_min = ex_max = false;\r\n        }\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", NaN, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", NaN, schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            multipleOf: this.retrieveDefaultOptionValue(\"multipleOf\", NaN, schema),\r\n\r\n            minimum: min,\r\n            maximum: max,\r\n            exclusiveMinimum: ex_min,\r\n            exclusiveMaximum: ex_max,\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(NaN);\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = parseInt(changeEvent.target.value);\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IIntegerEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minimum = this.defaultField.minimum;\r\n        this.currentField.maximum = this.defaultField.maximum;\r\n        this.currentField.exclusiveMinimum = this.defaultField.exclusiveMinimum;\r\n        this.currentField.exclusiveMaximum = this.defaultField.exclusiveMaximum;\r\n        this.currentField.multipleOf = this.defaultField.multipleOf;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IIntegerEditorField> {\r\n        this.currentField.default = NaN;\r\n        this.currentField.const = NaN;\r\n        this.currentField.enum = [];\r\n        this.currentField.minimum = NaN;\r\n        this.currentField.maximum = NaN;\r\n        this.currentField.exclusiveMinimum = false;\r\n        this.currentField.exclusiveMaximum = false;\r\n        this.currentField.multipleOf = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IIntegerSchemaType {\r\n        const type = DataType.Integer;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => !isNaN(e));\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", NaN);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", NaN);\r\n        const multipleOf = this.exportSchemaWithoutUndefined(\"multipleOf\", NaN);\r\n\r\n        let min: XOR_Partial<{ exclusiveMinimum: number }, { minimum: number }> = {};\r\n        let max: XOR_Partial<{ exclusiveMaximum: number }, { maximum: number }> = {};\r\n\r\n        if (!isNaN(this.currentField.minimum)) {\r\n            if (this.currentField.exclusiveMinimum) {\r\n                min = { exclusiveMinimum: this.currentField.minimum };\r\n            } else {\r\n                min = { minimum: this.currentField.minimum };\r\n            }\r\n        }\r\n\r\n        if (!isNaN(this.currentField.maximum)) {\r\n            if (this.currentField.exclusiveMaximum) {\r\n                max = { exclusiveMaximum: this.currentField.maximum };\r\n            } else {\r\n                max = { maximum: this.currentField.maximum };\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...min,\r\n            ...max,\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...multipleOf,\r\n            ...enn,\r\n        };\r\n    }\r\n}\r\n\r\nexport default IntegerSchema;\r\n","import React from \"react\";\r\nimport { Button, Col, Form, FormControl, InputGroup, Row } from \"react-bootstrap\";\r\nimport { FaMinus, FaPlus } from \"react-icons/fa\";\r\n\r\nimport { EmptyState } from \"../type_component\";\r\n\r\ninterface EnumFieldProps<T> {\r\n    type: \"number\" | \"text\";\r\n\r\n    value: T[];\r\n    width: number;\r\n    add(): void;\r\n    update(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void;\r\n    delete(index: number): void;\r\n}\r\n\r\nclass EnumField<T extends string | number> extends React.Component<EnumFieldProps<T>, EmptyState> {\r\n    render(): JSX.Element {\r\n        return (\r\n            <Form.Group>\r\n                {this.props.value.length > 0 ? (\r\n                    this.props.value.map((enumeration, index: number) => (\r\n                        <Form.Group as={Row} key={index}>\r\n                            <Form.Label column lg=\"2\">\r\n                                {index === 0 ? \"Enum\" : \"\"}\r\n                            </Form.Label>\r\n                            <Col lg={this.props.width}>\r\n                                {index === this.props.value.length - 1 ? (\r\n                                    <InputGroup>\r\n                                        <FormControl\r\n                                            type={this.props.type}\r\n                                            id={index.toString()}\r\n                                            onChange={this.props.update.bind(this, index)}\r\n                                            value={enumeration}\r\n                                        />\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-danger\" onClick={this.props.delete.bind(this, index)}>\r\n                                                <FaMinus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-success\" onClick={this.props.add}>\r\n                                                <FaPlus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </InputGroup>\r\n                                ) : (\r\n                                    <InputGroup>\r\n                                        <FormControl\r\n                                            type={this.props.type}\r\n                                            id={index.toString()}\r\n                                            onChange={this.props.update.bind(this, index)}\r\n                                            value={enumeration}\r\n                                        />\r\n                                        <InputGroup.Append>\r\n                                            <Button variant=\"outline-danger\" onClick={this.props.delete.bind(this, index)}>\r\n                                                <FaMinus />\r\n                                            </Button>\r\n                                        </InputGroup.Append>\r\n                                    </InputGroup>\r\n                                )}\r\n                            </Col>\r\n                        </Form.Group>\r\n                    ))\r\n                ) : (\r\n                    <Form.Group as={Row}>\r\n                        <Form.Label column lg=\"2\">\r\n                            Enum\r\n                        </Form.Label>\r\n                        <Col lg=\"10\">\r\n                            <Row>\r\n                                <Col lg=\"12\">\r\n                                    <Button variant=\"outline-success\" onClick={this.props.add.bind(this)}>\r\n                                        <FaPlus color=\"green\" />\r\n                                    </Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                    </Form.Group>\r\n                )}\r\n            </Form.Group>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EnumField;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport IntegerSchema from \"../../model/schema/IntegerSchema\";\r\nimport { IIntegerSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IIntegerEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass IntegerSchemaEditor extends SchemaEditor<IIntegerSchemaType, IIntegerEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: IntegerSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: ISchemaEditorProps<IIntegerSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new IntegerSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minimum > this.state.currentField.maximum) this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_VALUE);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IIntegerSchemaType>, prevState: ISchemaEditorState<IIntegerEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minimum !== this.state.currentField.minimum &&\r\n                !(isNaN(prevState.currentField.minimum) && isNaN(this.state.currentField.minimum))) ||\r\n            (prevState.currentField.maximum !== this.state.currentField.maximum &&\r\n                !(isNaN(prevState.currentField.maximum) && isNaN(this.state.currentField.maximum)))\r\n        ) {\r\n            if (this.state.currentField.maximum < this.state.currentField.minimum) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_VALUE);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_VALUE);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IIntegerSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row} controlId=\"MinValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Min Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.minimum}\r\n                                                    onChange={this.recordField.bind(this, \"minimum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMin\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                                                    checked={this.state.currentField.exclusiveMinimum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"MaxValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Max Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.maximum}\r\n                                                    onChange={this.recordField.bind(this, \"maximum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMax\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMaximum\")}\r\n                                                    checked={this.state.currentField.exclusiveMaximum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                                                Multiple Of\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"MultipleOf\"\r\n                                                    value={this.state.currentField.multipleOf}\r\n                                                    onChange={this.recordField.bind(this, \"multipleOf\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"const\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            width={4}\r\n                                            type=\"number\"\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IntegerSchemaEditor;\r\n","import { FieldWithoutType, INullEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, INullSchemaType } from \"./type_schema\";\r\n\r\nclass NullSchema extends Schema<INullSchemaType, INullEditorField> {\r\n    protected type = DataType.Null;\r\n    protected currentField: Required<INullEditorField>;\r\n    protected defaultField: Required<INullEditorField>;\r\n\r\n    constructor(schema?: INullSchemaType, field?: FieldWithoutType<INullEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = { ...genericField };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<INullEditorField> {\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<INullEditorField> {\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): INullSchemaType {\r\n        const type = DataType.Null;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n        };\r\n    }\r\n}\r\n\r\nexport default NullSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport NullSchema from \"../../model/schema/NullSchema\";\r\nimport { INullSchemaType } from \"../../model/schema/type_schema\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { INullEditorField, ISchemaEditorProps } from \"./type_SchemaEditor\";\r\n\r\nclass NullSchemaEditor extends SchemaEditor<INullSchemaType, INullEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: NullSchema;\r\n\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n\r\n    constructor(props: ISchemaEditorProps<INullSchemaType>) {\r\n        super(props);\r\n\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n\r\n        this.schema = new NullSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: false,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    exportSchema(): INullSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NullSchemaEditor;\r\n","import { FieldWithoutType, INumberEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType, XOR_Partial } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, INumberSchemaType, ISchemaTypeEnummable } from \"./type_schema\";\r\n\r\nclass NumberSchema extends Schema<INumberSchemaType, INumberEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.Number;\r\n    protected currentField: Required<INumberEditorField>;\r\n    protected defaultField: Required<INumberEditorField>;\r\n\r\n    constructor(schema?: INumberSchemaType, field?: FieldWithoutType<INumberEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        let min: number, max: number;\r\n        let ex_min: boolean, ex_max: boolean;\r\n\r\n        if (schema) {\r\n            if (schema.minimum) {\r\n                min = schema.minimum;\r\n                ex_min = false;\r\n            } else if (schema.exclusiveMinimum) {\r\n                min = schema.exclusiveMinimum;\r\n                ex_min = true;\r\n            } else {\r\n                min = NaN;\r\n                ex_min = false;\r\n            }\r\n\r\n            if (schema.maximum) {\r\n                max = schema.maximum;\r\n                ex_max = false;\r\n            } else if (schema.exclusiveMaximum) {\r\n                max = schema.exclusiveMaximum;\r\n                ex_max = true;\r\n            } else {\r\n                max = NaN;\r\n                ex_max = false;\r\n            }\r\n        } else {\r\n            min = max = NaN;\r\n            ex_min = ex_max = false;\r\n        }\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", NaN, schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", NaN, schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            multipleOf: this.retrieveDefaultOptionValue(\"multipleOf\", NaN, schema),\r\n\r\n            minimum: min,\r\n            maximum: max,\r\n            exclusiveMinimum: ex_min,\r\n            exclusiveMaximum: ex_max,\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    @CloneReturnValue\r\n    public recordField(\r\n        fieldName: keyof INumberEditorField,\r\n        changeEvent: React.ChangeEvent<HTMLInputElement>\r\n    ): Required<INumberEditorField> {\r\n        if (fieldName === \"$comment\" || fieldName === \"description\" || fieldName === \"name\" || fieldName === \"title\") {\r\n            this.currentField[fieldName] = changeEvent.target.value;\r\n        } else if (\r\n            fieldName === \"const\" ||\r\n            fieldName === \"default\" ||\r\n            fieldName === \"maximum\" ||\r\n            fieldName === \"minimum\" ||\r\n            fieldName === \"multipleOf\"\r\n        ) {\r\n            this.currentField[fieldName] = parseFloat(changeEvent.target.value);\r\n        } else if (fieldName === \"exclusiveMaximum\" || fieldName === \"exclusiveMinimum\" || fieldName === \"required\") {\r\n            this.currentField[fieldName] = changeEvent.target.checked;\r\n        }\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(NaN);\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = parseFloat(changeEvent.target.value);\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<INumberEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minimum = this.defaultField.minimum;\r\n        this.currentField.maximum = this.defaultField.maximum;\r\n        this.currentField.exclusiveMinimum = this.defaultField.exclusiveMinimum;\r\n        this.currentField.exclusiveMaximum = this.defaultField.exclusiveMaximum;\r\n        this.currentField.multipleOf = this.defaultField.multipleOf;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<INumberEditorField> {\r\n        this.currentField.default = NaN;\r\n        this.currentField.const = NaN;\r\n        this.currentField.enum = [];\r\n        this.currentField.minimum = NaN;\r\n        this.currentField.maximum = NaN;\r\n        this.currentField.exclusiveMinimum = false;\r\n        this.currentField.exclusiveMaximum = false;\r\n        this.currentField.multipleOf = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): INumberSchemaType {\r\n        const type = DataType.Number;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => !isNaN(e));\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", NaN);\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", NaN);\r\n        const multipleOf = this.exportSchemaWithoutUndefined(\"multipleOf\", NaN);\r\n\r\n        let min: XOR_Partial<{ exclusiveMinimum: number }, { minimum: number }> = {};\r\n        let max: XOR_Partial<{ exclusiveMaximum: number }, { maximum: number }> = {};\r\n\r\n        if (!isNaN(this.currentField.minimum)) {\r\n            if (this.currentField.exclusiveMinimum) {\r\n                min = { exclusiveMinimum: this.currentField.minimum };\r\n            } else {\r\n                min = { minimum: this.currentField.minimum };\r\n            }\r\n        }\r\n\r\n        if (!isNaN(this.currentField.maximum)) {\r\n            if (this.currentField.exclusiveMaximum) {\r\n                max = { exclusiveMaximum: this.currentField.maximum };\r\n            } else {\r\n                max = { maximum: this.currentField.maximum };\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...min,\r\n            ...max,\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...multipleOf,\r\n            ...enn,\r\n        };\r\n    }\r\n}\r\n\r\nexport default NumberSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport NumberSchema from \"../../model/schema/NumberSchema\";\r\nimport { INumberSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { INumberEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass NumberSchemaEditor extends SchemaEditor<INumberSchemaType, INumberEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: NumberSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: ISchemaEditorProps<INumberSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new NumberSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minimum > this.state.currentField.maximum) this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_VALUE);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<INumberSchemaType>, prevState: ISchemaEditorState<INumberEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minimum !== this.state.currentField.minimum &&\r\n                !(isNaN(prevState.currentField.minimum) && isNaN(this.state.currentField.minimum))) ||\r\n            (prevState.currentField.maximum !== this.state.currentField.maximum &&\r\n                !(isNaN(prevState.currentField.maximum) && isNaN(this.state.currentField.maximum)))\r\n        ) {\r\n            if (this.state.currentField.maximum < this.state.currentField.minimum) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_VALUE);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_VALUE);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): INumberSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row} controlId=\"MinValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Min Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.minimum}\r\n                                                    onChange={this.recordField.bind(this, \"minimum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMin\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                                                    checked={this.state.currentField.exclusiveMinimum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"MaxValue\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Max Value\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    value={this.state.currentField.maximum}\r\n                                                    onChange={this.recordField.bind(this, \"maximum\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Col lg=\"6\">\r\n                                                <Form.Check\r\n                                                    id=\"ExclusiveMax\"\r\n                                                    inline\r\n                                                    onChange={this.recordField.bind(this, \"exclusiveMaximum\")}\r\n                                                    checked={this.state.currentField.exclusiveMaximum ? true : false}\r\n                                                    label=\"Exclusive\"\r\n                                                    type=\"checkbox\"\r\n                                                    style={{ height: \"100%\" }}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                                                Multiple Of\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"MultipleOf\"\r\n                                                    value={this.state.currentField.multipleOf}\r\n                                                    onChange={this.recordField.bind(this, \"multipleOf\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    id=\"const\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            type=\"number\"\r\n                                            width={4}\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberSchemaEditor;\r\n","import React from \"react\";\r\n\r\nimport { FieldWithoutType, IChildProperty, IObjectEditorField, ISchemaEditorType } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue, NextId } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IChildrenSchemaType, IObjectSchemaType } from \"./type_schema\";\r\n\r\nclass ObjectSchema extends Schema<IObjectSchemaType, IObjectEditorField> {\r\n    protected type = DataType.Object;\r\n    protected currentField: Required<IObjectEditorField>;\r\n    protected defaultField: Required<IObjectEditorField>;\r\n    public readonly childrenProperty?: IChildProperty[];\r\n\r\n    constructor(schema?: IObjectSchemaType, field?: FieldWithoutType<IObjectEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            const: schema && schema.const ? JSON.stringify(schema.const, null, 4) : \"{}\",\r\n\r\n            maxProperties: this.retrieveDefaultOptionValue(\"maxProperties\", NaN, schema),\r\n            minProperties: this.retrieveDefaultOptionValue(\"minProperties\", NaN, schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField };\r\n\r\n        if (schema) this.childrenProperty = this.generateChildrenPropertyFromSchema(schema);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    recordCode(field: \"const\", value: string): Required<IObjectEditorField> {\r\n        this.currentField.const = value;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    generateChildrenPropertyFromSchema(schema: IObjectSchemaType): IChildProperty[] {\r\n        return Object.keys(schema.properties).map(field => {\r\n            return {\r\n                type: schema.properties[field].type,\r\n                selfId: NextId.next(\"child\").toString(),\r\n\r\n                hasSibling: true,\r\n                isDeleteable: true,\r\n                isRequiredFieldReadonly: false,\r\n                isNameFieldReadonly: false,\r\n\r\n                ref: React.createRef<ISchemaEditorType>(),\r\n\r\n                field: {\r\n                    name: field,\r\n                    required: schema.required.find(r => r === field) === undefined ? false : true,\r\n                },\r\n\r\n                schema: schema.properties[field],\r\n            };\r\n        });\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IObjectEditorField> {\r\n        this.currentField.maxProperties = this.defaultField.maxProperties;\r\n        this.currentField.minProperties = this.defaultField.minProperties;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IObjectEditorField> {\r\n        this.currentField.maxProperties = NaN;\r\n        this.currentField.minProperties = NaN;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(children?: IChildrenSchemaType): IObjectSchemaType {\r\n        const type = DataType.Object;\r\n\r\n        const genericSchema = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const maxProperties = this.exportSchemaWithoutUndefined(\"maxProperties\", NaN);\r\n        const minProperties = this.exportSchemaWithoutUndefined(\"minProperties\", NaN);\r\n\r\n        const constant: { const?: Record<string, unknown> } = {};\r\n\r\n        const constantTemp = JSON.parse(this.currentField.const.replace(/\\s/g, \"\")) as Record<string, unknown>;\r\n        if (Array.isArray(constantTemp) || typeof constantTemp !== \"object\")\r\n            throw new Error(\"const field in an Object DataType should be a valid object (array is invalid)\");\r\n        if (Object.keys(constantTemp).length > 0) constant.const = constantTemp;\r\n\r\n        const required: IObjectSchemaType[\"required\"] = [];\r\n        const properties: IObjectSchemaType[\"properties\"] = {};\r\n\r\n        if (children) {\r\n            for (const child of children) {\r\n                properties[child.name] = child.value;\r\n\r\n                if (child.required) {\r\n                    required.push(child.name);\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n            ...minProperties,\r\n            ...maxProperties,\r\n            required,\r\n            properties,\r\n            ...constant,\r\n        };\r\n    }\r\n}\r\n\r\nexport default ObjectSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, InputGroup, Row } from \"react-bootstrap\";\r\n\r\nimport ObjectSchema from \"../../model/schema/ObjectSchema\";\r\nimport { IObjectSchemaType } from \"../../model/schema/type_schema\";\r\nimport CodeField from \"../node_component/CodeField\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport ChildrenSchemaEditor from \"./ChildrenSchemaEditor\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { IObjectEditorField, ISchemaEditorProps, ISchemaEditorState } from \"./type_SchemaEditor\";\r\n\r\nclass ObjectSchemaEditor extends SchemaEditor<IObjectSchemaType, IObjectEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: ObjectSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    protected childrenRef: React.RefObject<ChildrenSchemaEditor>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: ISchemaEditorProps<IObjectSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.childrenRef = React.createRef<ChildrenSchemaEditor>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new ObjectSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: true,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.maxProperties < this.state.currentField.minProperties) {\r\n            this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_PROPERTIES);\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IObjectSchemaType>, prevState: ISchemaEditorState<IObjectEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.maxProperties !== this.state.currentField.maxProperties &&\r\n                !(isNaN(prevState.currentField.maxProperties) && isNaN(this.state.currentField.maxProperties))) ||\r\n            (prevState.currentField.minProperties !== this.state.currentField.minProperties &&\r\n                !(isNaN(prevState.currentField.minProperties) && isNaN(this.state.currentField.minProperties)))\r\n        ) {\r\n            if (this.state.currentField.maxProperties < this.state.currentField.minProperties) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_PROPERTIES);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_PROPERTIES);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IObjectSchemaType {\r\n        return this.schema.exportSchema(\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            this.childrenRef.current!.exportSchema()\r\n        );\r\n    }\r\n\r\n    recordCode(field: \"const\", value: string): void {\r\n        const currentField = this.schema.recordCode(field, value);\r\n\r\n        this.setState({ currentField });\r\n\r\n        try {\r\n            JSON.parse(value);\r\n            this.hintTextRef.current?.remove(Hint.Error.CANT_PARSE_JSON_CONST);\r\n        } catch (error) {\r\n            this.hintTextRef.current?.add(Hint.Error.CANT_PARSE_JSON_CONST);\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"auto\" htmlFor=\"MinProperties\">\r\n                                                Min Properties\r\n                                            </Form.Label>\r\n                                            <Col>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinProperties\"\r\n                                                    value={this.state.currentField.minProperties}\r\n                                                    onChange={this.recordField.bind(this, \"minProperties\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"auto\" htmlFor=\"MaxProperties\">\r\n                                                Max Properties\r\n                                            </Form.Label>\r\n                                            <Col>\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxProperties\"\r\n                                                    value={this.state.currentField.maxProperties}\r\n                                                    onChange={this.recordField.bind(this, \"maxProperties\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <InputGroup>\r\n                                                    <CodeField\r\n                                                        title=\"Object constant\"\r\n                                                        value={this.state.currentField.const}\r\n                                                        update={this.recordCode.bind(this, \"const\")}\r\n                                                    />\r\n                                                </InputGroup>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n                <ChildrenSchemaEditor\r\n                    ref={this.childrenRef}\r\n                    depth={this.props.depth}\r\n                    isNameUnique={true}\r\n                    childrenProperty={this.schema.childrenProperty}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ObjectSchemaEditor;\r\n","import { FieldWithoutType, IStringEditorField } from \"../../component/schema_editor/type_SchemaEditor\";\r\nimport { DataType } from \"../../type\";\r\nimport { CloneReturnValue } from \"../utility\";\r\nimport Schema from \"./Schema\";\r\nimport { IGenericSchemaType, ISchemaTypeEnummable, IStringSchemaType } from \"./type_schema\";\r\n\r\nclass StringSchema extends Schema<IStringSchemaType, IStringEditorField> implements ISchemaTypeEnummable {\r\n    protected type = DataType.String;\r\n    protected currentField: Required<IStringEditorField>;\r\n    protected defaultField: Required<IStringEditorField>;\r\n\r\n    constructor(schema?: IStringSchemaType, field?: FieldWithoutType<IStringEditorField>) {\r\n        super();\r\n\r\n        const genericField = this.getGenericFieldFromSchema(schema, field);\r\n\r\n        this.defaultField = {\r\n            ...genericField,\r\n\r\n            default: this.retrieveDefaultOptionValue(\"default\", \"\", schema),\r\n            const: this.retrieveDefaultOptionValue(\"const\", \"\", schema),\r\n            enum: this.retrieveDefaultOptionValue(\"enum\", [], schema),\r\n            minLength: this.retrieveDefaultOptionValue(\"minLength\", NaN, schema),\r\n            maxLength: this.retrieveDefaultOptionValue(\"maxLength\", NaN, schema),\r\n\r\n            format: this.retrieveDefaultOptionValue(\"format\", \"\" as IStringSchemaType[\"format\"], schema),\r\n            pattern: this.retrieveDefaultOptionValue(\"pattern\", \"\", schema),\r\n        };\r\n\r\n        this.currentField = { ...this.defaultField, enum: [...this.defaultField.enum] };\r\n    }\r\n\r\n    addEnum(): void {\r\n        this.currentField.enum.push(\"\");\r\n    }\r\n\r\n    updateEnum(index: number, changeEvent: React.ChangeEvent<HTMLInputElement>): void {\r\n        this.currentField.enum[index] = changeEvent.target.value;\r\n    }\r\n\r\n    deleteEnum(index: number): void {\r\n        this.currentField.enum.splice(index, 1);\r\n    }\r\n\r\n    @CloneReturnValue\r\n    resetOptionField(): Required<IStringEditorField> {\r\n        this.currentField.default = this.defaultField.default;\r\n        this.currentField.const = this.defaultField.const;\r\n        this.currentField.enum = [...this.defaultField.enum];\r\n        this.currentField.minLength = this.defaultField.minLength;\r\n        this.currentField.maxLength = this.defaultField.maxLength;\r\n        this.currentField.format = this.defaultField.format;\r\n        this.currentField.pattern = this.defaultField.pattern;\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    @CloneReturnValue\r\n    clearOptionField(): Required<IStringEditorField> {\r\n        this.currentField.default = \"\";\r\n        this.currentField.const = \"\";\r\n        this.currentField.enum = [];\r\n        this.currentField.minLength = NaN;\r\n        this.currentField.maxLength = NaN;\r\n        this.currentField.format = \"\" as Required<IStringEditorField>[\"format\"];\r\n        this.currentField.pattern = \"\";\r\n\r\n        return this.currentField;\r\n    }\r\n\r\n    exportSchema(): IStringSchemaType {\r\n        const type = DataType.String;\r\n\r\n        const genericSchema: IGenericSchemaType = this.getGenericSchemaFromField(this.currentField);\r\n\r\n        const enumeration = this.currentField.enum.filter(e => e !== \"\");\r\n        const enn = enumeration.length > 0 ? { enum: enumeration } : {};\r\n\r\n        const defaultValue = this.exportSchemaWithoutUndefined(\"default\", \"\");\r\n        const constValue = this.exportSchemaWithoutUndefined(\"const\", \"\");\r\n        const minLength = this.exportSchemaWithoutUndefined(\"minLength\", NaN);\r\n        const maxLength = this.exportSchemaWithoutUndefined(\"maxLength\", NaN);\r\n        const format = this.exportSchemaWithoutUndefined(\"format\", \"\" as Required<IStringEditorField>[\"format\"]);\r\n        const pattern = this.exportSchemaWithoutUndefined(\"pattern\", \"\");\r\n\r\n        return {\r\n            type,\r\n            ...genericSchema,\r\n\r\n            ...defaultValue,\r\n            ...constValue,\r\n            ...minLength,\r\n            ...maxLength,\r\n            ...enn,\r\n\r\n            ...format,\r\n            ...pattern,\r\n        };\r\n    }\r\n}\r\n\r\nexport default StringSchema;\r\n","import React from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nimport StringSchema from \"../../model/schema/StringSchema\";\r\nimport { IStringSchemaType } from \"../../model/schema/type_schema\";\r\nimport EditorOptionModal from \"../node_component/EditorOptionModal\";\r\nimport EnumField from \"../node_component/EnumField\";\r\nimport GenericField from \"../node_component/GenericField\";\r\nimport HintText from \"../node_component/HintText\";\r\nimport OptionsButtons from \"../node_component/OptionsButtons\";\r\nimport SpaceFront from \"../node_component/SpaceFront\";\r\nimport { Hint, IGenericFieldOptions, IOptionsButtonsAttr } from \"../node_component/type_NodeComponent\";\r\nimport SchemaEditor from \"./SchemaEditor\";\r\nimport { ISchemaEditorProps, ISchemaEditorState, IStringEditorField } from \"./type_SchemaEditor\";\r\n\r\nclass StringSchemaEditor extends SchemaEditor<IStringSchemaType, IStringEditorField> {\r\n    protected optionsButtonsAttr: IOptionsButtonsAttr;\r\n    protected genericFieldOptions: IGenericFieldOptions;\r\n    public schema: StringSchema;\r\n\r\n    protected optionModalRef: React.RefObject<EditorOptionModal>;\r\n    protected genericFieldRef: React.RefObject<GenericField>;\r\n    private hintTextRef: React.RefObject<HintText>;\r\n\r\n    constructor(props: ISchemaEditorProps<IStringSchemaType>) {\r\n        super(props);\r\n\r\n        this.optionModalRef = React.createRef<EditorOptionModal>();\r\n        this.genericFieldRef = React.createRef<GenericField>();\r\n        this.hintTextRef = React.createRef<HintText>();\r\n\r\n        this.schema = new StringSchema(props.schema, props.field);\r\n\r\n        this.optionsButtonsAttr = {\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            isDeleteable: true,\r\n            isOptionExist: true,\r\n            ...props, // override hasSibling, isDeleteable\r\n        };\r\n\r\n        this.genericFieldOptions = {\r\n            ...props, // override isRequiredFieldReadonly, isNameFieldReadonly\r\n        };\r\n\r\n        this.state = {\r\n            currentField: this.schema.getDefaultField(),\r\n        };\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        if (this.state.currentField.minLength > this.state.currentField.maxLength)\r\n            this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_LENGTH);\r\n    }\r\n\r\n    componentDidUpdate(prevProps: ISchemaEditorProps<IStringSchemaType>, prevState: ISchemaEditorState<IStringEditorField>): void {\r\n        if (\r\n            // NaN === NaN (get false)\r\n            // NaN !== NaN (get true)\r\n            (prevState.currentField.minLength !== this.state.currentField.minLength &&\r\n                !(isNaN(prevState.currentField.minLength) && isNaN(this.state.currentField.minLength))) ||\r\n            (prevState.currentField.maxLength !== this.state.currentField.maxLength &&\r\n                !(isNaN(prevState.currentField.maxLength) && isNaN(this.state.currentField.maxLength)))\r\n        ) {\r\n            if (this.state.currentField.minLength > this.state.currentField.maxLength) {\r\n                this.hintTextRef.current?.add(Hint.Warn.MIN_GT_MAX_LENGTH);\r\n            } else {\r\n                this.hintTextRef.current?.remove(Hint.Warn.MIN_GT_MAX_LENGTH);\r\n            }\r\n        }\r\n    }\r\n\r\n    exportSchema(): IStringSchemaType {\r\n        return this.schema.exportSchema();\r\n    }\r\n\r\n    updateEnum(index?: number, changeEvent?: React.ChangeEvent<HTMLInputElement>): void {\r\n        if (index === undefined && changeEvent === undefined) this.schema.addEnum();\r\n        else if (index !== undefined && changeEvent === undefined) this.schema.deleteEnum(index);\r\n        else if (index !== undefined && changeEvent !== undefined) this.schema.updateEnum(index, changeEvent);\r\n\r\n        this.setState({ currentField: this.schema.getCurrentField() });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Row>\r\n                    <SpaceFront depth={this.props.depth} />\r\n\r\n                    <Col>\r\n                        <HintText ref={this.hintTextRef} />\r\n\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Col lg={11}>\r\n                                    <GenericField\r\n                                        ref={this.genericFieldRef}\r\n                                        schemaType={this.schema}\r\n                                        options={this.genericFieldOptions}\r\n                                        changeType={this.props.changeType}\r\n                                        changeName={this.props.changeName}\r\n                                    />\r\n                                </Col>\r\n                                <Col lg={1}>\r\n                                    <OptionsButtons\r\n                                        buttonOptions={this.optionsButtonsAttr}\r\n                                        delete={this.delete.bind(this)}\r\n                                        addChild={this.addChild.bind(this)}\r\n                                        addSibling={this.addSibling.bind(this)}\r\n                                        showOptionModal={this.showOptionModal.bind(this, true)}\r\n                                    />\r\n                                </Col>\r\n                                <EditorOptionModal\r\n                                    clearOptionFieldForm={this.clearOptionField.bind(this)}\r\n                                    resetOptionFiledForm={this.resetOptionField.bind(this)}\r\n                                    ref={this.optionModalRef}\r\n                                >\r\n                                    <Form>\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                                                Default\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    id=\"Default\"\r\n                                                    value={this.state.currentField.default}\r\n                                                    onChange={this.recordField.bind(this, \"default\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row}>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                                                Min Length\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MinLength\"\r\n                                                    value={this.state.currentField.minLength}\r\n                                                    onChange={this.recordField.bind(this, \"minLength\")}\r\n                                                />\r\n                                            </Col>\r\n                                            <Form.Label column lg=\"2\" htmlFor=\"MaxLength\">\r\n                                                Max Length\r\n                                            </Form.Label>\r\n                                            <Col lg=\"4\">\r\n                                                <Form.Control\r\n                                                    type=\"number\"\r\n                                                    min=\"0\"\r\n                                                    id=\"MaxLength\"\r\n                                                    value={this.state.currentField.maxLength}\r\n                                                    onChange={this.recordField.bind(this, \"maxLength\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"Format\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Format\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    as=\"select\"\r\n                                                    value={this.state.currentField.format}\r\n                                                    onChange={this.recordField.bind(this, \"format\")}\r\n                                                >\r\n                                                    <option disabled hidden value=\"\">\r\n                                                        {\" \"}\r\n                                                    </option>\r\n                                                    {[\r\n                                                        \"date-time\",\r\n                                                        \"time\",\r\n                                                        \"date\",\r\n                                                        \"email\",\r\n                                                        \"idn-email\",\r\n                                                        \"hostname\",\r\n                                                        \"idn-hostname\",\r\n                                                        \"ipv4\",\r\n                                                        \"ipv6\",\r\n                                                        \"uri\",\r\n                                                        \"uri-reference\",\r\n                                                        \"iri\",\r\n                                                        \"iri-reference\",\r\n                                                        \"uri-template\",\r\n                                                        \"json-pointer\",\r\n                                                        \"relative-json-pointer\",\r\n                                                        \"regex\",\r\n                                                    ].map((v, i) => (\r\n                                                        <option key={i} value={v}>\r\n                                                            {v}\r\n                                                        </option>\r\n                                                    ))}\r\n                                                </Form.Control>\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"Pattern\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Pattern\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Regular Expression\"\r\n                                                    value={this.state.currentField.pattern}\r\n                                                    onChange={this.recordField.bind(this, \"pattern\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <Form.Group as={Row} controlId=\"const\">\r\n                                            <Form.Label column lg=\"2\">\r\n                                                Constant\r\n                                            </Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control\r\n                                                    type=\"text\"\r\n                                                    placeholder=\"Restricted Value\"\r\n                                                    value={this.state.currentField.const}\r\n                                                    onChange={this.recordField.bind(this, \"const\")}\r\n                                                />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n\r\n                                        <EnumField\r\n                                            type=\"text\"\r\n                                            width={10}\r\n                                            value={this.state.currentField.enum}\r\n                                            add={(): void => this.updateEnum()}\r\n                                            update={this.updateEnum.bind(this)}\r\n                                            delete={(index: number): void => this.updateEnum(index)}\r\n                                        />\r\n                                    </Form>\r\n                                </EditorOptionModal>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default StringSchemaEditor;\r\n","/* eslint-disable */\r\n// I think there is some bugs  in either eslint or react to use forwardref\r\nimport React from \"react\";\r\n\r\nimport {\r\n    IArraySchemaType,\r\n    IBooleanSchemaType,\r\n    IIntegerSchemaType,\r\n    INullSchemaType,\r\n    INumberSchemaType,\r\n    IObjectSchemaType,\r\n    ISchemaType,\r\n    IStringSchemaType,\r\n} from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport { IGenericField } from \"../node_component/type_NodeComponent\";\r\nimport ArraySchemaEditor from \"./ArraySchemaEditor\";\r\nimport BooleanSchemaEditor from \"./BooleanSchemaEditor\";\r\nimport IntegerSchemaEditor from \"./IntegerSchemaEditor\";\r\nimport NullSchemaEditor from \"./NullSchemaEditor\";\r\nimport NumberSchemaEditor from \"./NumberSchemaEditor\";\r\nimport ObjectSchemaEditor from \"./ObjectSchemaEditor\";\r\nimport StringSchemaEditor from \"./StringSchemaEditor\";\r\nimport { ISchemaEditorProps, ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ntype FactoryProps = Omit<ISchemaEditorProps<ISchemaType>, \"field\"> & {\r\n    type: DataType;\r\n    field?: Omit<IGenericField, \"type\">;\r\n};\r\n\r\nconst SchemaEditorFactory = React.forwardRef<ISchemaEditorType, FactoryProps>((props, ref) => {\r\n    switch (props.type) {\r\n        case DataType.Array:\r\n            return (\r\n                <ArraySchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IArraySchemaType }}\r\n                    ref={ref as React.RefObject<ArraySchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Boolean:\r\n            return (\r\n                <BooleanSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IBooleanSchemaType }}\r\n                    ref={ref as React.RefObject<BooleanSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Integer:\r\n            return (\r\n                <IntegerSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IIntegerSchemaType }}\r\n                    ref={ref as React.RefObject<IntegerSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Number:\r\n            return (\r\n                <NumberSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as INumberSchemaType }}\r\n                    ref={ref as React.RefObject<NumberSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Null:\r\n            return (\r\n                <NullSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as INullSchemaType }}\r\n                    ref={ref as React.RefObject<NullSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.Object:\r\n            return (\r\n                <ObjectSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IObjectSchemaType }}\r\n                    ref={ref as React.RefObject<ObjectSchemaEditor>}\r\n                />\r\n            );\r\n        case DataType.String:\r\n            return (\r\n                <StringSchemaEditor\r\n                    {...{ ...props, field: props.field, schema: props.schema as IStringSchemaType }}\r\n                    ref={ref as React.RefObject<StringSchemaEditor>}\r\n                />\r\n            );\r\n    }\r\n});\r\n\r\n// make eslint happy\r\nSchemaEditorFactory.displayName = \"SchemaEditorFactory\";\r\n\r\nexport default SchemaEditorFactory;\r\n","import React from \"react\";\r\n\r\nimport { ISchemaType } from \"../../model/schema/type_schema\";\r\nimport { DataType } from \"../../type\";\r\nimport SchemaEditorFactory from \"./SchemaEditorFactory\";\r\nimport { ISchemaEditorType } from \"./type_SchemaEditor\";\r\n\r\ninterface RootSchemaEditorProps {\r\n    schema?: ISchemaType;\r\n}\r\n\r\nclass RootSchemaEditor extends React.Component<RootSchemaEditorProps, { type: DataType }> {\r\n    private editorRef: React.RefObject<ISchemaEditorType>;\r\n\r\n    constructor(props: RootSchemaEditorProps) {\r\n        super(props);\r\n\r\n        this.editorRef = React.createRef<ISchemaEditorType>();\r\n\r\n        if (props.schema) {\r\n            this.state = { type: props.schema.type };\r\n        } else {\r\n            this.state = { type: DataType.Object };\r\n        }\r\n    }\r\n\r\n    changeType(type: DataType): void {\r\n        this.setState({ type });\r\n    }\r\n\r\n    changeName(): void {\r\n        console.log(`[Root Node] Change Name!!`);\r\n    }\r\n\r\n    exportSchema(): ISchemaType {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        return this.editorRef.current!.exportSchema();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <SchemaEditorFactory\r\n                ref={this.editorRef}\r\n                type={this.state.type}\r\n                schema={this.props.schema}\r\n                depth={0}\r\n                field={{ name: \"root\", required: true }}\r\n                hasSibling={false}\r\n                isDeleteable={false}\r\n                isRequiredFieldReadonly={true}\r\n                isNameFieldReadonly={true}\r\n                changeType={this.changeType.bind(this)}\r\n                changeName={this.changeName.bind(this)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default RootSchemaEditor;\r\n","import Ajv from \"ajv\";\r\nimport draft_04_meta from \"ajv/lib/refs/json-schema-draft-04.json\";\r\nimport draft_06_meta from \"ajv/lib/refs/json-schema-draft-06.json\";\r\nimport React from \"react\";\r\nimport { Button, Toast } from \"react-bootstrap\";\r\n\r\nimport { ISchemaType } from \"../model/schema/type_schema\";\r\nimport { NextId } from \"../model/utility\";\r\nimport RootSchemaEditor from \"./schema_editor/RootSchemaEditor\";\r\nimport { EmptyProps } from \"./type_component\";\r\n\r\ninterface IEditorState {\r\n    error?: string;\r\n    schema?: ISchemaType;\r\n}\r\n\r\nclass Editor extends React.Component<EmptyProps, IEditorState> {\r\n    private fileUploadRef: React.RefObject<HTMLInputElement>;\r\n    private editorRef: React.RefObject<RootSchemaEditor>;\r\n    private rootSchemaEditorKey: string;\r\n\r\n    constructor(props: EmptyProps) {\r\n        super(props);\r\n\r\n        this.fileUploadRef = React.createRef<HTMLInputElement>();\r\n        this.editorRef = React.createRef<RootSchemaEditor>();\r\n\r\n        this.rootSchemaEditorKey = NextId.next(\"key\").toString();\r\n\r\n        this.state = {};\r\n    }\r\n\r\n    toggleImport(): void {\r\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n        this.fileUploadRef.current!.click();\r\n    }\r\n\r\n    async import(event: React.ChangeEvent<HTMLInputElement>): Promise<void> {\r\n        if (event.target.files) {\r\n            try {\r\n                const text = await event.target.files[0].text();\r\n                const schema = JSON.parse(text);\r\n\r\n                const validator = new Ajv({ schemaId: \"auto\" });\r\n                validator.addMetaSchema(draft_04_meta);\r\n                validator.addMetaSchema(draft_06_meta);\r\n\r\n                const result = validator.validateSchema(schema);\r\n\r\n                if (!result) {\r\n                    this.setState({\r\n                        error: \"Parsing Schema Error! We only support draft-04/06/07\",\r\n                    });\r\n                } else {\r\n                    this.rootSchemaEditorKey = NextId.next(\"key\").toString();\r\n                    this.setState({ schema });\r\n                }\r\n            } catch (error) {\r\n                this.setState({\r\n                    error: \"Parsing Schema Error! Please check your schema.\",\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    export(): void {\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n            const schema = this.editorRef.current!.exportSchema();\r\n\r\n            const fileBlob = new Blob([JSON.stringify(schema, null, 4)], { type: \"application/schema+json\" });\r\n            const blobURL = window.URL.createObjectURL(fileBlob);\r\n\r\n            const anchorElement = document.createElement(\"a\");\r\n            anchorElement.href = blobURL;\r\n            anchorElement.setAttribute(\"download\", \"Schema.json\");\r\n            document.body.appendChild(anchorElement);\r\n            anchorElement.click();\r\n\r\n            document.body.removeChild(anchorElement);\r\n        } catch (e) {\r\n            this.setState({ error: `Find Error: ${e.message} Please check and export again.` });\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div className=\"my-3 mx-4 \">\r\n                <input\r\n                    type=\"file\"\r\n                    id=\"file-uploader\"\r\n                    data-target=\"file-uploader\"\r\n                    hidden\r\n                    ref={this.fileUploadRef}\r\n                    onChange={this.import.bind(this)}\r\n                />\r\n                <Button variant=\"outline-primary\" onClick={this.toggleImport.bind(this)}>\r\n                    Import from file\r\n                </Button>{\" \"}\r\n                <Button variant=\"outline-success\" onClick={this.export.bind(this)}>\r\n                    Export Schema\r\n                </Button>\r\n                <RootSchemaEditor ref={this.editorRef} key={this.rootSchemaEditorKey} schema={this.state.schema} />\r\n                {this.state.error && (\r\n                    <Toast\r\n                        show={this.state.error ? true : false}\r\n                        onClose={(): void => {\r\n                            this.setState({ error: undefined });\r\n                        }}\r\n                        delay={3000}\r\n                        autohide\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            bottom: \"20px\",\r\n                            right: \"20px\",\r\n                            borderColor: \"red\",\r\n                            color: \"red\",\r\n                        }}\r\n                    >\r\n                        <Toast.Header style={{ borderColor: \"red\", color: \"red\" }}>\r\n                            <strong className=\"mr-auto\">Error</strong>\r\n                        </Toast.Header>\r\n                        <Toast.Body>{this.state.error}</Toast.Body>\r\n                    </Toast>\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Editor;\r\n","import React from \"react\";\r\nimport { Navbar } from \"react-bootstrap\";\r\n\r\nimport Editor from \"./Editor\";\r\n\r\nclass App extends React.Component {\r\n    render(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\">JSON Schema Editor</Navbar.Brand>\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text>\r\n                            <a href=\"https://github.com/JingWangTW/json-schema-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <img height=\"30px\" src=\"https://github.com/fluidicon.png\" alt=\"Github ICON\" />\r\n                            </a>\r\n                        </Navbar.Text>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n                <Editor />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === \"[::1]\" ||\r\n        // 127.0.0.0/8 are considered localhost for IPv4.\r\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" },\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\"No internet connection found. App is running in offline mode.\");\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import \"./index.css\";\r\n\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./component/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}