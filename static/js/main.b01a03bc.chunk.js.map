{"version":3,"sources":["component/nodes_component/data_type/Factory.tsx","component/nodes_component/ChildrenNodes.tsx","component/nodes_component/NodeOptionButtons.tsx","component/nodes_component/data_type/Node.tsx","component/nodes_component/data_type/Array.tsx","component/nodes_component/data_type/Boolean.tsx","component/nodes_component/data_type/Integer.tsx","component/nodes_component/data_type/Number.tsx","component/nodes_component/data_type/Null.tsx","component/nodes_component/data_type/Object.tsx","component/nodes_component/data_type/String.tsx","component/nodes_component/data_type/DataType.tsx","component/nodes_component/RootNode.tsx","component/layout/SchemaEditor.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["Factory","React","forwardRef","props","ref","type","DataType","Array","field","Boolean","Integer","Number","Null","Object","String","ChildrenNodes","Component","constructor","super","this","state","children","length","add","keyId","currentIndex","originChildren","p","isDeleteAble","hasSibling","requiredReadOnly","findIndex","child","splice","delete","bind","addSibling","nextId","createRef","setState","changeType","prevState","map","exportSchemaObj","error","Error","name","current","form","value","required","checkChildName","checkNameDuplicate","undefined","render","Row","Col","lg","className","style","width","depth","toString","color","index","key","changeName","ToggleAddButton","id","onClick","NodeOptionButtons","addHtmlDropId","addToolTipId","dropDownOnToggle","isOpen","event","metadata","stopPropagation","hasChild","Dropdown","onToggle","Toggle","as","Menu","Item","href","eventKey","clickAddSibling","clickAddChild","OverlayTrigger","trigger","overlay","Tooltip","clickDelete","clickOption","Node","selfType","childRef","optionFieldFormRef","fieldDefault","s","showOptionModal","showDescriptionModal","setShowOptionModal","isShow","setShowDescriptionEditorModal","addChild","preventDefault","target","Type","setField","fieldName","recordGenericField","checked","resetOptionFiledForm","ff","reset","info","Form","InputGroup","Prepend","Checkbox","defaultChecked","disabled","onChange","Control","placeholder","readOnly","defaultValue","custom","title","FormControl","description","Append","Button","variant","Modal","onHide","show","size","aria-labelledby","centered","Header","closeButton","Title","Body","Group","rows","OptionModal","controlId","Label","column","Footer","componentDidMount","maxItems","minItems","items","c","recordField","parseInt","optionError","htmlFor","min","Check","Input","uniqueItems","default","minExclusiveCheckedRef","maxExclusiveCheckedRef","minimum","exclusiveMinimum","maximum","exclusiveMaximum","recordEnumField","enum","e","i","addEnum","inline","label","height","enumeration","parseFloat","console","log","ObjectNode","maxProperties","minProperties","properties","push","maxLength","minLength","v","RootNode","nodeRef","SchemaEditor","rootNode","rootNodeRef","fileUploadRef","showExport","exportString","schema","toggleImport","click","importSchema","files","text","JSON","parse","validator","Ajv","schemaId","addMetaSchema","draft_06_meta","draft_04_meta","validateSchema","errorMessage","toggleExport","stringify","saveSchema","fileBlob","Blob","blobURL","window","URL","createObjectURL","anchorElement","document","createElement","setAttribute","body","appendChild","removeChild","data-target","hidden","scrollable","maxHeight","language","hljs","showLineNumbers","Toast","onClose","delay","autohide","position","bottom","right","borderColor","App","Navbar","collapseOnSelect","expand","bg","Brand","Collapse","Text","rel","src","alt","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b01a03bc.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as NodeField from '../interface/NodeField';\r\n\r\nimport { NodeFactoryProps } from '../interface/Props';\r\nimport * as DataType from './DataType';\r\n\r\nconst Factory = React.forwardRef<DataType.Node<NodeField.default>, NodeFactoryProps<NodeField.default>>((props, ref) => {\r\n\r\n    switch (props.type) {\r\n        case DataType.Type.Array:\r\n            return <DataType.ArrayNode  {...{ ...props, field: props.field as NodeField.ArrayField }} ref={ref as React.RefObject<DataType.ArrayNode>} />\r\n        case DataType.Type.Boolean:\r\n            return <DataType.BooleanNode {...{ ...props, field: props.field as NodeField.BooleanField }} ref={ref as React.RefObject<DataType.BooleanNode>} />\r\n        case DataType.Type.Integer:\r\n            return <DataType.IntegerNode {...{ ...props, field: props.field as NodeField.IntegerField }} ref={ref as React.RefObject<DataType.IntegerNode>} />\r\n        case DataType.Type.Number:\r\n            return <DataType.NumberNode {...{ ...props, field: props.field as NodeField.NumberField }} ref={ref as React.RefObject<DataType.NumberNode>} />\r\n        case DataType.Type.Null:\r\n            return <DataType.NullNode {...{ ...props, field: props.field as NodeField.NullField }} ref={ref as React.RefObject<DataType.NullNode>} />\r\n        case DataType.Type.Object:\r\n            return <DataType.ObjectNode {...{ ...props, field: props.field as NodeField.ObjectField }} ref={ref as React.RefObject<DataType.ObjectNode>} />\r\n        case DataType.Type.String:\r\n            return <DataType.StringNode {...{ ...props, field: props.field as NodeField.StringField }} ref={ref as React.RefObject<DataType.StringNode>} />\r\n        default:\r\n            return <DataType.ObjectNode {...{ ...props, field: props.field as NodeField.ObjectField }} ref={ref as React.RefObject<DataType.ObjectNode>} />\r\n    }\r\n});\r\n\r\nexport default Factory;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport nextId from \"react-id-generator\";\r\n\r\nimport NodeField from './interface/NodeField';\r\nimport { ChildrenSchema } from './interface/Schema';\r\nimport { NewChildNodeProps } from './interface/Props';\r\nimport * as DataType from './data_type/DataType';\r\nimport { Type, Node } from './data_type/DataType';\r\n\r\nimport Factory from './data_type/Factory';\r\n\r\ninterface ChildNodeProperty {\r\n\r\n    type: keyof typeof DataType.Type;\r\n    isDeleteAble: boolean;\r\n    hasSibling: boolean;\r\n    requiredReadOnly: boolean;\r\n    keyId: string;\r\n    ref: React.RefObject<DataType.Node<NodeField>>;\r\n\r\n    delete(keyId: string): void;\r\n    addSibling(keyId: string): void;\r\n}\r\n\r\ninterface ChildrenNodesProps {\r\n    depth: number;\r\n}\r\n\r\ninterface ChildrenNodesState {\r\n    children: Array<ChildNodeProperty>;\r\n\r\n    error?: string;\r\n};\r\n\r\nclass ChildrenNodes extends React.Component<ChildrenNodesProps, ChildrenNodesState>{\r\n\r\n    constructor(props: ChildrenNodesProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            children: [],\r\n        };\r\n    }\r\n\r\n    get length() {\r\n        return this.state.children.length;\r\n    }\r\n\r\n    add(keyId: string, props?: NewChildNodeProps): void {\r\n\r\n        const originChildren = this.state.children;\r\n        let currentIndex;\r\n\r\n        let p: NewChildNodeProps = {\r\n            isDeleteAble: true,\r\n            hasSibling: true,\r\n            requiredReadOnly: false,\r\n        }\r\n\r\n        if (props) {\r\n\r\n            p = {\r\n                ...p,\r\n                ...props\r\n            }\r\n        }\r\n\r\n        // push to the last one\r\n        if (keyId === \"\")\r\n            currentIndex = originChildren.length - 1;\r\n        else\r\n            currentIndex = originChildren.findIndex(child => child.keyId === keyId);;\r\n\r\n        originChildren.splice(currentIndex + 1, 0, {\r\n            delete: this.delete.bind(this),\r\n            addSibling: this.add.bind(this),\r\n            type: DataType.Type.Object,\r\n            isDeleteAble: p.isDeleteAble as boolean,\r\n            hasSibling: p.hasSibling as boolean,\r\n            requiredReadOnly: p.requiredReadOnly as boolean,\r\n            keyId: nextId('child_node-'),\r\n            ref: React.createRef<Node<NodeField>>()\r\n        })\r\n\r\n        this.setState({ children: originChildren })\r\n    }\r\n\r\n    delete(keyId: string) {\r\n\r\n        const originChildren = this.state.children;\r\n        const currentIndex = originChildren.findIndex(child => child.keyId === keyId);;\r\n\r\n        originChildren.splice(currentIndex, 1)\r\n\r\n        this.setState({ children: originChildren })\r\n    }\r\n\r\n    changeType(keyId: string, type: keyof typeof Type): void {\r\n\r\n        this.setState((prevState) => {\r\n\r\n            const children = prevState.children.map((child) => {\r\n\r\n                if (child.keyId === keyId) {\r\n                    return {\r\n                        ...child,\r\n                        type: type\r\n                    };\r\n                } else {\r\n                    return child;\r\n                }\r\n            });\r\n\r\n            return {\r\n                children\r\n            };\r\n        });\r\n    }\r\n\r\n    exportSchemaObj(): ChildrenSchema {\r\n\r\n        if (this.state.error) {\r\n\r\n            throw new Error(\"Find Error\");\r\n\r\n        } else {\r\n\r\n            return this.state.children.map(child => ({\r\n                name: child.ref.current!.form.name,\r\n                value: child.ref.current!.exportSchemaObj(),\r\n                required: child.ref.current!.form.required,\r\n            }));\r\n        }\r\n    }\r\n\r\n    checkChildName(keyId: string, name: string): void {\r\n\r\n        let checkNameDuplicate: boolean = false;\r\n\r\n        for (const child of this.state.children) {\r\n\r\n            if (child.keyId !== keyId && child.ref.current!.form.name === name) {\r\n                checkNameDuplicate = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (checkNameDuplicate) {\r\n\r\n            this.setState({ error: \"Find duplicated field name in this layer.\" })\r\n\r\n        } else {\r\n\r\n            this.setState({ error: undefined })\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.error &&\r\n                    <Row>\r\n                        <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (this.props.depth * 20).toString() + \"px\" }} />\r\n                        <Col>\r\n                            <span style={{ color: \"red\" }}>{this.state.error} </span>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                {\r\n                    this.state.children.map((child, index) =>\r\n                        <Factory key={child.keyId}\r\n                            {...child}\r\n                            ref={child.ref}\r\n                            changeType={this.changeType.bind(this)}\r\n                            changeName={this.checkChildName.bind(this)}\r\n                            depth={this.props.depth} />\r\n                    )\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChildrenNodes;","import React from 'react';\r\nimport { OverlayTrigger, Tooltip, Dropdown } from 'react-bootstrap';\r\nimport nextId from \"react-id-generator\";\r\nimport { FaRegTrashAlt, FaPlus } from 'react-icons/fa';\r\nimport { AiOutlineSetting } from 'react-icons/ai';\r\n\r\nimport '../../index.css';\r\n\r\ninterface NodeOptionButtonsProps {\r\n    hasChild: boolean;\r\n    hasSibling: boolean;\r\n\r\n    isDeleteAble: boolean;\r\n\r\n    clickOption(): void;\r\n\r\n    clickAddChild(): void;\r\n    clickAddSibling(): void;\r\n    clickDelete(): void;\r\n}\r\n\r\ninterface ToggleAddButtonProps {\r\n    id: string;\r\n    onClick(event: React.MouseEvent<HTMLSpanElement>): void;\r\n}\r\n\r\nconst ToggleAddButton = React.forwardRef<HTMLSpanElement, ToggleAddButtonProps>((props, ref) => (\r\n    <span\r\n        ref={ref}\r\n        id={props.id}\r\n        onClick={props.onClick}>\r\n        <FaPlus color=\"green\" />\r\n    </span>\r\n));\r\n\r\nclass NodeOptionButtons extends React.Component<NodeOptionButtonsProps, {}> {\r\n\r\n    private readonly addHtmlDropId = nextId(\"Add-Dropdown\");\r\n    private readonly addToolTipId = nextId(\"Add-Tooltip\")\r\n\r\n    dropDownOnToggle(isOpen: boolean,\r\n        event: React.SyntheticEvent<Dropdown>,\r\n        metadata: {\r\n            source: 'select' | 'click' | 'rootClose' | 'keydown'\r\n        }): void {\r\n\r\n        if (event)\r\n            event.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"node-option-block\">\r\n                {\r\n                    this.props.hasChild && this.props.hasSibling &&\r\n                    (\r\n                        <div className=\"node-option-btn-block\">\r\n                            <Dropdown onToggle={this.dropDownOnToggle.bind(this)}>\r\n                                <Dropdown.Toggle as={ToggleAddButton} id={this.addHtmlDropId} />\r\n\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item href=\"#\" eventKey=\"1\" onClick={this.props.clickAddSibling}>Add Sibling</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"#\" eventKey=\"2\" onClick={this.props.clickAddChild}>Add Child</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    )\r\n\r\n                }\r\n                {\r\n                    (this.props.hasChild !== this.props.hasSibling) &&\r\n                    (\r\n                        <div className=\"node-option-btn-block\" onClick={this.props.hasChild ? this.props.clickAddChild : this.props.clickAddSibling}>\r\n                            <OverlayTrigger\r\n                                trigger={[\"hover\", \"focus\"]}\r\n                                overlay={<Tooltip id={this.addToolTipId}> Add </Tooltip>}\r\n                            >\r\n                                <span><FaPlus color=\"green\" /></span>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                {\r\n                    this.props.isDeleteAble && (\r\n                        <div className=\"node-option-btn-block\" onClick={this.props.clickDelete}>\r\n                            <OverlayTrigger\r\n                                trigger={[\"hover\", \"focus\"]}\r\n                                overlay={<Tooltip id=\"delete-tooltip\"> Delete </Tooltip>}\r\n                            >\r\n                                <span><FaRegTrashAlt color=\"red\" /></span>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n\r\n                <div className=\"node-option-btn-block\" onClick={this.props.clickOption}>\r\n                    <OverlayTrigger\r\n                        trigger={[\"hover\", \"focus\"]}\r\n                        overlay={<Tooltip id=\"option-tooltip\"> Option </Tooltip>}\r\n                    >\r\n                        <span><AiOutlineSetting /></span>\r\n                    </OverlayTrigger>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodeOptionButtons;","import React from 'react';\r\nimport { Form, Col, InputGroup, Button, Modal, OverlayTrigger, Tooltip, FormControl, Row } from 'react-bootstrap';\r\nimport nextId from 'react-id-generator';\r\nimport { TiPencil } from 'react-icons/ti';\r\n\r\nimport { GenericField } from '../interface/NodeField';\r\nimport { NodeState } from '../interface/State';\r\nimport { NodeProps } from '../interface/Props';\r\nimport Schema from '../interface/Schema';\r\nimport ChildrenNodes from '../ChildrenNodes';\r\nimport { Type } from './DataType';\r\nimport NodeOptionButtons from '../NodeOptionButtons';\r\n\r\n\r\nabstract class Node<NodeFieldType extends GenericField> extends React.Component<NodeProps<NodeFieldType>, NodeState<NodeFieldType>> {\r\n\r\n    abstract OptionModal(): JSX.Element;\r\n    abstract recordField(fieldName: keyof NodeFieldType, event: React.ChangeEvent<HTMLElement>): void;\r\n    abstract exportSchemaObj(): Schema;\r\n\r\n    protected abstract readonly selfType: keyof typeof Type;\r\n\r\n    protected childRef: React.RefObject<ChildrenNodes>;\r\n    private optionFieldFormRef: React.RefObject<HTMLFormElement>;\r\n\r\n    constructor(props: NodeProps<NodeFieldType>) {\r\n\r\n        super(props);\r\n\r\n        this.childRef = React.createRef<ChildrenNodes>();\r\n        this.optionFieldFormRef = React.createRef<HTMLFormElement>();\r\n\r\n        let fieldDefault = {\r\n            name: nextId(\"field_\"),\r\n            required: true,\r\n        } as NodeFieldType\r\n\r\n        // I don't know why, but sometimes props will bring property \"filed\" and it's value is undefiend.\r\n        // As a result, I setState in two steps\r\n        let s = {\r\n            // default value\r\n            showOptionModal: false,\r\n            showDescriptionModal: false,\r\n            isDeleteAble: true,\r\n            hasChild: false,\r\n            hasSibling: true,\r\n            requiredReadOnly: false,\r\n\r\n            field: props.field ? { ...props.field, ...fieldDefault } : fieldDefault,\r\n\r\n            // set arguments\r\n            ...props,\r\n        }\r\n\r\n        if (!s.field)\r\n            s.field = fieldDefault;\r\n\r\n        this.state = s;\r\n    }\r\n\r\n    get form() {\r\n        return this.state.field;\r\n    }\r\n\r\n    setShowOptionModal(isShow: boolean): void {\r\n\r\n        this.setState({\r\n            showOptionModal: isShow,\r\n        });\r\n    }\r\n\r\n    setShowDescriptionEditorModal(isShow: boolean): void {\r\n\r\n        this.setState({\r\n            showDescriptionModal: isShow\r\n        });\r\n    }\r\n\r\n    addSibling(): void {\r\n\r\n        if (this.props.addSibling)\r\n            this.props.addSibling(this.props.keyId);\r\n    }\r\n\r\n    addChild(): void {\r\n\r\n        this.childRef.current!.add(\"\");\r\n\r\n    }\r\n\r\n    delete(): void {\r\n\r\n        if (this.props.delete)\r\n            this.props.delete(this.props.keyId)\r\n    }\r\n\r\n    changeType(event: React.ChangeEvent<HTMLSelectElement>): void {\r\n\r\n        event.preventDefault();\r\n\r\n        if (event.target.value in Type) {\r\n            this.props.changeType(this.props.keyId, (Type as any)[event.target.value])\r\n        }\r\n    }\r\n\r\n    setField<T>(fieldName: keyof NodeFieldType, value: T): void {\r\n\r\n        this.setState(prevState => ({\r\n            field: {\r\n                ...prevState.field,\r\n                [fieldName]: value\r\n            }\r\n        }))\r\n    }\r\n\r\n    recordGenericField(fieldName: keyof GenericField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"name\") {\r\n\r\n            // needs to check duplicated\r\n            this.props.changeName(this.props.keyId, event.target.value)\r\n\r\n            this.setField<string>(fieldName, event.target.value)\r\n        }\r\n        else if (fieldName === \"required\") {\r\n\r\n            this.setField<boolean>(fieldName, event.target.checked)\r\n        }\r\n        // description, title, $comment\r\n        else {\r\n\r\n            this.setField<string>(fieldName, event.target.value)\r\n        }\r\n    }\r\n\r\n    resetOptionFiledForm(): void {\r\n\r\n        let fieldName: keyof NodeFieldType;\r\n        let ff: NodeFieldType = this.state.field;\r\n\r\n        for (fieldName in ff) {\r\n            if (fieldName !== \"name\" && fieldName !== \"title\" && fieldName !== \"description\" && fieldName !== \"required\")\r\n                delete ff[fieldName]\r\n        }\r\n\r\n        if (this.optionFieldFormRef.current)\r\n            this.optionFieldFormRef.current.reset();\r\n\r\n        this.setState({\r\n            field: ff\r\n        });\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        return (\r\n            <div className=\"my-1\">\r\n                {\r\n                    this.state.info &&\r\n                    <Row>\r\n                        <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (this.props.depth * 20).toString() + \"px\" }} />\r\n                        <Col>\r\n                            <span style={{ color: \"green\" }}>{this.state.info} </span>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col lg={3}>\r\n                            <Row>\r\n                                <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (this.props.depth * 20).toString() + \"px\" }}>\r\n                                </Col>\r\n                                <Col>\r\n                                    <InputGroup>\r\n\r\n                                        <OverlayTrigger\r\n                                            trigger={[\"hover\", \"focus\"]}\r\n                                            overlay={<Tooltip id=\"add-tooltip\"> Required </Tooltip>}\r\n                                        >\r\n                                            <InputGroup.Prepend>\r\n                                                <InputGroup.Checkbox defaultChecked={this.state.field.required} disabled={this.state.requiredReadOnly} onChange={this.recordGenericField.bind(this, \"required\")} />\r\n                                            </InputGroup.Prepend>\r\n                                        </OverlayTrigger>\r\n\r\n                                        <Form.Control placeholder=\"items\"\r\n                                            required\r\n                                            readOnly={this.state.requiredReadOnly}\r\n                                            defaultValue={this.state.field.name}\r\n                                            onChange={this.recordGenericField.bind(this, \"name\")} />\r\n                                    </InputGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col lg={1}>\r\n                            <Form.Control as=\"select\" custom placeholder=\"DataType\" onChange={this.changeType.bind(this)} value={this.selfType}>\r\n                                <option>Object</option>\r\n                                <option>Array</option>\r\n                                <option>String</option>\r\n                                <option>Integer</option>\r\n                                <option>Number</option>\r\n                                <option>Null</option>\r\n                                <option>Boolean</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n                        <Col lg={3}>\r\n                            <Form.Control placeholder=\"Titile\" defaultValue={this.state.field.title} onChange={this.recordGenericField.bind(this, \"title\")} />\r\n                        </Col>\r\n                        <Col lg={4}>\r\n\r\n                            <InputGroup>\r\n                                <FormControl type=\"text\" id=\"Description\" placeholder=\"Description\" defaultValue={this.state.field.description} onChange={this.recordGenericField.bind(this, \"description\")} />\r\n                                <OverlayTrigger\r\n                                    trigger={[\"hover\", \"focus\"]}\r\n                                    overlay={<Tooltip id=\"add-tooltip\"> Edit </Tooltip>}\r\n                                >\r\n                                    <InputGroup.Append>\r\n                                        <Button variant=\"outline-primary\" onClick={this.setShowDescriptionEditorModal.bind(this, true)}>\r\n                                            <TiPencil />\r\n                                        </Button>\r\n                                    </InputGroup.Append>\r\n                                </OverlayTrigger>\r\n                            </InputGroup>\r\n\r\n                            <Modal\r\n                                onHide={this.setShowDescriptionEditorModal.bind(this, false)}\r\n                                show={this.state.showDescriptionModal}\r\n                                size=\"lg\"\r\n                                aria-labelledby=\"description-modal\"\r\n                                centered\r\n                            >\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title id=\"description-modal\">\r\n                                        Description\r\n                                    </Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Control as=\"textarea\" rows={3} defaultValue={this.state.field.description} onChange={this.recordGenericField.bind(this, \"description\")} />\r\n                                    </Form.Group>\r\n                                </Modal.Body>\r\n                            </Modal>\r\n                        </Col>\r\n                        <Col lg={1}>\r\n                            <NodeOptionButtons\r\n                                hasChild={this.state.hasChild}\r\n                                hasSibling={this.state.hasSibling}\r\n                                isDeleteAble={this.state.isDeleteAble}\r\n                                clickAddChild={this.addChild.bind(this)}\r\n                                clickAddSibling={this.addSibling.bind(this)}\r\n                                clickDelete={this.delete.bind(this)}\r\n                                clickOption={this.setShowOptionModal.bind(this, true)}\r\n                            />\r\n\r\n                            <Modal\r\n                                onHide={this.setShowOptionModal.bind(this, false)}\r\n                                show={this.state.showOptionModal}\r\n                                size=\"lg\"\r\n                                aria-labelledby=\"option-modal\"\r\n                                centered\r\n                            >\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title id=\"option-modal\">\r\n                                        Advanced Options\r\n                                </Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <Form ref={this.optionFieldFormRef}>\r\n                                        {this.OptionModal()}\r\n                                        <Form.Group as={Row} controlId=\"comment\">\r\n                                            <Form.Label column lg=\"2\">Comment</Form.Label>\r\n                                            <Col lg=\"10\">\r\n                                                <Form.Control as=\"textarea\" rows={3} onChange={this.recordGenericField.bind(this, \"$comment\")} />\r\n                                            </Col>\r\n                                        </Form.Group>\r\n                                    </Form>\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button variant=\"outline-secondary\" onClick={this.resetOptionFiledForm.bind(this)}>Clear</Button>\r\n                                    <Button variant=\"outline-success\" onClick={this.setShowOptionModal.bind(this, false)}>Close</Button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n                {this.state.hasChild && <ChildrenNodes ref={this.childRef} depth={this.props.depth + 1} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React from 'react';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\n\r\nimport { ArrayField } from '../interface/NodeField';\r\nimport { NodeProps } from '../interface/Props';\r\nimport Schema, { ArraySchema } from '../interface/Schema';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass Array extends Node<ArrayField> {\r\n\r\n    protected readonly selfType = Type.Array;\r\n\r\n    constructor(props: NodeProps<ArrayField>) {\r\n        super({\r\n            ...props,\r\n            hasChild: true,\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.addChild();\r\n    }\r\n\r\n    exportSchemaObj(): ArraySchema {\r\n\r\n        if (this.state.field.maxItems && this.state.field.minItems && this.state.field.minItems > this.state.field.maxItems)\r\n            throw new Error(\"Find Error\");\r\n\r\n\r\n        let child = this.childRef.current!.exportSchemaObj();\r\n        let items: Schema | Schema[];\r\n\r\n        if (child.length === 1) {\r\n\r\n            items = child[0].value;\r\n\r\n        } else {\r\n\r\n            items = child.map(c => c.value)\r\n\r\n        }\r\n\r\n        return {\r\n            type: \"array\",\r\n            ...{ ...this.state.field, required: undefined, name: undefined },\r\n\r\n            items\r\n        }\r\n    }\r\n\r\n    addChild(): void {\r\n\r\n        if (this.childRef.current!.length === 0) {\r\n\r\n            this.childRef.current!.add(\"\", {\r\n                isDeleteAble: false,\r\n                hasSibling: true,\r\n                requiredReadOnly: true,\r\n            });\r\n\r\n        } else {\r\n\r\n            this.childRef.current!.add(\"\", {\r\n                isDeleteAble: true,\r\n                hasSibling: true,\r\n                requiredReadOnly: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    delete(): void {\r\n\r\n        if (this.props.delete)\r\n            this.props.delete(this.props.keyId)\r\n    }\r\n\r\n    recordField(fieldName: keyof ArrayField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        // minItems, max_Items\r\n        if (fieldName === \"minItems\" || fieldName === \"maxItems\") {\r\n\r\n            this.setField<number>(fieldName, parseInt(event.target.value))\r\n\r\n            // to check if value is correct\r\n            if ((fieldName === \"minItems\" && this.state.field.maxItems && parseInt(event.target.value) > this.state.field.maxItems) ||\r\n                (fieldName === \"maxItems\" && this.state.field.minItems && parseInt(event.target.value) < this.state.field.minItems)) {\r\n\r\n                this.setState({ optionError: \"The number of Min Items should less than or equal to Max Items.\" })\r\n            } else {\r\n                this.setState({ optionError: undefined })\r\n            }\r\n\r\n            // uniqueItems\r\n        } else {\r\n\r\n            this.setField<boolean>(fieldName, event.target.checked)\r\n        }\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.optionError &&\r\n                    <span style={{ color: \"red\" }}>{this.state.optionError} </span>\r\n                }\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MinItems\">\r\n                        Min Items\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MinItems\" defaultValue={this.state.field.minItems} onChange={this.recordField.bind(this, \"minItems\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MaxItems\">\r\n                        Max Items\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MaxItems\" defaultValue={this.state.field.maxItems} onChange={this.recordField.bind(this, \"maxItems\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n                <Form.Group>\r\n                    <Form.Check type=\"checkbox\" id=\"uniqueCheckbox\">\r\n                        <Form.Check.Input type=\"checkbox\" defaultChecked={this.state.field.uniqueItems} checked={this.state.field.uniqueItems} onChange={this.recordField.bind(this, \"uniqueItems\")} />\r\n                        <Form.Check.Label>Unique Items</Form.Check.Label>\r\n                    </Form.Check>\r\n                </Form.Group>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Array;","import React from 'react';\r\nimport { Form, Col, Row } from 'react-bootstrap';\r\n\r\nimport { BooleanField } from '../interface/NodeField';\r\nimport { BooleanSchema } from '../interface/Schema';\r\nimport { Type } from './DataType';\r\nimport Node from './Node';\r\n\r\nclass Boolean extends Node<BooleanField> {\r\n\r\n    protected readonly selfType = Type.Boolean;\r\n\r\n    recordField(fieldName: keyof BooleanField, event: React.ChangeEvent<HTMLSelectElement>): void {\r\n\r\n        if (event.target.value === \"\")\r\n            this.setField<undefined>(fieldName, undefined);\r\n        else if (event.target.value === \"True\")\r\n            this.setField<boolean>(fieldName, true);\r\n        else\r\n            this.setField<boolean>(fieldName, false);\r\n    }\r\n\r\n    exportSchemaObj(): BooleanSchema {\r\n\r\n        return {\r\n            type: \"boolean\",\r\n            default: this.state.field.default,\r\n        };\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control as=\"select\" onChange={this.recordField.bind(this, \"default\")}>\r\n                            <option></option>\r\n                            <option>True</option>\r\n                            <option>False</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Boolean;","import React from 'react';\r\nimport { Form, Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nimport { NodeProps } from '../interface/Props';\r\nimport { IntegerField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\nimport { IntegerSchema } from '../interface/Schema';\r\n\r\nclass Integer extends Node<IntegerField> {\r\n\r\n    protected readonly selfType = Type.Integer;\r\n    private readonly minExclusiveCheckedRef: React.RefObject<HTMLInputElement>;\r\n    private readonly maxExclusiveCheckedRef: React.RefObject<HTMLInputElement>;\r\n\r\n    constructor(props: NodeProps<IntegerField>) {\r\n        super(props);\r\n\r\n        this.minExclusiveCheckedRef = React.createRef<HTMLInputElement>();\r\n        this.maxExclusiveCheckedRef = React.createRef<HTMLInputElement>();\r\n    }\r\n\r\n    recordField(fieldName: keyof IntegerField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        event.preventDefault();\r\n\r\n        if (fieldName === \"default\" || fieldName === \"const\" || fieldName === \"multipleOf\") {\r\n\r\n            this.setField<number>(fieldName, parseInt(event.target.value))\r\n\r\n        } else if (fieldName === \"minimum\") {\r\n\r\n            if (this.minExclusiveCheckedRef.current!.checked) {\r\n\r\n                this.setField<number>(\"exclusiveMinimum\", parseInt(event.target.value))\r\n                this.setField<undefined>(\"minimum\", undefined)\r\n\r\n            } else {\r\n\r\n                this.setField<number>(\"minimum\", parseInt(event.target.value))\r\n                this.setField<undefined>(\"exclusiveMinimum\", undefined)\r\n            }\r\n\r\n        } else if (fieldName === \"maximum\") {\r\n\r\n\r\n            if (this.maxExclusiveCheckedRef.current!.checked) {\r\n\r\n                this.setField<number>(\"exclusiveMaximum\", parseInt(event.target.value))\r\n                this.setField<undefined>(\"maximum\", undefined)\r\n\r\n            } else {\r\n\r\n                this.setField<number>(\"maximum\", parseInt(event.target.value))\r\n                this.setField<undefined>(\"exclusiveMaximum\", undefined)\r\n            }\r\n        } else if (fieldName === \"exclusiveMinimum\") {\r\n\r\n            if (event.target.checked && this.state.field.minimum) {\r\n\r\n                this.setField<number>(\"exclusiveMinimum\", this.state.field.minimum)\r\n                this.setField<undefined>(\"minimum\", undefined)\r\n\r\n            } else if (!event.target.checked && this.state.field.exclusiveMinimum) {\r\n\r\n                this.setField<number>(\"minimum\", this.state.field.exclusiveMinimum)\r\n                this.setField<undefined>(\"exclusiveMinimum\", undefined)\r\n            }\r\n        } else if (fieldName === \"exclusiveMaximum\") {\r\n\r\n            if (event.target.checked && this.state.field.maximum) {\r\n\r\n                this.setField<number>(\"exclusiveMaximum\", this.state.field.maximum)\r\n                this.setField<undefined>(\"maximum\", undefined)\r\n\r\n            } else if (!event.target.checked && this.state.field.exclusiveMaximum) {\r\n\r\n                this.setField<number>(\"maximum\", this.state.field.exclusiveMaximum)\r\n                this.setField<undefined>(\"exclusiveMaximum\", undefined)\r\n            }\r\n        }\r\n    }\r\n\r\n    recordEnumField(key: number, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        event.preventDefault();\r\n\r\n        this.setField<(number | string)[]>(\"enum\", this.state.field.enum!.map((e, i) => i === key ? parseInt(event.target.value) : e))\r\n    }\r\n\r\n    addEnum(event: React.MouseEvent<HTMLButtonElement>): void {\r\n\r\n        event.preventDefault();\r\n\r\n        let e: (number | string)[];\r\n\r\n        if (!this.state.field.enum)\r\n            e = [\"\"]\r\n        else\r\n            e = [...this.state.field.enum, \"\"];\r\n\r\n        this.setField<(number | string)[]>(\"enum\", e)\r\n    }\r\n\r\n    exportSchemaObj(): IntegerSchema {\r\n\r\n        return {\r\n            type: \"integer\",\r\n            ...{ ...this.state.field, required: undefined, name: undefined },\r\n        };\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Form.Group as={Row} controlId=\"MinValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Min Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"minimum\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMin\" inline\r\n                            ref={this.minExclusiveCheckedRef}\r\n                            onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                            defaultChecked={this.state.field.exclusiveMinimum ? true : false}\r\n                            label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"MaxValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Max Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"maximum\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMax\" inline\r\n                            ref={this.maxExclusiveCheckedRef}\r\n                            onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                            defaultChecked={this.state.field.exclusiveMaximum ? true : false}\r\n                            label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"Default\" onChange={this.recordField.bind(this, \"default\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                        Multiple Of\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"MultipleOf\" onChange={this.recordField.bind(this, \"multipleOf\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                        Constant\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"const\" placeholder=\"Restricted Value\" onChange={this.recordField.bind(this, \"const\")} />\r\n                    </Col>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    {\r\n                        this.state.field.enum\r\n                            ?\r\n                            (\r\n                                (this.state.field.enum as Array<number | string>).map((enumeration, index: number) => (\r\n                                    <Form.Group as={Row} key={index}>\r\n                                        <Form.Label column lg=\"2\">\r\n                                            {index === 0 ? \"Enum\" : \"\"}\r\n                                        </Form.Label>\r\n                                        <Col lg=\"4\">\r\n                                            {\r\n                                                index === this.state.field.enum!.length - 1\r\n                                                    ?\r\n                                                    (\r\n                                                        <InputGroup>\r\n                                                            <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                            <InputGroup.Append>\r\n                                                                <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                                    <FaPlus />\r\n                                                                </Button>\r\n                                                            </InputGroup.Append>\r\n                                                        </InputGroup>\r\n                                                    )\r\n                                                    :\r\n                                                    (\r\n                                                        <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                    )\r\n                                            }\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                ))\r\n                            )\r\n                            :\r\n                            (\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column lg=\"2\">\r\n                                        Enum\r\n                                </Form.Label>\r\n                                    <Col lg=\"10\">\r\n                                        <Row>\r\n                                            <Col lg=\"12\">\r\n                                                <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                    <FaPlus color=\"green\" />\r\n                                                </Button>\r\n\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            )\r\n                    }\r\n                </Form.Group>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Integer;","import React from 'react';\r\nimport { Form, Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nimport { NodeProps } from '../interface/Props'\r\nimport { NumberField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\nimport { NumberSchema } from '../interface/Schema';\r\n\r\nclass Number extends Node<NumberField> {\r\n\r\n    protected readonly selfType = Type.Number;\r\n    private readonly minExclusiveCheckedRef: React.RefObject<HTMLInputElement>;\r\n    private readonly maxExclusiveCheckedRef: React.RefObject<HTMLInputElement>;\r\n\r\n    constructor(props: NodeProps<NumberField>) {\r\n        super(props);\r\n\r\n        this.minExclusiveCheckedRef = React.createRef<HTMLInputElement>();\r\n        this.maxExclusiveCheckedRef = React.createRef<HTMLInputElement>();\r\n    }\r\n\r\n    recordField(fieldName: keyof NumberField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"default\" || fieldName === \"const\" || fieldName === \"multipleOf\") {\r\n\r\n            this.setField<number>(fieldName, parseFloat(event.target.value));\r\n\r\n        } else if (fieldName === \"minimum\") {\r\n\r\n            if (this.minExclusiveCheckedRef.current!.checked) {\r\n\r\n                this.setField<number>(\"exclusiveMinimum\", parseFloat(event.target.value))\r\n                this.setField<undefined>(\"minimum\", undefined)\r\n\r\n            } else {\r\n\r\n                this.setField<number>(\"minimum\", parseFloat(event.target.value))\r\n                this.setField<undefined>(\"exclusiveMinimum\", undefined)\r\n\r\n            }\r\n\r\n        } else if (fieldName === \"maximum\") {\r\n\r\n            if (this.maxExclusiveCheckedRef.current!.checked) {\r\n\r\n                this.setField<number>(\"exclusiveMaximum\", parseFloat(event.target.value))\r\n                this.setField<undefined>(\"maximum\", undefined)\r\n\r\n            } else {\r\n\r\n                this.setField<number>(\"maximum\", parseFloat(event.target.value))\r\n                this.setField<undefined>(\"exclusiveMaximum\", undefined)\r\n            }\r\n\r\n        } else if (fieldName === \"exclusiveMinimum\") {\r\n\r\n            console.log(event.target.checked)\r\n\r\n            if (event.target.checked && this.state.field.minimum) {\r\n\r\n                this.setField<number>(\"exclusiveMinimum\", this.state.field.minimum)\r\n                this.setField<undefined>(\"minimum\", undefined)\r\n\r\n            } else if (!event.target.checked && this.state.field.exclusiveMinimum) {\r\n\r\n                this.setField<number>(\"minimum\", this.state.field.exclusiveMinimum)\r\n                this.setField<undefined>(\"exclusiveMinimum\", undefined)\r\n            }\r\n        } else if (fieldName === \"exclusiveMaximum\") {\r\n\r\n            if (event.target.checked && this.state.field.maximum) {\r\n\r\n                this.setField<number>(\"exclusiveMaximum\", this.state.field.maximum)\r\n                this.setField<undefined>(\"maximum\", undefined)\r\n\r\n            } else if (!event.target.checked && this.state.field.exclusiveMaximum) {\r\n\r\n                this.setField<number>(\"maximum\", this.state.field.exclusiveMaximum)\r\n                this.setField<undefined>(\"exclusiveMaximum\", undefined)\r\n            }\r\n        }\r\n    }\r\n\r\n    recordEnumField(key: number, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        event.preventDefault();\r\n\r\n        this.setField<(number | string)[]>(\"enum\", this.state.field.enum!.map((e, i) => i === key ? parseFloat(event.target.value) : e))\r\n    }\r\n\r\n    addEnum(event: React.MouseEvent<HTMLButtonElement>): void {\r\n\r\n        event.preventDefault();\r\n\r\n        let e: (number | string)[];\r\n\r\n        if (!this.state.field.enum)\r\n            e = [\"\"]\r\n        else\r\n            e = [...this.state.field.enum, \"\"];\r\n\r\n        this.setField<(number | string)[]>(\"enum\", e)\r\n    }\r\n\r\n    exportSchemaObj(): NumberSchema {\r\n\r\n        return {\r\n            type: \"number\",\r\n            ...{ ...this.state.field, required: undefined, name: undefined }\r\n        };\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Form.Group as={Row} controlId=\"MinValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Min Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"minimum\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMin\" inline label=\"Exclusive\"\r\n                            ref={this.minExclusiveCheckedRef}\r\n                            onChange={this.recordField.bind(this, \"exclusiveMinimum\")}\r\n                            defaultChecked={this.state.field.exclusiveMinimum ? true : false}\r\n                            type=\"checkbox\" style={{ height: \"100%\" }} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"MaxValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Max Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"maximum\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMax\" inline label=\"Exclusive\"\r\n                            ref={this.maxExclusiveCheckedRef}\r\n                            onChange={this.recordField.bind(this, \"exclusiveMaximum\")}\r\n                            defaultChecked={this.state.field.exclusiveMaximum ? true : false}\r\n                            type=\"checkbox\" style={{ height: \"100%\" }} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"Default\" onChange={this.recordField.bind(this, \"default\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                        Multiple Of\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"MultipleOf\" onChange={this.recordField.bind(this, \"multipleOf\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"const\">\r\n                        Constant\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"const\" placeholder=\"Restricted Value\" onChange={this.recordField.bind(this, \"const\")} />\r\n                    </Col>\r\n\r\n                </Form.Group>\r\n\r\n                {\r\n                    this.state.field.enum\r\n                        ?\r\n                        (\r\n                            (this.state.field.enum as Array<number | string>).map((enumeration, index: number) => (\r\n                                <Form.Group as={Row} key={index}>\r\n                                    <Form.Label column lg=\"2\">\r\n                                        {index === 0 ? \"Enum\" : \"\"}\r\n                                    </Form.Label>\r\n                                    <Col lg=\"6\">\r\n                                        {\r\n                                            index === this.state.field.enum!.length - 1\r\n                                                ?\r\n                                                (\r\n                                                    <InputGroup>\r\n                                                        <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                        <InputGroup.Append>\r\n                                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                                <FaPlus />\r\n                                                            </Button>\r\n                                                        </InputGroup.Append>\r\n                                                    </InputGroup>\r\n                                                )\r\n                                                :\r\n                                                (\r\n                                                    <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                )\r\n                                        }\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            ))\r\n                        )\r\n                        :\r\n                        (\r\n                            <Form.Group as={Row}>\r\n                                <Form.Label column lg=\"2\">\r\n                                    Enum\r\n                                </Form.Label>\r\n                                <Col lg=\"10\">\r\n                                    <Row>\r\n                                        <Col lg=\"12\">\r\n                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                <FaPlus color=\"green\" />\r\n                                            </Button>\r\n\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        )\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Number;","import React from 'react';\r\n\r\nimport { NullField } from '../interface/NodeField';\r\nimport { NullSchema } from '../interface/Schema';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass Null extends Node<NullField> {\r\n\r\n    protected readonly selfType = Type.Null;\r\n\r\n    recordField(fieldName: keyof NullField, event: React.ChangeEvent<HTMLInputElement>): void { }\r\n\r\n    constructor(props: any) {\r\n        super({\r\n            ...props,\r\n        });\r\n    }\r\n\r\n    exportSchemaObj(): NullSchema {\r\n\r\n        return {\r\n            type: \"null\",\r\n            ...{ ...this.state.field, required: undefined, name: undefined }\r\n        }\r\n    }\r\n\r\n    OptionModal(): JSX.Element { return <></> }\r\n}\r\n\r\nexport default Null;","import React from 'react';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\n\r\nimport { ObjectField } from '../interface/NodeField';\r\nimport { ObjectSchema } from '../interface/Schema';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\n// It will failed if we name a class as \"Object\"\r\nclass ObjectNode extends Node<ObjectField> {\r\n    //class Object extends Node {\r\n\r\n    protected readonly selfType = Type.Object;\r\n\r\n    recordField(fieldName: keyof ObjectField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"maxProperties\" || fieldName === \"minProperties\") {\r\n\r\n            this.setField<number>(fieldName, parseInt(event.target.value))\r\n\r\n            // to check if value is correct\r\n            if ((fieldName === \"minProperties\" && this.state.field.maxProperties && parseInt(event.target.value) > this.state.field.maxProperties) ||\r\n                (fieldName === \"maxProperties\" && this.state.field.minProperties && parseInt(event.target.value) < this.state.field.minProperties)) {\r\n\r\n                this.setState({ optionError: \"The number of Min Properties should less than or equal to Max Properties.\" })\r\n            } else {\r\n                this.setState({ optionError: undefined })\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    constructor(props: any) {\r\n        super({\r\n            ...props,\r\n            hasChild: true,\r\n        });\r\n    }\r\n\r\n    exportSchemaObj(): ObjectSchema {\r\n\r\n        if (this.state.field.maxProperties && this.state.field.minProperties && this.state.field.minProperties > this.state.field.maxProperties)\r\n            throw new Error(\"Find Error\");\r\n\r\n        let children = this.childRef.current?.exportSchemaObj();\r\n\r\n        let properties: ObjectSchema[\"properties\"] = {};\r\n        let required: ObjectSchema[\"required\"] = [];\r\n\r\n        if (children) {\r\n            for (const child of children) {\r\n                properties[child.name] = {\r\n                    ...child.value\r\n                }\r\n                if (child.required)\r\n                    required.push(child.name);\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: \"object\",\r\n            ...{ ...this.state.field, name: undefined },\r\n            properties,\r\n            required\r\n        }\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.optionError &&\r\n                    <span style={{ color: \"red\" }}>{this.state.optionError} </span>\r\n                }\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"auto\" htmlFor=\"MinProperties\">\r\n                        Min Properties\r\n                    </Form.Label>\r\n                    <Col>\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MinProperties\" defaultValue={this.state.field.minProperties} onChange={this.recordField.bind(this, \"minProperties\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"auto\" htmlFor=\"MaxProperties\">\r\n                        Max Properties\r\n                    </Form.Label>\r\n                    <Col>\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MaxProperties\" defaultValue={this.state.field.maxProperties} onChange={this.recordField.bind(this, \"maxProperties\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ObjectNode;","import React from 'react';\r\nimport { Form, Col, Row, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nimport { StringSchema } from '../interface/Schema'\r\nimport { StringField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass String extends Node<StringField> {\r\n\r\n    protected readonly selfType = Type.String;\r\n\r\n    recordField(fieldName: keyof StringField, event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void {\r\n\r\n        if (fieldName === \"minLength\" || fieldName === \"maxLength\") {\r\n\r\n            this.setField<number>(fieldName, parseInt(event.target.value))\r\n\r\n            // to check if value is correct\r\n            if ((fieldName === \"minLength\" && this.state.field.maxLength && parseInt(event.target.value) > this.state.field.maxLength) ||\r\n                (fieldName === \"maxLength\" && this.state.field.minLength && parseInt(event.target.value) < this.state.field.minLength)) {\r\n\r\n                this.setState({ optionError: \"The number of Min Length should less than or equal to Max Length.\" })\r\n            } else {\r\n                this.setState({ optionError: undefined })\r\n            }\r\n\r\n        } else if (fieldName === \"default\" || fieldName === \"const\" || fieldName === \"pattern\") {\r\n\r\n            this.setField<string>(fieldName, event.target.value)\r\n\r\n        } else if (fieldName === \"format\") {\r\n\r\n            if (event.target.value === \"\")\r\n                this.setField<undefined>(fieldName, undefined)\r\n            else\r\n                this.setField<StringField[\"format\"]>(fieldName, event.target.value as StringField[\"format\"])\r\n        }\r\n    }\r\n\r\n    recordEnumField(key: number, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        this.setField<(string | number)[]>(\"enum\", this.state.field.enum!.map((e, i) => i === key ? event.target.value : e))\r\n    }\r\n\r\n    addEnum(event: React.MouseEvent<HTMLButtonElement>): void {\r\n\r\n        event.preventDefault();\r\n\r\n        let e: (number | string)[];\r\n\r\n        if (!this.state.field.enum)\r\n            e = [\"\"]\r\n        else\r\n            e = [...this.state.field.enum, \"\"];\r\n\r\n        this.setField<(number | string)[]>(\"enum\", e)\r\n    }\r\n\r\n    exportSchemaObj(): StringSchema {\r\n\r\n        if (this.state.field.maxLength && this.state.field.minLength && this.state.field.maxLength > this.state.field.minLength)\r\n            throw new Error(\"Find Error\");\r\n\r\n        return {\r\n            type: \"string\",\r\n            ...{ ...this.state.field, required: undefined, name: undefined }\r\n        };\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.optionError &&\r\n                    <span style={{ color: \"red\" }}>{this.state.optionError} </span>\r\n                }\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control type=\"text\" min=\"0\" id=\"Default\" onChange={this.recordField.bind(this, \"default\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                        Min Length\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MinLength\" onChange={this.recordField.bind(this, \"minLength\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MaxLength\">\r\n                        Max Length\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MaxLength\" onChange={this.recordField.bind(this, \"maxLength\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"Format\">\r\n                    <Form.Label column lg=\"2\">Format</Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control as=\"select\" onChange={this.recordField.bind(this, \"format\")}>\r\n                            {[\"\", \"date-time\", \"time\", \"date\", \"email\", \"idn-email\", \"hostname\", \"idn-hostname\", \"ipv4\", \"ipv6\", \"uri\", \"uri-reference\", \"iri\", \"iri-reference\", \"uri-template\", \"json-pointer\", \"relative-json-pointer\", \"regex\"].map((v, i) => <option key={i}>{v}</option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"Pattern\">\r\n                    <Form.Label column lg=\"2\">Pattern</Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control type=\"text\" placeholder=\"Regular Expression\" onChange={this.recordField.bind(this, \"pattern\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"const\">\r\n                    <Form.Label column lg=\"2\">Constant</Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control type=\"text\" placeholder=\"Restricted Value\" onChange={this.recordField.bind(this, \"const\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {\r\n                    this.state.field.enum\r\n                        ?\r\n                        (\r\n                            (this.state.field.enum as Array<number | string>).map((enumeration, index: number) => (\r\n                                <Form.Group as={Row} key={index}>\r\n                                    <Form.Label column lg=\"2\">\r\n                                        {index === 0 ? \"Enum\" : \"\"}\r\n                                    </Form.Label>\r\n                                    <Col lg=\"10\">\r\n                                        {\r\n                                            index === this.state.field.enum!.length - 1\r\n                                                ?\r\n                                                (\r\n                                                    <InputGroup>\r\n                                                        <FormControl type=\"text\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                        <InputGroup.Append>\r\n                                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                                <FaPlus />\r\n                                                            </Button>\r\n                                                        </InputGroup.Append>\r\n                                                    </InputGroup>\r\n                                                )\r\n                                                :\r\n                                                (\r\n                                                    <FormControl type=\"text\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                )\r\n                                        }\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            ))\r\n                        )\r\n                        :\r\n                        (\r\n                            <Form.Group as={Row}>\r\n                                <Form.Label column lg=\"2\">\r\n                                    Enum\r\n                                </Form.Label>\r\n                                <Col lg=\"10\">\r\n                                    <Row>\r\n                                        <Col lg=\"12\">\r\n                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                <FaPlus color=\"green\" />\r\n                                            </Button>\r\n\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        )\r\n                }\r\n\r\n            </ >\r\n        );\r\n    }\r\n}\r\n\r\nexport default String;","\r\nimport Array from './Array';\r\nimport Boolean from './Boolean';\r\nimport Integer from './Integer';\r\nimport Number from './Number';\r\nimport Null from './Null';\r\nimport Object from './Object';\r\nimport String from './String';\r\n\r\nimport Node from './Node';\r\n\r\nenum Type {\r\n    Array = \"Array\",\r\n    Boolean = \"Boolean\",\r\n    Integer = \"Integer\",\r\n    Number = \"Number\",\r\n    Object = \"Object\",\r\n    String = \"String\",\r\n    Null = \"Null\",\r\n};\r\n\r\nexport { Array as ArrayNode };\r\nexport { Boolean as BooleanNode };\r\nexport { Integer as IntegerNode };\r\nexport { Number as NumberNode };\r\nexport { Null as NullNode };\r\nexport { Object as ObjectNode };\r\nexport { String as StringNode };\r\nexport { Node };\r\n\r\nexport { Type };","import React from 'react';\r\nimport nextId from \"react-id-generator\";\r\n\r\nimport { Type, Node } from './data_type/DataType';\r\nimport Factory from './data_type/Factory';\r\nimport NodeField from './interface/NodeField';\r\nimport Schema from './interface/Schema';\r\n\r\ninterface RootNodeProps {\r\n    schema?: Schema;\r\n}\r\n\r\ninterface RootNodeState {\r\n    type: keyof typeof Type;\r\n}\r\nclass RootNode extends React.Component<RootNodeProps, RootNodeState> {\r\n\r\n    private nodeRef: React.RefObject<Node<NodeField>>;\r\n\r\n    constructor(props: any) {\r\n\r\n        super(props);\r\n\r\n        this.nodeRef = React.createRef<Node<NodeField>>();\r\n\r\n        this.state = {\r\n            type: Type.Object,\r\n        }\r\n    }\r\n\r\n    changeType(keyId: string, type: keyof typeof Type): void {\r\n\r\n        this.setState({\r\n            type\r\n        })\r\n\r\n    }\r\n\r\n    exportSchemaObj(): Schema {\r\n\r\n        return this.nodeRef.current!.exportSchemaObj();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        return (\r\n            <Factory\r\n                ref={this.nodeRef}\r\n                key={nextId(\"childId\")}\r\n                keyId={nextId(\"childId\")}\r\n                depth={0}\r\n                type={this.state.type}\r\n                isDeleteAble={false}\r\n                hasSibling={false}\r\n                requiredReadOnly={true}\r\n                field={{ name: \"root\", required: true }}\r\n                changeType={this.changeType.bind(this)}\r\n                changeName={() => true}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default RootNode;","import React from 'react';\r\nimport { Modal, Button, Toast } from 'react-bootstrap';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport Ajv from \"ajv\"\r\nimport draft_04_meta from 'ajv/lib/refs/json-schema-draft-04.json';\r\nimport draft_06_meta from 'ajv/lib/refs/json-schema-draft-06.json';\r\n\r\nimport * as hljs from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nimport Schema from '../nodes_component/interface/Schema';\r\nimport RootNode from '../nodes_component/RootNode';\r\n\r\ninterface SchemaEditorState {\r\n    showExport: boolean;\r\n    errorMessage?: string;\r\n    exportString: string;\r\n    schema?: Schema;\r\n}\r\n\r\nclass SchemaEditor extends React.Component<{}, SchemaEditorState> {\r\n\r\n    private rootNode: any;\r\n    private rootNodeRef: React.RefObject<RootNode>;\r\n    private fileUploadRef: React.RefObject<HTMLInputElement>;\r\n\r\n    constructor(props: any) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            showExport: false,\r\n            exportString: \"\"\r\n        };\r\n\r\n        this.fileUploadRef = React.createRef<HTMLInputElement>();\r\n\r\n        this.rootNodeRef = React.createRef<RootNode>();\r\n        this.rootNode = <RootNode ref={this.rootNodeRef} schema={this.state.schema} />\r\n    }\r\n\r\n    toggleImport(show: boolean): void {\r\n\r\n        this.fileUploadRef.current!.click();\r\n    }\r\n\r\n    async importSchema(event: React.ChangeEvent<HTMLInputElement>) {\r\n\r\n        if (event.target.files) {\r\n\r\n            try {\r\n\r\n                const text = await event.target.files[0].text();\r\n                const schema = JSON.parse(text);\r\n\r\n                const validator = new Ajv({ schemaId: 'auto' });;\r\n                validator.addMetaSchema(draft_06_meta)\r\n                validator.addMetaSchema(draft_04_meta)\r\n\r\n                const result = validator.validateSchema(schema);\r\n\r\n                if (!result) {\r\n\r\n                    this.setState({\r\n                        errorMessage: \"Parsing Schema Error! Please check your schema.\"\r\n                    })\r\n\r\n                } else {\r\n\r\n                    this.setState({ schema });\r\n\r\n                }\r\n\r\n            } catch (error) {\r\n\r\n                this.setState({\r\n                    errorMessage: \"Parsing Schema Error! We only support draft-04/06/07 \"\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleExport(show: boolean): void {\r\n\r\n        if (show) {\r\n\r\n            try {\r\n                const schema = this.rootNodeRef.current!.exportSchemaObj();\r\n                this.setState({\r\n                    exportString: JSON.stringify(schema, null, 4),\r\n                    showExport: true,\r\n                    errorMessage: undefined\r\n                })\r\n            } catch (error) {\r\n                this.setState({\r\n                    errorMessage: \"There's still some errors in your schema! Please check and try again!\"\r\n                })\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            this.setState({ showExport: false, errorMessage: undefined });\r\n\r\n        }\r\n    }\r\n\r\n    saveSchema(): void {\r\n\r\n        const fileBlob = new Blob([this.state.exportString], { type: 'application/json' });\r\n        const blobURL = window.URL.createObjectURL(fileBlob);\r\n\r\n        const anchorElement = document.createElement('a');\r\n        anchorElement.href = blobURL;\r\n        anchorElement.setAttribute('download', \"Schema.json\");\r\n        document.body.appendChild(anchorElement);\r\n        anchorElement.click();\r\n\r\n        document.body.removeChild(anchorElement);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"my-3 mx-4 \">\r\n                <input type=\"file\" id=\"file-uploader\" data-target=\"file-uploader\" hidden ref={this.fileUploadRef} onChange={this.importSchema.bind(this)} />\r\n\r\n                <Button variant=\"outline-primary\" onClick={this.toggleImport.bind(this, true)}>Import from file</Button> {' '}\r\n                <Button variant=\"outline-success\" onClick={this.toggleExport.bind(this, true)}>Export Schema</Button>\r\n                <div>\r\n                    {this.rootNode}\r\n                    {/* <RootNode ref={this.rootNodeRef} schema={this.state.schema} /> */}\r\n                </div>\r\n\r\n                <Modal size=\"xl\" scrollable show={this.state.showExport} onHide={this.toggleExport.bind(this, false)}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Export</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div style={{ maxHeight: \"80%\" }}>\r\n                            <SyntaxHighlighter language=\"json\" style={hljs.vs2015} showLineNumbers={true}>\r\n                                {this.state.exportString}\r\n                            </SyntaxHighlighter>\r\n                        </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"outline-success\" onClick={this.saveSchema.bind(this)}>Save</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                {\r\n                    this.state.errorMessage && (\r\n                        <Toast\r\n                            show={this.state.errorMessage ? true : false}\r\n                            onClose={() => { this.setState({ errorMessage: undefined }) }}\r\n                            delay={3000}\r\n                            autohide\r\n                            style={{\r\n                                position: 'absolute',\r\n                                bottom: \"20px\",\r\n                                right: \"20px\",\r\n                                borderColor: \"red\",\r\n                                color: \"red\"\r\n                            }}>\r\n                            <Toast.Header style={{ borderColor: \"red\", color: \"red\" }}>\r\n                                <strong className=\"mr-auto\">Error</strong>\r\n                            </Toast.Header>\r\n                            <Toast.Body>{this.state.errorMessage}</Toast.Body>\r\n                        </Toast>\r\n                    )\r\n                }\r\n\r\n\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default SchemaEditor;","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport SchemaEditor from './layout/SchemaEditor';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\">JSON Schema Editor</Navbar.Brand>\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text>\r\n                            <a href=\"https://github.com/JingWangTW/json-schema-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <img height=\"30px\" src=\"https://github.com/fluidicon.png\" alt=\"Github ICON\" />\r\n                            </a>\r\n                        </Navbar.Text>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n                <SchemaEditor />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}