{"version":3,"sources":["component/nodes_component/data_type/DataType.tsx","component/layout/SchemaText.tsx","component/nodes_component/data_type/Factory.tsx","component/nodes_component/ChildNodes.tsx","component/nodes_component/NodeOptionButtons.tsx","component/nodes_component/data_type/Node.tsx","component/nodes_component/data_type/Array.tsx","component/nodes_component/data_type/Boolean.tsx","component/nodes_component/data_type/Integer.tsx","component/nodes_component/data_type/Number.tsx","component/nodes_component/data_type/Object.tsx","component/nodes_component/data_type/String.tsx","component/nodes_component/RootNode.tsx","component/layout/SchemaEditor.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["Type","SchemaText","React","Component","Factory","props","state","type","this","DataType","Array","Boolean","Integer","Number","Object","String","ChildNodes","childId","children","keyId","currentIndex","isDeleteAble","hasSibling","originChildren","length","findIndex","child","splice","delete","bind","addSibling","add","nextId","setState","prevState","map","index","key","changeType","depth","ToggleAddButton","forwardRef","ref","id","onClick","color","NodeOptionButtons","addHtmlDropId","addToolTipId","isOpen","event","metadata","stopPropagation","className","hasChild","Dropdown","onToggle","dropDownOnToggle","Toggle","as","Menu","Item","href","eventKey","clickAddSibling","clickAddChild","OverlayTrigger","trigger","overlay","Tooltip","clickDelete","isOptionExist","clickOption","Node","selfType","field","childRef","dataTypeSelectRef","createRef","showOptionModal","showDescriptionModal","name","isShow","current","preventDefault","target","value","fieldName","forceUpdate","Form","Row","Col","lg","style","width","toString","Control","placeholder","readOnly","defaultValue","onChange","recordGenericField","custom","InputGroup","FormControl","description","Append","Button","variant","setShowDescriptionEditorModal","Modal","onHide","show","size","aria-labelledby","centered","Header","closeButton","Title","Body","Group","rows","addChild","setShowOptionModal","OptionModal","checked","Label","column","htmlFor","min","recordField","Check","label","enum","parseInt","push","controlId","inline","height","enumeration","recordEnumField","addEnum","parseFloat","v","i","RootNode","SchemaEditor","App","Navbar","collapseOnSelect","expand","bg","Brand","md","xl","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cf247e01.chunk.js","sourcesContent":["\r\nimport Array from './Array';\r\nimport Boolean from './Boolean';\r\nimport Integer from './Integer';\r\nimport Number from './Number';\r\nimport Object from './Object';\r\nimport String from './String';\r\n\r\nimport Node from './Node';\r\n\r\nenum Type {\r\n    Array = \"Array\",\r\n    Boolean = \"Boolean\",\r\n    Integer = \"Integer\",\r\n    Number = \"Number\",\r\n    Object = \"Object\",\r\n    String = \"String\"\r\n};\r\n\r\nexport { Array as ArrayNode };\r\nexport { Boolean as BooleanNode };\r\nexport { Integer as IntegerNode };\r\nexport { Number as NumberNode };\r\nexport { Object as ObjectNode };\r\nexport { String as StringNode };\r\nexport { Node };\r\n\r\nexport { Type };","import React from 'react';\r\n\r\nclass SchemaText extends React.Component {\r\n    render() {\r\n        return (\r\n            <text>\r\n            </text>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SchemaText;","import React from 'react';\r\n\r\nimport { NodeFactoryProps } from '../interface/Props';\r\nimport { NodeFactoryState } from '../interface/State';\r\nimport * as DataType from './DataType';\r\n\r\nclass Factory extends React.Component<NodeFactoryProps, NodeFactoryState> {\r\n\r\n    constructor(props: NodeFactoryProps) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            type: props.type\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        switch (this.props.type) {\r\n            case DataType.Type.Array:\r\n                return <DataType.ArrayNode {...this.props} />\r\n            case DataType.Type.Boolean:\r\n                return <DataType.BooleanNode {...this.props} />\r\n            case DataType.Type.Integer:\r\n                return <DataType.IntegerNode {...this.props} />\r\n            case DataType.Type.Number:\r\n                return <DataType.NumberNode {...this.props} />\r\n            case DataType.Type.Object:\r\n                return <DataType.ObjectNode {...this.props} />\r\n            case DataType.Type.String:\r\n                return <DataType.StringNode {...this.props} />\r\n            default:\r\n                return <DataType.ObjectNode {...this.props} />\r\n        }\r\n    }\r\n}\r\n\r\nexport default Factory;","import React from 'react';\r\nimport nextId from \"react-id-generator\";\r\n\r\nimport * as DataType from './data_type/DataType';\r\nimport { ChildNodesProps } from './interface/Props';\r\nimport { ChildNodesState } from './interface/State';\r\nimport { Type } from './data_type/DataType';\r\n\r\nimport Factory from './data_type/Factory';\r\n\r\nclass ChildNodes extends React.Component<ChildNodesProps, ChildNodesState>{\r\n\r\n    private readonly childId: any;\r\n\r\n    constructor(props: ChildNodesProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            children: [],\r\n        };\r\n    }\r\n\r\n    add(keyId: string, isDeleteAble: boolean = true, hasSibling: boolean = true): void {\r\n\r\n        const originChildren = this.state.children;\r\n        let currentIndex;\r\n\r\n        // push to the last one\r\n        if (keyId === \"\")\r\n            currentIndex = originChildren.length - 1;\r\n        else\r\n            currentIndex = originChildren.findIndex(child => child.keyId === keyId);;\r\n\r\n        originChildren.splice(currentIndex + 1, 0, {\r\n            delete: this.delete.bind(this),\r\n            addSibling: this.add.bind(this),\r\n            type: DataType.Type.Object,\r\n            isDeleteAble,\r\n            hasSibling,\r\n            keyId: nextId(\"childId\"),\r\n        })\r\n\r\n        this.setState({ children: originChildren })\r\n    }\r\n\r\n    delete(keyId: string) {\r\n\r\n        const originChildren = this.state.children;\r\n        const currentIndex = originChildren.findIndex(child => child.keyId === keyId);;\r\n\r\n        originChildren.splice(currentIndex, 1)\r\n\r\n        this.setState({ children: originChildren })\r\n    }\r\n\r\n    changeType(keyId: string, type: keyof typeof Type): void {\r\n\r\n        this.setState((prevState) => {\r\n\r\n            const children = prevState.children.map((child) => {\r\n\r\n                if (child.keyId === keyId) {\r\n                    return {\r\n                        ...child,\r\n                        type: type\r\n                    };\r\n                } else {\r\n                    return child;\r\n                }\r\n            });\r\n\r\n            return {\r\n                children\r\n            };\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.children.map((child, index) =>\r\n                        <Factory key={child.keyId}\r\n                            {...child}\r\n                            changeType={this.changeType.bind(this)}\r\n                            depth={this.props.depth} />\r\n                    )\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChildNodes;","import React from 'react';\r\nimport { OverlayTrigger, Tooltip, Dropdown } from 'react-bootstrap';\r\nimport nextId from \"react-id-generator\";\r\nimport { FaRegTrashAlt, FaPlus } from 'react-icons/fa';\r\nimport { AiOutlineSetting } from 'react-icons/ai';\r\nimport { NodeOptionButtonsProps } from './interface/Props';\r\n\r\nimport '../../index.css';\r\n\r\ninterface ToggleAddButtonProps {\r\n    id: string;\r\n    onClick(event: React.MouseEvent<HTMLSpanElement>): void;\r\n}\r\n\r\nconst ToggleAddButton = React.forwardRef<HTMLSpanElement, ToggleAddButtonProps>((props, ref) => (\r\n    <span\r\n        ref={ref}\r\n        id={props.id}\r\n        onClick={props.onClick}>\r\n        <FaPlus color=\"green\" />\r\n    </span>\r\n));\r\n\r\nclass NodeOptionButtons extends React.Component<NodeOptionButtonsProps, {}> {\r\n\r\n    private readonly addHtmlDropId = nextId(\"Add-Dropdown\");\r\n    private readonly addToolTipId = nextId(\"Add-Tooltip\")\r\n\r\n    dropDownOnToggle(isOpen: boolean,\r\n        event: React.SyntheticEvent<Dropdown>,\r\n        metadata: {\r\n            source: 'select' | 'click' | 'rootClose' | 'keydown'\r\n        }): void {\r\n\r\n        if (event)\r\n            event.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"node-option-block\">\r\n                {\r\n                    this.props.hasChild && this.props.hasSibling &&\r\n                    (\r\n                        <div className=\"node-option-btn-block\">\r\n                            <Dropdown onToggle={this.dropDownOnToggle.bind(this)}>\r\n                                <Dropdown.Toggle as={ToggleAddButton} id={this.addHtmlDropId} />\r\n\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item href=\"#\" eventKey=\"1\" onClick={this.props.clickAddSibling}>Add Sibling</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"#\" eventKey=\"2\" onClick={this.props.clickAddChild}>Add Child</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    )\r\n\r\n                }\r\n                {\r\n                    (this.props.hasChild !== this.props.hasSibling) &&\r\n                    (\r\n                        <div className=\"node-option-btn-block\" onClick={this.props.hasChild ? this.props.clickAddChild : this.props.clickAddSibling}>\r\n                            <OverlayTrigger\r\n                                trigger={[\"hover\", \"focus\"]}\r\n                                overlay={<Tooltip id={this.addToolTipId}> Add </Tooltip>}\r\n                            >\r\n                                <span><FaPlus color=\"green\" /></span>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                {\r\n                    this.props.isDeleteAble && (\r\n                        <div className=\"node-option-btn-block\" onClick={this.props.clickDelete}>\r\n                            <OverlayTrigger\r\n                                trigger={[\"hover\", \"focus\"]}\r\n                                overlay={<Tooltip id=\"delete-tooltip\"> Delete </Tooltip>}\r\n                            >\r\n                                <span><FaRegTrashAlt color=\"red\" /></span>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                {\r\n                    this.props.isOptionExist && (\r\n                        <div className=\"node-option-btn-block\" onClick={this.props.clickOption}>\r\n                            <OverlayTrigger\r\n                                trigger={[\"hover\", \"focus\"]}\r\n                                overlay={<Tooltip id=\"option-tooltip\"> Option </Tooltip>}\r\n                            >\r\n                                <span><AiOutlineSetting /></span>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodeOptionButtons;","import React from 'react';\r\nimport { Form, Col, InputGroup, Button, Modal, OverlayTrigger, Tooltip, FormControl, Row } from 'react-bootstrap';\r\nimport { TiPencil } from 'react-icons/ti';\r\nimport NodeField, { GenericField } from '../interface/NodeField';\r\nimport { NodeState } from '../interface/State';\r\nimport { NodeProps } from '../interface/Props';\r\nimport ChildNodes from '../ChildNodes';\r\nimport { Type } from './DataType';\r\n\r\nimport NodeOptionButtons from '../NodeOptionButtons';\r\n\r\nabstract class Node extends React.Component<NodeProps, NodeState> {\r\n\r\n    abstract OptionModal(): JSX.Element;\r\n    abstract recordField(fieldName: keyof NodeField, event: React.ChangeEvent<HTMLElement>): void\r\n\r\n    protected abstract readonly selfType: keyof typeof Type;\r\n\r\n    protected field: NodeField;\r\n    private childRef: React.RefObject<ChildNodes>;\r\n    private dataTypeSelectRef: React.RefObject<HTMLSelectElement>;\r\n\r\n    constructor(props: NodeProps) {\r\n\r\n        super(props);\r\n\r\n        this.childRef = React.createRef<ChildNodes>();\r\n        this.dataTypeSelectRef = React.createRef<HTMLSelectElement>();\r\n\r\n        this.state = {\r\n            // default value\r\n            showOptionModal: false,\r\n            showDescriptionModal: false,\r\n            isDeleteAble: true,\r\n            isOptionExist: true,\r\n            hasChild: false,\r\n            hasSibling: true,\r\n\r\n            // set arguments\r\n            ...props,\r\n        }\r\n\r\n        if (this.props.field)\r\n            this.field = this.props.field;\r\n        else\r\n            this.field = {\r\n                name: \"\",\r\n            }\r\n    }\r\n\r\n    setShowOptionModal(isShow: boolean): void {\r\n\r\n        this.setState({\r\n            showOptionModal: isShow,\r\n        });\r\n    }\r\n\r\n    setShowDescriptionEditorModal(isShow: boolean): void {\r\n\r\n        this.setState({\r\n            showDescriptionModal: isShow\r\n        });\r\n    }\r\n\r\n    addSibling(): void {\r\n\r\n        if (this.props.addSibling)\r\n            this.props.addSibling(this.props.keyId);\r\n    }\r\n\r\n    addChild(isDeleteAble: boolean = true, hasSibling: boolean = true): void {\r\n\r\n        this.childRef.current!.add(\"\", isDeleteAble, hasSibling);\r\n\r\n    }\r\n\r\n    delete(): void {\r\n\r\n        if (this.props.delete)\r\n            this.props.delete(this.props.keyId)\r\n    }\r\n\r\n    changeType(event: React.ChangeEvent<HTMLSelectElement>): void {\r\n\r\n        event.preventDefault();\r\n\r\n        if (event.target.value in Type) {\r\n            this.props.changeType(this.props.keyId, (Type as any)[event.target.value])\r\n        }\r\n    }\r\n\r\n    recordGenericField(fieldName: keyof GenericField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        this.field[fieldName] = event.target.value;\r\n\r\n        // need to sync for both input blank\r\n        if (fieldName === \"description\")\r\n            this.forceUpdate()\r\n\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col lg={3}>\r\n                            <Row>\r\n                                <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (this.props.depth * 15).toString() + \"px\" }}>\r\n                                </Col>\r\n                                <Col>\r\n                                    <Form.Control placeholder=\"items\"\r\n                                        readOnly={this.state.isDeleteAble ? false : true}\r\n                                        defaultValue={this.field.name}\r\n                                        onChange={this.recordGenericField.bind(this, \"name\")} />\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col lg={1}>\r\n                            <Form.Control as=\"select\" custom placeholder=\"DataType\" ref={this.dataTypeSelectRef} onChange={this.changeType.bind(this)} value={this.selfType}>\r\n                                <option>Object</option>\r\n                                <option>Array</option>\r\n                                <option>String</option>\r\n                                <option>Integer</option>\r\n                                <option>Number</option>\r\n                                <option>Boolean</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n                        <Col lg={3}>\r\n                            <Form.Control placeholder=\"Titile\" />\r\n                        </Col>\r\n                        <Col lg={3}>\r\n\r\n                            <InputGroup>\r\n                                <FormControl type=\"text\" id=\"Description\" placeholder=\"Description\" defaultValue={this.field.description} value={this.field.description} onChange={this.recordGenericField.bind(this, \"description\")} />\r\n                                <OverlayTrigger\r\n                                    trigger={[\"hover\", \"focus\"]}\r\n                                    overlay={<Tooltip id=\"add-tooltip\"> Edit </Tooltip>}\r\n                                >\r\n                                    <InputGroup.Append>\r\n                                        <Button variant=\"outline-primary\" onClick={this.setShowDescriptionEditorModal.bind(this, true)}>\r\n                                            <TiPencil />\r\n                                        </Button>\r\n                                    </InputGroup.Append>\r\n                                </OverlayTrigger>\r\n                            </InputGroup>\r\n\r\n                            <Modal\r\n                                onHide={this.setShowDescriptionEditorModal.bind(this, false)}\r\n                                show={this.state.showDescriptionModal}\r\n                                size=\"lg\"\r\n                                aria-labelledby=\"description-modal\"\r\n                                centered\r\n                            >\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title id=\"description-modal\">\r\n                                        Description\r\n                                    </Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Control as=\"textarea\" rows={3} defaultValue={this.field.description} onChange={this.recordGenericField.bind(this, \"description\")} />\r\n                                    </Form.Group>\r\n                                </Modal.Body>\r\n                            </Modal>\r\n                        </Col>\r\n                        <Col lg={2}>\r\n                            <NodeOptionButtons\r\n                                hasChild={this.state.hasChild}\r\n                                hasSibling={this.state.hasSibling}\r\n                                isDeleteAble={this.state.isDeleteAble}\r\n                                isOptionExist={this.state.isOptionExist}\r\n                                clickAddChild={this.addChild.bind(this)}\r\n                                clickAddSibling={this.addSibling.bind(this)}\r\n                                clickDelete={this.delete.bind(this)}\r\n                                clickOption={this.setShowOptionModal.bind(this, true)}\r\n                            />\r\n\r\n                            <Modal\r\n                                onHide={this.setShowOptionModal.bind(this, false)}\r\n                                show={this.state.showOptionModal}\r\n                                size=\"lg\"\r\n                                aria-labelledby=\"option-modal\"\r\n                                centered\r\n                            >\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title id=\"option-modal\">\r\n                                        Advanced Options\r\n                                </Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    {this.OptionModal()}\r\n                                </Modal.Body>\r\n                            </Modal>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n                {this.state.hasChild && <ChildNodes ref={this.childRef} depth={this.props.depth + 1} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React from 'react';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\n\r\nimport { ArrayField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass Array extends Node {\r\n\r\n    protected readonly selfType = Type.Array;\r\n\r\n    constructor(props: any) {\r\n        super({\r\n            ...props,\r\n            hasChild: true,\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.addChild(false, false);\r\n\r\n    }\r\n\r\n    recordField(fieldName: keyof ArrayField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"min_items\" || fieldName === \"max_items\") {\r\n\r\n            this.field[fieldName] = Number(event.target.value);\r\n\r\n        } else {\r\n\r\n            this.field[fieldName] = event.target.checked;\r\n\r\n        }\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <Form>\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MinItems\">\r\n                        Min Items\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MinItems\" onChange={this.recordField.bind(this, \"min_items\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MaxItems\">\r\n                        Max Items\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MaxItems\" onChange={this.recordField.bind(this, \"max_items\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Check id=\"uniqueCheckbox\" type=\"checkbox\" label=\"Unique\" onChange={this.recordField.bind(this, \"unique\")} />\r\n                </Form.Group>\r\n\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Array;","import React from 'react';\r\nimport { Form, Col, Row } from 'react-bootstrap';\r\n\r\nimport { BooleanField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node';\r\n\r\nclass Boolean extends Node {\r\n\r\n    protected readonly selfType = Type.Boolean;\r\n\r\n    recordField(fieldName: keyof BooleanField, event: React.ChangeEvent<HTMLSelectElement>): void {\r\n\r\n        this.field[fieldName] = event.target.value === \"True\" ? true : false;\r\n\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <Form>\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control as=\"select\" onChange={this.recordField.bind(this, \"default\")}>\r\n                            <option></option>\r\n                            <option>True</option>\r\n                            <option>False</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Boolean;","import React from 'react';\r\nimport { Form, Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nimport { IntegerField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass Integer extends Node {\r\n\r\n    protected readonly selfType = Type.Integer;\r\n\r\n    recordField(fieldName: keyof IntegerField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"default\" || fieldName === \"constant\" || fieldName === \"min_value\" || fieldName === \"max_value\" || fieldName === \"multiple_of\") {\r\n\r\n            this.field[fieldName] = Number(event.target.value);\r\n\r\n        } else if (fieldName === \"max_exclusive\" || fieldName === \"min_exclusive\") {\r\n\r\n            this.field[fieldName] = event.target.checked;\r\n\r\n        }\r\n    }\r\n\r\n    recordEnumField(key: number, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        this.field.enum![key] = parseInt(event.target.value);\r\n    }\r\n\r\n    addEnum(): void {\r\n\r\n        if (!this.field.enum)\r\n            this.field.enum = [];\r\n\r\n        this.field.enum!.push(\"\");\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <Form>\r\n                <Form.Group as={Row} controlId=\"MinValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Min Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"min_value\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMin\" inline\r\n                            label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} onChange={this.recordField.bind(this, \"min_exclusive\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"MaxValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Max Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"max_value\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMax\" inline label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} onChange={this.recordField.bind(this, \"max_exclusive\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"Default\" onChange={this.recordField.bind(this, \"default\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                        Multiple Of\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"MultipleOf\" onChange={this.recordField.bind(this, \"multiple_of\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                        Constant\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"Constant\" placeholder=\"Restricted Value\" onChange={this.recordField.bind(this, \"constant\")} />\r\n                    </Col>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    {\r\n                        this.field.enum\r\n                            ?\r\n                            (\r\n                                (this.field.enum as Array<number | string>).map((enumeration, index: number) => (\r\n                                    <Form.Group as={Row} key={index}>\r\n                                        <Form.Label column lg=\"2\">\r\n                                            {index === 0 ? \"Enum\" : \"\"}\r\n                                        </Form.Label>\r\n                                        <Col lg=\"4\">\r\n                                            {\r\n                                                index === this.field.enum!.length - 1\r\n                                                    ?\r\n                                                    (\r\n                                                        <InputGroup>\r\n                                                            <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                            <InputGroup.Append>\r\n                                                                <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                                    <FaPlus />\r\n                                                                </Button>\r\n                                                            </InputGroup.Append>\r\n                                                        </InputGroup>\r\n                                                    )\r\n                                                    :\r\n                                                    (\r\n                                                        <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                    )\r\n                                            }\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                ))\r\n                            )\r\n                            :\r\n                            (\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column lg=\"2\">\r\n                                        Enum\r\n                                </Form.Label>\r\n                                    <Col lg=\"10\">\r\n                                        <Row>\r\n                                            <Col lg=\"12\">\r\n                                                <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                    <FaPlus color=\"green\" />\r\n                                                </Button>\r\n\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            )\r\n                    }\r\n                </Form.Group>\r\n\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Integer;","import React from 'react';\r\nimport { Form, Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nimport { NumberField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass Number extends Node {\r\n\r\n    protected readonly selfType = Type.Number;\r\n\r\n    recordField(fieldName: keyof NumberField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"default\" || fieldName === \"constant\" || fieldName === \"min_value\" || fieldName === \"max_value\") {\r\n\r\n            this.field[fieldName] = parseFloat(event.target.value);\r\n\r\n        } else if (fieldName === \"max_exclusive\" || fieldName === \"min_exclusive\") {\r\n\r\n            this.field[fieldName] = event.target.checked;\r\n\r\n        }\r\n    }\r\n\r\n    recordEnumField(key: number, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        this.field.enum![key] = parseFloat(event.target.value);\r\n    }\r\n\r\n    addEnum(): void {\r\n\r\n        if (!this.field.enum)\r\n            this.field.enum = [];\r\n\r\n        this.field.enum!.push(\"\")\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <Form>\r\n                <Form.Group as={Row} controlId=\"MinValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Min Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"min_value\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMin\" inline label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} onChange={this.recordField.bind(this, \"min_exclusive\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"MaxValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Max Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"max_value\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMax\" inline label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} onChange={this.recordField.bind(this, \"max_exclusive\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"4\" id=\"Default\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"default\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                        Constant\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"Constant\" placeholder=\"Restricted Value\" onChange={this.recordField.bind(this, \"constant\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {\r\n                    this.field.enum\r\n                        ?\r\n                        (\r\n                            (this.field.enum as Array<number | string>).map((enumeration, index: number) => (\r\n                                <Form.Group as={Row} key={index}>\r\n                                    <Form.Label column lg=\"2\">\r\n                                        {index === 0 ? \"Enum\" : \"\"}\r\n                                    </Form.Label>\r\n                                    <Col lg=\"6\">\r\n                                        {\r\n                                            index === this.field.enum!.length - 1\r\n                                                ?\r\n                                                (\r\n                                                    <InputGroup>\r\n                                                        <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                        <InputGroup.Append>\r\n                                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                                <FaPlus />\r\n                                                            </Button>\r\n                                                        </InputGroup.Append>\r\n                                                    </InputGroup>\r\n                                                )\r\n                                                :\r\n                                                (\r\n                                                    <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                )\r\n                                        }\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            ))\r\n                        )\r\n                        :\r\n                        (\r\n                            <Form.Group as={Row}>\r\n                                <Form.Label column lg=\"2\">\r\n                                    Enum\r\n                                </Form.Label>\r\n                                <Col lg=\"10\">\r\n                                    <Row>\r\n                                        <Col lg=\"12\">\r\n                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                <FaPlus color=\"green\" />\r\n                                            </Button>\r\n\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        )\r\n                }\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Number;","import React from 'react';\r\n\r\nimport { ObjectField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass Object extends Node {\r\n\r\n    protected readonly selfType = Type.Object;\r\n\r\n    recordField(fieldName: keyof ObjectField, event: React.ChangeEvent<HTMLInputElement>): void { }\r\n\r\n    constructor(props: any) {\r\n        super({\r\n            ...props,\r\n            hasChild: true,\r\n            isOptionExist: false,\r\n        });\r\n    }\r\n\r\n    OptionModal(): JSX.Element { return <></> }\r\n}\r\n\r\nexport default Object;","import React from 'react';\r\nimport { Form, Col, Row, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nimport { StringField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass String extends Node {\r\n\r\n    protected readonly selfType = Type.String;\r\n\r\n    recordField(fieldName: keyof StringField, event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void {\r\n\r\n        if (fieldName === \"min_length\" || fieldName === \"max_length\") {\r\n\r\n            this.field[fieldName] = Number(event.target.value);\r\n\r\n        } else if (fieldName === \"default\" || fieldName === \"constant\" || fieldName === \"pattern\") {\r\n\r\n            this.field[fieldName] = event.target.value;\r\n\r\n        } else if (fieldName === \"format\") {\r\n\r\n            this.field[fieldName] = event.target.value as StringField[\"format\"]\r\n\r\n        }\r\n    }\r\n\r\n    recordEnumField(key: number, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        this.field.enum![key] = event.target.value;\r\n    }\r\n\r\n    addEnum(): void {\r\n\r\n        if (!this.field.enum)\r\n            this.field.enum = [];\r\n\r\n        this.field.enum!.push(\"\")\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <Form>\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control type=\"text\" min=\"0\" id=\"Default\" onChange={this.recordField.bind(this, \"default\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                        Min Length\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MinLength\" onChange={this.recordField.bind(this, \"min_length\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MaxLength\">\r\n                        Max Length\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MaxLength\" onChange={this.recordField.bind(this, \"max_length\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"Format\">\r\n                    <Form.Label column lg=\"2\">Format</Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control as=\"select\" onChange={this.recordField.bind(this, \"format\")}>\r\n                            {[\"date-time\", \"time\", \"date\", \"email\", \"idn-email\", \"hostname\", \"idn-hostname\", \"ipv4\", \"ipv6\", \"uri\", \"uri-reference\", \"iri\", \"iri-reference\", \"uri-template\", \"json-pointer\", \"relative-json-pointer\", \"regex\"].map((v, i) => <option key={i}>{v}</option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"Pattern\">\r\n                    <Form.Label column lg=\"2\">Pattern</Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control type=\"text\" placeholder=\"Regular Expression\" onChange={this.recordField.bind(this, \"pattern\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"Constant\">\r\n                    <Form.Label column lg=\"2\">Constant</Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control type=\"text\" placeholder=\"Restricted Value\" onChange={this.recordField.bind(this, \"constant\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {\r\n                    this.field.enum\r\n                        ?\r\n                        (\r\n                            (this.field.enum as Array<number | string>).map((enumeration, index: number) => (\r\n                                <Form.Group as={Row} key={index}>\r\n                                    <Form.Label column lg=\"2\">\r\n                                        {index === 0 ? \"Enum\" : \"\"}\r\n                                    </Form.Label>\r\n                                    <Col lg=\"10\">\r\n                                        {\r\n                                            index === this.field.enum!.length - 1\r\n                                                ?\r\n                                                (\r\n                                                    <InputGroup>\r\n                                                        <FormControl type=\"text\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                        <InputGroup.Append>\r\n                                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                                <FaPlus />\r\n                                                            </Button>\r\n                                                        </InputGroup.Append>\r\n                                                    </InputGroup>\r\n                                                )\r\n                                                :\r\n                                                (\r\n                                                    <FormControl type=\"text\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                )\r\n                                        }\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            ))\r\n                        )\r\n                        :\r\n                        (\r\n                            <Form.Group as={Row}>\r\n                                <Form.Label column lg=\"2\">\r\n                                    Enum\r\n                                </Form.Label>\r\n                                <Col lg=\"10\">\r\n                                    <Row>\r\n                                        <Col lg=\"12\">\r\n                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                <FaPlus color=\"green\" />\r\n                                            </Button>\r\n\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        )\r\n                }\r\n\r\n            </Form >\r\n        );\r\n    }\r\n}\r\n\r\nexport default String;","import React from 'react';\r\nimport nextId from \"react-id-generator\";\r\n\r\nimport { Type } from './data_type/DataType';\r\nimport Factory from './data_type/Factory';\r\nclass RootNode extends React.Component {\r\n\r\n    selfType: keyof typeof Type;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.selfType = Type.Object;\r\n    }\r\n\r\n    changeType(keyId: string, type: keyof typeof Type): void {\r\n\r\n        this.selfType = type;\r\n        this.forceUpdate()\r\n\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        return (\r\n            <Factory\r\n                key={nextId(\"childId\")}\r\n                keyId={nextId(\"childId\")}\r\n                depth={0}\r\n                type={this.selfType}\r\n                isDeleteAble={false}\r\n                hasSibling={false}\r\n                field={{ name: \"root\" }}\r\n                changeType={this.changeType.bind(this)}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default RootNode;","import React from 'react';\r\n\r\nimport RootNode from '../nodes_component/RootNode';\r\n\r\nclass SchemaEditor extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <RootNode />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SchemaEditor;","import React from 'react';\r\nimport { Navbar, Row, Col } from 'react-bootstrap';\r\nimport SchemaText from './layout/SchemaText';\r\nimport SchemaEditor from './layout/SchemaEditor';\r\n\r\nclass App extends React.Component {\r\n\r\n    App() {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\">JSON Schema Editor</Navbar.Brand>\r\n                </Navbar>\r\n                <div className=\"p-5\">\r\n                    <Row>\r\n                        <Col md={12} lg={4} xl={3}>\r\n                            <SchemaText />\r\n                        </Col>\r\n                        <Col md={12} lg={8} xl={9}>\r\n                            <SchemaEditor />\r\n                        </Col>\r\n                    </Row>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}