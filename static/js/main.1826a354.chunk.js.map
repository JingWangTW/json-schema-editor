{"version":3,"sources":["component/nodes_component/data_type/Factory.tsx","component/nodes_component/ChildNodes.tsx","component/nodes_component/NodeOptionButtons.tsx","component/nodes_component/data_type/Node.tsx","component/nodes_component/data_type/Array.tsx","component/nodes_component/data_type/Boolean.tsx","component/nodes_component/data_type/Integer.tsx","component/nodes_component/data_type/Number.tsx","component/nodes_component/data_type/Object.tsx","component/nodes_component/data_type/DataType.tsx","component/nodes_component/data_type/String.tsx","component/nodes_component/RootNode.tsx","component/layout/SchemaEditor.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["Factory","React","forwardRef","props","ref","type","DataType","Array","Boolean","Integer","Number","Object","String","ChildNodes","state","children","checkNameDuplicate","keyId","currentIndex","isDeleteAble","hasSibling","originChildren","this","length","findIndex","child","splice","delete","bind","addSibling","add","nextId","createRef","setState","prevState","map","Error","name","current","form","value","exportSchemaObj","required","Row","Col","lg","className","style","width","depth","toString","color","index","key","changeType","changeName","checkChildName","Component","ToggleAddButton","id","onClick","NodeOptionButtons","addHtmlDropId","addToolTipId","isOpen","event","metadata","stopPropagation","hasChild","Dropdown","onToggle","dropDownOnToggle","Toggle","as","Menu","Item","href","eventKey","clickAddSibling","clickAddChild","OverlayTrigger","trigger","overlay","Tooltip","clickDelete","isOptionExist","clickOption","Node","constructor","super","selfType","field","childRef","optionFieldFormRef","showOptionModal","showDescriptionModal","setShowOptionModal","isShow","setShowDescriptionEditorModal","addChild","preventDefault","target","Type","recordGenericField","fieldName","checked","forceUpdate","resetOptionFiledForm","reset","render","Form","InputGroup","Prepend","Checkbox","defaultChecked","disabled","onChange","Control","placeholder","readOnly","defaultValue","custom","FormControl","description","Append","Button","variant","Modal","onHide","show","size","aria-labelledby","centered","Header","closeButton","Title","Body","Group","rows","OptionModal","Footer","title","uniqueItems","unique","minItems","min_items","maxItems","max_items","items","Label","column","htmlFor","min","recordField","Check","label","default","enum","parseInt","push","constant","minimum","min_value","exclusiveMinimum","min_exclusive","maximum","max_value","exclusiveMaximum","max_exclusive","multipleOf","multiple_of","controlId","inline","height","enumeration","recordEnumField","addEnum","parseFloat","ObjectNode","properties","minLength","min_length","maxLength","max_length","format","pattern","v","i","RootNode","nodeRef","SchemaEditor","rootNode","rootNodeRef","showExport","showImport","showErrorToast","exportString","schema","JSON","stringify","error","fileBlob","Blob","blobURL","window","URL","createObjectURL","anchorElement","document","createElement","setAttribute","body","appendChild","click","removeChild","toggleImport","toggleExport","scrollable","maxHeight","language","hljs","showLineNumbers","saveSchema","Toast","delay","autohide","position","bottom","right","App","Navbar","collapseOnSelect","expand","bg","Brand","Collapse","Text","rel","src","alt","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1826a354.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport { NodeFactoryProps } from '../interface/Props';\r\nimport * as DataType from './DataType';\r\n\r\nconst Factory = React.forwardRef<DataType.Node, NodeFactoryProps>((props, ref) => {\r\n\r\n    switch (props.type) {\r\n        case DataType.Type.Array:\r\n            return <DataType.ArrayNode {...props} ref={ref as React.RefObject<DataType.ArrayNode>} />\r\n        case DataType.Type.Boolean:\r\n            return <DataType.BooleanNode {...props} ref={ref as React.RefObject<DataType.BooleanNode>} />\r\n        case DataType.Type.Integer:\r\n            return <DataType.IntegerNode {...props} ref={ref as React.RefObject<DataType.IntegerNode>} />\r\n        case DataType.Type.Number:\r\n            return <DataType.NumberNode {...props} ref={ref as React.RefObject<DataType.NumberNode>} />\r\n        case DataType.Type.Object:\r\n            return <DataType.ObjectNode {...props} ref={ref as React.RefObject<DataType.ObjectNode>} />\r\n        case DataType.Type.String:\r\n            return <DataType.StringNode {...props} ref={ref as React.RefObject<DataType.StringNode>} />\r\n        default:\r\n            return <DataType.ObjectNode {...props} ref={ref as React.RefObject<DataType.ObjectNode>} />\r\n    }\r\n});\r\n\r\nexport default Factory;","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport nextId from \"react-id-generator\";\r\n\r\nimport * as DataType from './data_type/DataType';\r\nimport { ChildNodesProps } from './interface/Props';\r\nimport { ChildNodesState } from './interface/State';\r\nimport { Type, Node } from './data_type/DataType';\r\n\r\nimport Factory from './data_type/Factory';\r\n\r\nclass ChildNodes extends React.Component<ChildNodesProps, ChildNodesState>{\r\n\r\n    constructor(props: ChildNodesProps) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            children: [],\r\n            checkNameDuplicate: false\r\n        };\r\n    }\r\n\r\n    add(keyId: string, isDeleteAble: boolean = true, hasSibling: boolean = true): void {\r\n\r\n        const originChildren = this.state.children;\r\n        let currentIndex;\r\n\r\n        // push to the last one\r\n        if (keyId === \"\")\r\n            currentIndex = originChildren.length - 1;\r\n        else\r\n            currentIndex = originChildren.findIndex(child => child.keyId === keyId);;\r\n\r\n        originChildren.splice(currentIndex + 1, 0, {\r\n            delete: this.delete.bind(this),\r\n            addSibling: this.add.bind(this),\r\n            type: DataType.Type.Object,\r\n            isDeleteAble,\r\n            hasSibling,\r\n            keyId: nextId('child_node-'),\r\n            ref: React.createRef<Node>()\r\n        })\r\n\r\n        this.setState({ children: originChildren })\r\n    }\r\n\r\n    delete(keyId: string) {\r\n\r\n        const originChildren = this.state.children;\r\n        const currentIndex = originChildren.findIndex(child => child.keyId === keyId);;\r\n\r\n        originChildren.splice(currentIndex, 1)\r\n\r\n        this.setState({ children: originChildren })\r\n    }\r\n\r\n    changeType(keyId: string, type: keyof typeof Type): void {\r\n\r\n        this.setState((prevState) => {\r\n\r\n            const children = prevState.children.map((child) => {\r\n\r\n                if (child.keyId === keyId) {\r\n                    return {\r\n                        ...child,\r\n                        type: type\r\n                    };\r\n                } else {\r\n                    return child;\r\n                }\r\n            });\r\n\r\n            return {\r\n                children\r\n            };\r\n        });\r\n    }\r\n\r\n    exportSchemaObj(): any {\r\n\r\n        if (this.state.checkNameDuplicate) {\r\n\r\n            throw new Error(\"Find Duplicate\");\r\n\r\n        } else {\r\n\r\n            return this.state.children.map(child => ({\r\n                name: child.ref.current!.form.name,\r\n                value: child.ref.current!.exportSchemaObj(),\r\n                required: child.ref.current!.form.required,\r\n            }));\r\n        }\r\n    }\r\n\r\n    checkChildName(keyId: string, name: string): void {\r\n\r\n        let checkNameDuplicate: boolean = false;\r\n\r\n        for (const child of this.state.children) {\r\n\r\n            if (child.keyId !== keyId && child.ref.current!.form.name === name) {\r\n                checkNameDuplicate = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        this.setState({ checkNameDuplicate })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {\r\n                    this.state.checkNameDuplicate &&\r\n                    <Row>\r\n                        <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (this.props.depth * 20).toString() + \"px\" }} />\r\n                        <Col>\r\n                            <span style={{ color: \"red\" }}>Find duplicated field name in this layer </span>\r\n                        </Col>\r\n                    </Row>\r\n                }\r\n                {\r\n                    this.state.children.map((child, index) =>\r\n                        <Factory key={child.keyId}\r\n                            {...child}\r\n                            ref={child.ref}\r\n                            changeType={this.changeType.bind(this)}\r\n                            changeName={this.checkChildName.bind(this)}\r\n                            depth={this.props.depth} />\r\n                    )\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ChildNodes;","import React from 'react';\r\nimport { OverlayTrigger, Tooltip, Dropdown } from 'react-bootstrap';\r\nimport nextId from \"react-id-generator\";\r\nimport { FaRegTrashAlt, FaPlus } from 'react-icons/fa';\r\nimport { AiOutlineSetting } from 'react-icons/ai';\r\nimport { NodeOptionButtonsProps } from './interface/Props';\r\n\r\nimport '../../index.css';\r\n\r\ninterface ToggleAddButtonProps {\r\n    id: string;\r\n    onClick(event: React.MouseEvent<HTMLSpanElement>): void;\r\n}\r\n\r\nconst ToggleAddButton = React.forwardRef<HTMLSpanElement, ToggleAddButtonProps>((props, ref) => (\r\n    <span\r\n        ref={ref}\r\n        id={props.id}\r\n        onClick={props.onClick}>\r\n        <FaPlus color=\"green\" />\r\n    </span>\r\n));\r\n\r\nclass NodeOptionButtons extends React.Component<NodeOptionButtonsProps, {}> {\r\n\r\n    private readonly addHtmlDropId = nextId(\"Add-Dropdown\");\r\n    private readonly addToolTipId = nextId(\"Add-Tooltip\")\r\n\r\n    dropDownOnToggle(isOpen: boolean,\r\n        event: React.SyntheticEvent<Dropdown>,\r\n        metadata: {\r\n            source: 'select' | 'click' | 'rootClose' | 'keydown'\r\n        }): void {\r\n\r\n        if (event)\r\n            event.stopPropagation();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"node-option-block\">\r\n                {\r\n                    this.props.hasChild && this.props.hasSibling &&\r\n                    (\r\n                        <div className=\"node-option-btn-block\">\r\n                            <Dropdown onToggle={this.dropDownOnToggle.bind(this)}>\r\n                                <Dropdown.Toggle as={ToggleAddButton} id={this.addHtmlDropId} />\r\n\r\n                                <Dropdown.Menu>\r\n                                    <Dropdown.Item href=\"#\" eventKey=\"1\" onClick={this.props.clickAddSibling}>Add Sibling</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"#\" eventKey=\"2\" onClick={this.props.clickAddChild}>Add Child</Dropdown.Item>\r\n                                </Dropdown.Menu>\r\n                            </Dropdown>\r\n                        </div>\r\n                    )\r\n\r\n                }\r\n                {\r\n                    (this.props.hasChild !== this.props.hasSibling) &&\r\n                    (\r\n                        <div className=\"node-option-btn-block\" onClick={this.props.hasChild ? this.props.clickAddChild : this.props.clickAddSibling}>\r\n                            <OverlayTrigger\r\n                                trigger={[\"hover\", \"focus\"]}\r\n                                overlay={<Tooltip id={this.addToolTipId}> Add </Tooltip>}\r\n                            >\r\n                                <span><FaPlus color=\"green\" /></span>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                {\r\n                    this.props.isDeleteAble && (\r\n                        <div className=\"node-option-btn-block\" onClick={this.props.clickDelete}>\r\n                            <OverlayTrigger\r\n                                trigger={[\"hover\", \"focus\"]}\r\n                                overlay={<Tooltip id=\"delete-tooltip\"> Delete </Tooltip>}\r\n                            >\r\n                                <span><FaRegTrashAlt color=\"red\" /></span>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n                {\r\n                    this.props.isOptionExist && (\r\n                        <div className=\"node-option-btn-block\" onClick={this.props.clickOption}>\r\n                            <OverlayTrigger\r\n                                trigger={[\"hover\", \"focus\"]}\r\n                                overlay={<Tooltip id=\"option-tooltip\"> Option </Tooltip>}\r\n                            >\r\n                                <span><AiOutlineSetting /></span>\r\n                            </OverlayTrigger>\r\n                        </div>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NodeOptionButtons;","import React from 'react';\r\nimport { Form, Col, InputGroup, Button, Modal, OverlayTrigger, Tooltip, FormControl, Row } from 'react-bootstrap';\r\nimport nextId from 'react-id-generator';\r\nimport { TiPencil } from 'react-icons/ti';\r\n\r\nimport NodeField, { GenericField } from '../interface/NodeField';\r\nimport { NodeState } from '../interface/State';\r\nimport { NodeProps } from '../interface/Props';\r\nimport ChildNodes from '../ChildNodes';\r\nimport { Type } from './DataType';\r\nimport NodeOptionButtons from '../NodeOptionButtons';\r\n\r\n\r\nabstract class Node extends React.Component<NodeProps, NodeState> {\r\n\r\n    abstract OptionModal(): JSX.Element;\r\n    abstract recordField(fieldName: keyof NodeField, event: React.ChangeEvent<HTMLElement>): void;\r\n    abstract exportSchemaObj(): any;\r\n\r\n    protected abstract readonly selfType: keyof typeof Type;\r\n\r\n    protected field: NodeField;\r\n    protected childRef: React.RefObject<ChildNodes>;\r\n    private optionFieldFormRef: React.RefObject<HTMLFormElement>;\r\n\r\n    constructor(props: NodeProps) {\r\n\r\n        super(props);\r\n\r\n        this.childRef = React.createRef<ChildNodes>();\r\n        this.optionFieldFormRef = React.createRef<HTMLFormElement>();\r\n\r\n        this.state = {\r\n            // default value\r\n            showOptionModal: false,\r\n            showDescriptionModal: false,\r\n            isDeleteAble: true,\r\n            isOptionExist: true,\r\n            hasChild: false,\r\n            hasSibling: true,\r\n\r\n            // set arguments\r\n            ...props,\r\n        }\r\n\r\n        this.field = {\r\n            name: nextId(\"field_\"),\r\n            required: true,\r\n        };\r\n\r\n        if (this.props.field) {\r\n\r\n            this.field = {\r\n                ...this.field,\r\n                ...this.props.field\r\n            };\r\n\r\n        }\r\n    }\r\n\r\n    get form() {\r\n        return this.field;\r\n    }\r\n\r\n    setShowOptionModal(isShow: boolean): void {\r\n\r\n        this.setState({\r\n            showOptionModal: isShow,\r\n        });\r\n    }\r\n\r\n    setShowDescriptionEditorModal(isShow: boolean): void {\r\n\r\n        this.setState({\r\n            showDescriptionModal: isShow\r\n        });\r\n    }\r\n\r\n    addSibling(): void {\r\n\r\n        if (this.props.addSibling)\r\n            this.props.addSibling(this.props.keyId);\r\n    }\r\n\r\n    addChild(isDeleteAble: boolean = true, hasSibling: boolean = true): void {\r\n\r\n        this.childRef.current!.add(\"\", isDeleteAble, hasSibling);\r\n\r\n    }\r\n\r\n    delete(): void {\r\n\r\n        if (this.props.delete)\r\n            this.props.delete(this.props.keyId)\r\n    }\r\n\r\n    changeType(event: React.ChangeEvent<HTMLSelectElement>): void {\r\n\r\n        event.preventDefault();\r\n\r\n        if (event.target.value in Type) {\r\n            this.props.changeType(this.props.keyId, (Type as any)[event.target.value])\r\n        }\r\n    }\r\n\r\n    recordGenericField(fieldName: keyof GenericField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"name\") {\r\n\r\n            this.props.changeName(this.props.keyId, event.target.value)\r\n            this.field[fieldName] = event.target.value;\r\n        }\r\n        else if (fieldName === \"required\") {\r\n            this.field[fieldName] = event.target.checked;\r\n        }\r\n        else {\r\n            this.field[fieldName] = event.target.value;\r\n        }\r\n\r\n        // need to sync for both input blank\r\n        if (fieldName === \"description\")\r\n            this.forceUpdate()\r\n\r\n    }\r\n\r\n    resetOptionFiledForm(): void {\r\n\r\n        let fieldName: keyof NodeField;\r\n        for (fieldName in this.field) {\r\n            if (fieldName !== \"name\" && fieldName !== \"title\" && fieldName !== \"description\" && fieldName !== \"required\")\r\n                delete this.field[fieldName]\r\n        }\r\n\r\n        if (this.optionFieldFormRef.current)\r\n            this.optionFieldFormRef.current.reset();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        return (\r\n            <div className=\"my-1\">\r\n                <Form>\r\n                    <Form.Row>\r\n                        <Col lg={3}>\r\n                            <Row>\r\n                                <Col lg=\"auto\" className=\"px-0 mx-0\" style={{ width: (this.props.depth * 20).toString() + \"px\" }}>\r\n                                </Col>\r\n                                <Col>\r\n                                    <InputGroup>\r\n\r\n                                        <OverlayTrigger\r\n                                            trigger={[\"hover\", \"focus\"]}\r\n                                            overlay={<Tooltip id=\"add-tooltip\"> Required </Tooltip>}\r\n                                        >\r\n                                            <InputGroup.Prepend>\r\n                                                <InputGroup.Checkbox defaultChecked={this.field.required} disabled={!this.state.isDeleteAble} onChange={this.recordGenericField.bind(this, \"required\")} />\r\n                                            </InputGroup.Prepend>\r\n                                        </OverlayTrigger>\r\n\r\n                                        <Form.Control placeholder=\"items\"\r\n                                            required\r\n                                            readOnly={this.state.isDeleteAble ? false : true}\r\n                                            defaultValue={this.field.name}\r\n                                            onChange={this.recordGenericField.bind(this, \"name\")} />\r\n                                    </InputGroup>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col lg={1}>\r\n                            <Form.Control as=\"select\" custom placeholder=\"DataType\" onChange={this.changeType.bind(this)} value={this.selfType}>\r\n                                <option>Object</option>\r\n                                <option>Array</option>\r\n                                <option>String</option>\r\n                                <option>Integer</option>\r\n                                <option>Number</option>\r\n                                <option>Boolean</option>\r\n                            </Form.Control>\r\n                        </Col>\r\n                        <Col lg={3}>\r\n                            <Form.Control placeholder=\"Titile\" onChange={this.recordGenericField.bind(this, \"title\")} />\r\n                        </Col>\r\n                        <Col lg={4}>\r\n\r\n                            <InputGroup>\r\n                                <FormControl type=\"text\" id=\"Description\" placeholder=\"Description\" defaultValue={this.field.description} value={this.field.description} onChange={this.recordGenericField.bind(this, \"description\")} />\r\n                                <OverlayTrigger\r\n                                    trigger={[\"hover\", \"focus\"]}\r\n                                    overlay={<Tooltip id=\"add-tooltip\"> Edit </Tooltip>}\r\n                                >\r\n                                    <InputGroup.Append>\r\n                                        <Button variant=\"outline-primary\" onClick={this.setShowDescriptionEditorModal.bind(this, true)}>\r\n                                            <TiPencil />\r\n                                        </Button>\r\n                                    </InputGroup.Append>\r\n                                </OverlayTrigger>\r\n                            </InputGroup>\r\n\r\n                            <Modal\r\n                                onHide={this.setShowDescriptionEditorModal.bind(this, false)}\r\n                                show={this.state.showDescriptionModal}\r\n                                size=\"lg\"\r\n                                aria-labelledby=\"description-modal\"\r\n                                centered\r\n                            >\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title id=\"description-modal\">\r\n                                        Description\r\n                                    </Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <Form.Group>\r\n                                        <Form.Control as=\"textarea\" rows={3} defaultValue={this.field.description} onChange={this.recordGenericField.bind(this, \"description\")} />\r\n                                    </Form.Group>\r\n                                </Modal.Body>\r\n                            </Modal>\r\n                        </Col>\r\n                        <Col lg={1}>\r\n                            <NodeOptionButtons\r\n                                hasChild={this.selfType === Type.Array ? false : this.state.hasChild}\r\n                                hasSibling={this.state.hasSibling}\r\n                                isDeleteAble={this.state.isDeleteAble}\r\n                                isOptionExist={this.state.isOptionExist}\r\n                                clickAddChild={this.addChild.bind(this)}\r\n                                clickAddSibling={this.addSibling.bind(this)}\r\n                                clickDelete={this.delete.bind(this)}\r\n                                clickOption={this.setShowOptionModal.bind(this, true)}\r\n                            />\r\n\r\n                            <Modal\r\n                                onHide={this.setShowOptionModal.bind(this, false)}\r\n                                show={this.state.showOptionModal}\r\n                                size=\"lg\"\r\n                                aria-labelledby=\"option-modal\"\r\n                                centered\r\n                            >\r\n                                <Modal.Header closeButton>\r\n                                    <Modal.Title id=\"option-modal\">\r\n                                        Advanced Options\r\n                                </Modal.Title>\r\n                                </Modal.Header>\r\n                                <Modal.Body>\r\n                                    <Form ref={this.optionFieldFormRef}>\r\n                                        {this.OptionModal()}\r\n                                    </Form>\r\n                                </Modal.Body>\r\n                                <Modal.Footer>\r\n                                    <Button variant=\"outline-secondary\" onClick={this.resetOptionFiledForm.bind(this)}>Clear</Button>\r\n                                </Modal.Footer>\r\n                            </Modal>\r\n                        </Col>\r\n                    </Form.Row>\r\n                </Form>\r\n                {this.state.hasChild && <ChildNodes ref={this.childRef} depth={this.props.depth + 1} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Node;","import React from 'react';\r\nimport { Form, Row, Col } from 'react-bootstrap';\r\n\r\nimport { ArrayField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass Array extends Node {\r\n\r\n    protected readonly selfType = Type.Array;\r\n\r\n    constructor(props: any) {\r\n        super({\r\n            ...props,\r\n            hasChild: true,\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.addChild(false, false);\r\n\r\n    }\r\n\r\n    exportSchemaObj(): any {\r\n\r\n        let child = this.childRef.current!.exportSchemaObj();\r\n\r\n        if (child) {\r\n\r\n            return {\r\n                type: \"array\",\r\n                title: this.field.title,\r\n                description: this.field.description,\r\n                uniqueItems: this.field.unique,\r\n                minItems: this.field.min_items,\r\n                maxItems: this.field.max_items,\r\n                items: child[0].value\r\n            }\r\n\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    recordField(fieldName: keyof ArrayField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"min_items\" || fieldName === \"max_items\") {\r\n\r\n            this.field[fieldName] = Number(event.target.value);\r\n\r\n        } else {\r\n\r\n            this.field[fieldName] = event.target.checked;\r\n\r\n        }\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MinItems\">\r\n                        Min Items\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MinItems\" onChange={this.recordField.bind(this, \"min_items\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MaxItems\">\r\n                        Max Items\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MaxItems\" onChange={this.recordField.bind(this, \"max_items\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    <Form.Check id=\"uniqueCheckbox\" type=\"checkbox\" label=\"Unique\" onChange={this.recordField.bind(this, \"unique\")} />\r\n                </Form.Group>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Array;","import React from 'react';\r\nimport { Form, Col, Row } from 'react-bootstrap';\r\n\r\nimport { BooleanField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node';\r\n\r\nclass Boolean extends Node {\r\n\r\n    protected readonly selfType = Type.Boolean;\r\n\r\n    recordField(fieldName: keyof BooleanField, event: React.ChangeEvent<HTMLSelectElement>): void {\r\n\r\n        this.field[fieldName] = event.target.value === \"True\" ? true : false;\r\n\r\n    }\r\n\r\n    exportSchemaObj(): any {\r\n\r\n        return {\r\n            type: \"boolean\",\r\n            default: this.field.default,\r\n            title: this.field.title,\r\n            description: this.field.description,\r\n        };\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control as=\"select\" onChange={this.recordField.bind(this, \"default\")}>\r\n                            <option></option>\r\n                            <option>True</option>\r\n                            <option>False</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Boolean;","import React from 'react';\r\nimport { Form, Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nimport { IntegerField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass Integer extends Node {\r\n\r\n    protected readonly selfType = Type.Integer;\r\n\r\n    recordField(fieldName: keyof IntegerField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"default\" || fieldName === \"constant\" || fieldName === \"min_value\" || fieldName === \"max_value\" || fieldName === \"multiple_of\") {\r\n\r\n            this.field[fieldName] = Number(event.target.value);\r\n\r\n        } else if (fieldName === \"max_exclusive\" || fieldName === \"min_exclusive\") {\r\n\r\n            this.field[fieldName] = event.target.checked;\r\n\r\n        }\r\n    }\r\n\r\n    recordEnumField(key: number, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        this.field.enum![key] = parseInt(event.target.value);\r\n    }\r\n\r\n    addEnum(): void {\r\n\r\n        if (!this.field.enum)\r\n            this.field.enum = [];\r\n\r\n        this.field.enum!.push(\"\");\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    exportSchemaObj(): any {\r\n\r\n        return {\r\n            type: \"integer\",\r\n            title: this.field.title,\r\n            description: this.field.description,\r\n\r\n            constant: this.field.constant,\r\n            default: this.field.default,\r\n            minimum: this.field.min_value,\r\n            exclusiveMinimum: this.field.min_exclusive,\r\n            maximum: this.field.max_value,\r\n            exclusiveMaximum: this.field.max_exclusive,\r\n            multipleOf: this.field.multiple_of,\r\n\r\n            enum: this.field.enum,\r\n        };\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Form.Group as={Row} controlId=\"MinValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Min Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"min_value\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMin\" inline\r\n                            label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} onChange={this.recordField.bind(this, \"min_exclusive\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"MaxValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Max Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"max_value\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMax\" inline label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} onChange={this.recordField.bind(this, \"max_exclusive\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"Default\" onChange={this.recordField.bind(this, \"default\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                        Multiple Of\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"MultipleOf\" onChange={this.recordField.bind(this, \"multiple_of\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                        Constant\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"Constant\" placeholder=\"Restricted Value\" onChange={this.recordField.bind(this, \"constant\")} />\r\n                    </Col>\r\n\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                    {\r\n                        this.field.enum\r\n                            ?\r\n                            (\r\n                                (this.field.enum as Array<number | string>).map((enumeration, index: number) => (\r\n                                    <Form.Group as={Row} key={index}>\r\n                                        <Form.Label column lg=\"2\">\r\n                                            {index === 0 ? \"Enum\" : \"\"}\r\n                                        </Form.Label>\r\n                                        <Col lg=\"4\">\r\n                                            {\r\n                                                index === this.field.enum!.length - 1\r\n                                                    ?\r\n                                                    (\r\n                                                        <InputGroup>\r\n                                                            <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                            <InputGroup.Append>\r\n                                                                <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                                    <FaPlus />\r\n                                                                </Button>\r\n                                                            </InputGroup.Append>\r\n                                                        </InputGroup>\r\n                                                    )\r\n                                                    :\r\n                                                    (\r\n                                                        <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                    )\r\n                                            }\r\n                                        </Col>\r\n                                    </Form.Group>\r\n                                ))\r\n                            )\r\n                            :\r\n                            (\r\n                                <Form.Group as={Row}>\r\n                                    <Form.Label column lg=\"2\">\r\n                                        Enum\r\n                                </Form.Label>\r\n                                    <Col lg=\"10\">\r\n                                        <Row>\r\n                                            <Col lg=\"12\">\r\n                                                <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                    <FaPlus color=\"green\" />\r\n                                                </Button>\r\n\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            )\r\n                    }\r\n                </Form.Group>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Integer;","import React from 'react';\r\nimport { Form, Row, Col, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nimport { NumberField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass Number extends Node {\r\n\r\n    protected readonly selfType = Type.Number;\r\n\r\n    recordField(fieldName: keyof NumberField, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        if (fieldName === \"default\" || fieldName === \"constant\" || fieldName === \"min_value\" || fieldName === \"max_value\") {\r\n\r\n            this.field[fieldName] = parseFloat(event.target.value);\r\n\r\n        } else if (fieldName === \"max_exclusive\" || fieldName === \"min_exclusive\") {\r\n\r\n            this.field[fieldName] = event.target.checked;\r\n\r\n        }\r\n    }\r\n\r\n    recordEnumField(key: number, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        this.field.enum![key] = parseFloat(event.target.value);\r\n    }\r\n\r\n    addEnum(): void {\r\n\r\n        if (!this.field.enum)\r\n            this.field.enum = [];\r\n\r\n        this.field.enum!.push(\"\")\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    exportSchemaObj(): any {\r\n        return {\r\n            type: \"number\",\r\n            title: this.field.title,\r\n            description: this.field.description,\r\n\r\n            constant: this.field.constant,\r\n            default: this.field.default,\r\n            minimum: this.field.min_value,\r\n            exclusiveMinimum: this.field.min_exclusive,\r\n            maximum: this.field.max_value,\r\n            exclusiveMaximum: this.field.max_exclusive,\r\n            multipleOf: this.field.multiple_of,\r\n\r\n            enum: this.field.enum,\r\n        };\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Form.Group as={Row} controlId=\"MinValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Min Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"min_value\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMin\" inline label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} onChange={this.recordField.bind(this, \"min_exclusive\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"MaxValue\">\r\n                    <Form.Label column lg=\"2\">\r\n                        Max Value\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" onChange={this.recordField.bind(this, \"max_value\")} />\r\n                    </Col>\r\n                    <Col lg=\"6\">\r\n                        <Form.Check id=\"ExclusiveMax\" inline label=\"Exclusive\" type=\"checkbox\" style={{ height: \"100%\" }} onChange={this.recordField.bind(this, \"max_exclusive\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"Default\" onChange={this.recordField.bind(this, \"default\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MultipleOf\">\r\n                        Multiple Of\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"MultipleOf\" onChange={this.recordField.bind(this, \"multiple_of\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Constant\">\r\n                        Constant\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" id=\"Constant\" placeholder=\"Restricted Value\" onChange={this.recordField.bind(this, \"constant\")} />\r\n                    </Col>\r\n\r\n                </Form.Group>\r\n\r\n                {\r\n                    this.field.enum\r\n                        ?\r\n                        (\r\n                            (this.field.enum as Array<number | string>).map((enumeration, index: number) => (\r\n                                <Form.Group as={Row} key={index}>\r\n                                    <Form.Label column lg=\"2\">\r\n                                        {index === 0 ? \"Enum\" : \"\"}\r\n                                    </Form.Label>\r\n                                    <Col lg=\"6\">\r\n                                        {\r\n                                            index === this.field.enum!.length - 1\r\n                                                ?\r\n                                                (\r\n                                                    <InputGroup>\r\n                                                        <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                        <InputGroup.Append>\r\n                                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                                <FaPlus />\r\n                                                            </Button>\r\n                                                        </InputGroup.Append>\r\n                                                    </InputGroup>\r\n                                                )\r\n                                                :\r\n                                                (\r\n                                                    <FormControl type=\"number\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                )\r\n                                        }\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            ))\r\n                        )\r\n                        :\r\n                        (\r\n                            <Form.Group as={Row}>\r\n                                <Form.Label column lg=\"2\">\r\n                                    Enum\r\n                                </Form.Label>\r\n                                <Col lg=\"10\">\r\n                                    <Row>\r\n                                        <Col lg=\"12\">\r\n                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                <FaPlus color=\"green\" />\r\n                                            </Button>\r\n\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        )\r\n                }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Number;","import React from 'react';\r\n\r\nimport { ObjectField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\n// It will failed if we name a class as \"Object\"\r\nclass ObjectNode extends Node {\r\n    //class Object extends Node {\r\n\r\n    protected readonly selfType = Type.Object;\r\n\r\n    recordField(fieldName: keyof ObjectField, event: React.ChangeEvent<HTMLInputElement>): void { }\r\n\r\n    constructor(props: any) {\r\n        super({\r\n            ...props,\r\n            hasChild: true,\r\n            isOptionExist: false,\r\n        });\r\n    }\r\n\r\n    exportSchemaObj(): any {\r\n\r\n        let children = this.childRef.current?.exportSchemaObj();\r\n\r\n        let properties: any = {}\r\n        let required: string[] = [];\r\n\r\n        for (const child of children) {\r\n            properties[child.name] = {\r\n                ...child.value\r\n            }\r\n            if (child.required)\r\n                required.push(child.name);\r\n        }\r\n\r\n        return {\r\n            type: \"object\",\r\n            title: this.field.title,\r\n            description: this.field.description,\r\n            properties,\r\n            required\r\n        }\r\n    }\r\n\r\n    OptionModal(): JSX.Element { return <></> }\r\n}\r\n\r\nexport default ObjectNode;","\r\nimport Array from './Array';\r\nimport Boolean from './Boolean';\r\nimport Integer from './Integer';\r\nimport Number from './Number';\r\nimport Object from './Object';\r\nimport String from './String';\r\n\r\nimport Node from './Node';\r\n\r\nenum Type {\r\n    Array = \"Array\",\r\n    Boolean = \"Boolean\",\r\n    Integer = \"Integer\",\r\n    Number = \"Number\",\r\n    Object = \"Object\",\r\n    String = \"String\"\r\n};\r\n\r\nexport { Array as ArrayNode };\r\nexport { Boolean as BooleanNode };\r\nexport { Integer as IntegerNode };\r\nexport { Number as NumberNode };\r\nexport { Object as ObjectNode };\r\nexport { String as StringNode };\r\nexport { Node };\r\n\r\nexport { Type };","import React from 'react';\r\nimport { Form, Col, Row, InputGroup, FormControl, Button } from 'react-bootstrap';\r\nimport { FaPlus } from 'react-icons/fa';\r\n\r\nimport { StringField } from '../interface/NodeField';\r\nimport { Type } from './DataType';\r\nimport Node from './Node'\r\n\r\nclass String extends Node {\r\n\r\n    protected readonly selfType = Type.String;\r\n\r\n    recordField(fieldName: keyof StringField, event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>): void {\r\n\r\n        if (fieldName === \"min_length\" || fieldName === \"max_length\") {\r\n\r\n            this.field[fieldName] = Number(event.target.value);\r\n\r\n        } else if (fieldName === \"default\" || fieldName === \"constant\" || fieldName === \"pattern\") {\r\n\r\n            this.field[fieldName] = event.target.value;\r\n\r\n        } else if (fieldName === \"format\") {\r\n\r\n            this.field[fieldName] = event.target.value as StringField[\"format\"]\r\n\r\n        }\r\n    }\r\n\r\n    recordEnumField(key: number, event: React.ChangeEvent<HTMLInputElement>): void {\r\n\r\n        this.field.enum![key] = event.target.value;\r\n    }\r\n\r\n    addEnum(): void {\r\n\r\n        if (!this.field.enum)\r\n            this.field.enum = [];\r\n\r\n        this.field.enum!.push(\"\")\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n    exportSchemaObj(): any {\r\n        return {\r\n            type: \"string\",\r\n            title: this.field.title,\r\n            description: this.field.description,\r\n\r\n            constant: this.field.constant,\r\n            default: this.field.default,\r\n\r\n            minLength: this.field.min_length,\r\n            maxLength: this.field.max_length,\r\n            format: this.field.format,\r\n            pattern: this.field.pattern,\r\n\r\n            enum: this.field.enum,\r\n        };\r\n    }\r\n\r\n    OptionModal(): JSX.Element {\r\n        return (\r\n            <>\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"Default\">\r\n                        Default\r\n                    </Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control type=\"text\" min=\"0\" id=\"Default\" onChange={this.recordField.bind(this, \"default\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row}>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MinLength\">\r\n                        Min Length\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MinLength\" onChange={this.recordField.bind(this, \"min_length\")} />\r\n                    </Col>\r\n                    <Form.Label column lg=\"2\" htmlFor=\"MaxLength\">\r\n                        Max Length\r\n                    </Form.Label>\r\n                    <Col lg=\"4\">\r\n                        <Form.Control type=\"number\" min=\"0\" id=\"MaxLength\" onChange={this.recordField.bind(this, \"max_length\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"Format\">\r\n                    <Form.Label column lg=\"2\">Format</Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control as=\"select\" onChange={this.recordField.bind(this, \"format\")}>\r\n                            {[\"date-time\", \"time\", \"date\", \"email\", \"idn-email\", \"hostname\", \"idn-hostname\", \"ipv4\", \"ipv6\", \"uri\", \"uri-reference\", \"iri\", \"iri-reference\", \"uri-template\", \"json-pointer\", \"relative-json-pointer\", \"regex\"].map((v, i) => <option key={i}>{v}</option>)}\r\n                        </Form.Control>\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"Pattern\">\r\n                    <Form.Label column lg=\"2\">Pattern</Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control type=\"text\" placeholder=\"Regular Expression\" onChange={this.recordField.bind(this, \"pattern\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                <Form.Group as={Row} controlId=\"Constant\">\r\n                    <Form.Label column lg=\"2\">Constant</Form.Label>\r\n                    <Col lg=\"10\">\r\n                        <Form.Control type=\"text\" placeholder=\"Restricted Value\" onChange={this.recordField.bind(this, \"constant\")} />\r\n                    </Col>\r\n                </Form.Group>\r\n\r\n                {\r\n                    this.field.enum\r\n                        ?\r\n                        (\r\n                            (this.field.enum as Array<number | string>).map((enumeration, index: number) => (\r\n                                <Form.Group as={Row} key={index}>\r\n                                    <Form.Label column lg=\"2\">\r\n                                        {index === 0 ? \"Enum\" : \"\"}\r\n                                    </Form.Label>\r\n                                    <Col lg=\"10\">\r\n                                        {\r\n                                            index === this.field.enum!.length - 1\r\n                                                ?\r\n                                                (\r\n                                                    <InputGroup>\r\n                                                        <FormControl type=\"text\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                        <InputGroup.Append>\r\n                                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                                <FaPlus />\r\n                                                            </Button>\r\n                                                        </InputGroup.Append>\r\n                                                    </InputGroup>\r\n                                                )\r\n                                                :\r\n                                                (\r\n                                                    <FormControl type=\"text\" id={index.toString()} onChange={this.recordEnumField.bind(this, index)} defaultValue={enumeration} />\r\n                                                )\r\n                                        }\r\n                                    </Col>\r\n                                </Form.Group>\r\n                            ))\r\n                        )\r\n                        :\r\n                        (\r\n                            <Form.Group as={Row}>\r\n                                <Form.Label column lg=\"2\">\r\n                                    Enum\r\n                                </Form.Label>\r\n                                <Col lg=\"10\">\r\n                                    <Row>\r\n                                        <Col lg=\"12\">\r\n                                            <Button variant=\"outline-success\" onClick={this.addEnum.bind(this)}>\r\n                                                <FaPlus color=\"green\" />\r\n                                            </Button>\r\n\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Col>\r\n                            </Form.Group>\r\n                        )\r\n                }\r\n\r\n            </ >\r\n        );\r\n    }\r\n}\r\n\r\nexport default String;","import React from 'react';\r\nimport nextId from \"react-id-generator\";\r\n\r\nimport { Type, Node } from './data_type/DataType';\r\nimport Factory from './data_type/Factory';\r\nclass RootNode extends React.Component {\r\n\r\n    private selfType: keyof typeof Type;\r\n    private nodeRef: React.RefObject<Node>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.selfType = Type.Object;\r\n        this.nodeRef = React.createRef<Node>();\r\n    }\r\n\r\n    changeType(keyId: string, type: keyof typeof Type): void {\r\n\r\n        this.selfType = type;\r\n        this.forceUpdate()\r\n\r\n    }\r\n\r\n    exportSchemaObj(): any {\r\n\r\n        return this.nodeRef.current!.exportSchemaObj();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n\r\n        return (\r\n            <Factory\r\n                ref={this.nodeRef}\r\n                key={nextId(\"childId\")}\r\n                keyId={nextId(\"childId\")}\r\n                depth={0}\r\n                type={this.selfType}\r\n                isDeleteAble={false}\r\n                hasSibling={false}\r\n                field={{ name: \"root\", required: true }}\r\n                changeType={this.changeType.bind(this)}\r\n                changeName={() => true}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default RootNode;","import React from 'react';\r\nimport { Modal, Button, Toast } from 'react-bootstrap';\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\n\r\nimport * as hljs from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nimport RootNode from '../nodes_component/RootNode';\r\n\r\ninterface SchemaEditorState {\r\n    showExport: boolean;\r\n    showImport: boolean;\r\n    showErrorToast: boolean;\r\n    exportString: string;\r\n}\r\n\r\nclass SchemaEditor extends React.Component<{}, SchemaEditorState> {\r\n\r\n    private rootNode: any;\r\n    private rootNodeRef: React.RefObject<RootNode>;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.rootNodeRef = React.createRef<RootNode>();\r\n        this.rootNode = <RootNode ref={this.rootNodeRef} />\r\n\r\n        this.state = {\r\n            showExport: false,\r\n            showImport: false,\r\n            showErrorToast: false,\r\n            exportString: \"\"\r\n        }\r\n    }\r\n\r\n    toggleImport(show: boolean): void {\r\n\r\n        this.setState({ showImport: show });\r\n\r\n    }\r\n\r\n    toggleExport(show: boolean): void {\r\n\r\n        if (show) {\r\n\r\n            try {\r\n                const schema = this.rootNodeRef.current!.exportSchemaObj();\r\n                this.setState({\r\n                    exportString: JSON.stringify(schema, null, 4),\r\n                    showExport: true\r\n                })\r\n            } catch (error) {\r\n                this.setState({\r\n                    showErrorToast: true\r\n                })\r\n\r\n            }\r\n\r\n        } else {\r\n\r\n            this.setState({ showExport: false });\r\n\r\n        }\r\n    }\r\n\r\n    saveSchema(): void {\r\n\r\n        const fileBlob = new Blob([this.state.exportString], { type: 'application/json' });\r\n        const blobURL = window.URL.createObjectURL(fileBlob);\r\n\r\n        const anchorElement = document.createElement('a');\r\n        anchorElement.href = blobURL;\r\n        anchorElement.setAttribute('download', \"Schema.json\");\r\n        document.body.appendChild(anchorElement);\r\n        anchorElement.click();\r\n\r\n        document.body.removeChild(anchorElement);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"my-3 mx-4 \">\r\n                <Button variant=\"outline-primary\" onClick={this.toggleImport.bind(this, true)}>Import from file</Button> {' '}\r\n                <Button variant=\"outline-success\" onClick={this.toggleExport.bind(this, true)}>Export Schema</Button>\r\n                <div>\r\n                    {this.rootNode}\r\n                    {/* <RootNode ref={this.rootNodeRef} /> */}\r\n                </div>\r\n\r\n                <Modal size=\"xl\" scrollable show={this.state.showExport} onHide={this.toggleExport.bind(this, false)}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Export</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <div style={{ maxHeight: \"80%\" }}>\r\n                            <SyntaxHighlighter language=\"json\" style={hljs.vs2015} showLineNumbers={true}>\r\n                                {this.state.exportString}\r\n                            </SyntaxHighlighter>\r\n                        </div>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"outline-success\" onClick={this.saveSchema.bind(this)}>Save</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n\r\n                <Toast\r\n                    show={this.state.showErrorToast}\r\n                    delay={3000}\r\n                    autohide style={{\r\n                        position: 'absolute',\r\n                        bottom: \"20px\",\r\n                        right: \"20px\",\r\n                    }}>\r\n                    <Toast.Header>\r\n                        <strong className=\"mr-auto\">Error</strong>\r\n                    </Toast.Header>\r\n                    <Toast.Body>There's still some errors in your schema!<br /> Please check and try again!</Toast.Body>\r\n                </Toast>\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default SchemaEditor;","import React from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport SchemaEditor from './layout/SchemaEditor';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                    <Navbar.Brand href=\"\">JSON Schema Editor</Navbar.Brand>\r\n                    <Navbar.Collapse className=\"justify-content-end\">\r\n                        <Navbar.Text>\r\n                            <a href=\"https://github.com/JingWangTW/json-schema-editor\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                <img height=\"30px\" src=\"https://github.com/fluidicon.png\" alt=\"Github ICON\" />\r\n                            </a>\r\n                        </Navbar.Text>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n\r\n                <SchemaEditor />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './component/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}